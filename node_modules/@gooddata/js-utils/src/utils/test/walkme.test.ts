// (C) 2007-2018 GoodData Corporation

import { generateFinalUrl, load, GDC_WALKME_HASH } from '../walkme';
import { isProductionHostname } from '../env';
import { loadScript } from '../load-script';

jest.mock('../env');
jest.mock('../load-script');

describe('walkme', () => {

    describe('generate url', () => {

        afterEach(() => {
            (isProductionHostname as any).mockClear();
        });

        it('should generate url correctly', () => {
            const fakeHash = 'fakeHash';
            expect(generateFinalUrl(fakeHash))
                .toEqual(`https://cdn.walkme.com/users/${fakeHash}/walkme_${fakeHash}_https.js`);
        });

        it('should generate url correctly when environment is set', () => {
            const fakeHash = 'fakeHash';
            const fakeEnv = 'fakeEnv';
            expect(generateFinalUrl(fakeHash, fakeEnv))
                .toEqual(`https://cdn.walkme.com/users/${fakeHash}/${fakeEnv}/walkme_${fakeHash}_https.js`);
        });

        it('should generate url correctly when environment is empty \
        and hash equal to GDC_WALKME_HASH and not production', () => {
            const fakeHash = GDC_WALKME_HASH;
            const envExpected = 'test';
            (isProductionHostname as any).mockReturnValue(false);
            expect(generateFinalUrl(fakeHash))
                .toEqual(`https://cdn.walkme.com/users/${fakeHash}/${envExpected}/walkme_${fakeHash}_https.js`);
        });

        it('should generate url correctly when environment is empty \
        and hash equal to GDC_WALKME_HASH and is production', () => {
            const fakeHash = GDC_WALKME_HASH;
            (isProductionHostname as any).mockReturnValue(true);
            expect(generateFinalUrl(fakeHash))
                .toEqual(`https://cdn.walkme.com/users/${fakeHash}/walkme_${fakeHash}_https.js`);
        });
    });

    describe('load', () => {
        beforeEach(() => {
            (loadScript as any).mockImplementation(() => Promise.resolve());
        });

        afterEach(() => {
            (loadScript as any).mockClear();
            (isProductionHostname as any).mockClear();
        });

        it('should not load script', () => {
            load('');
            expect((loadScript as any).mock.calls.length).toBe(0);
        });

        it('should load script', () => {
            const fakeHash = 'fakeHash';
            load(fakeHash);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                `https://cdn.walkme.com/users/${fakeHash}/walkme_${fakeHash}_https.js`
            );
        });

        it('should load script with GDC walkme hash in test env', () => {
            (isProductionHostname as any).mockReturnValue(false);

            load(GDC_WALKME_HASH);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                `https://cdn.walkme.com/users/${GDC_WALKME_HASH}/test/walkme_${GDC_WALKME_HASH}_https.js`
            );
        });

        it('should load script with GDC walkme hash in production env', () => {
            (isProductionHostname as any).mockReturnValue(true);

            load(GDC_WALKME_HASH);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                `https://cdn.walkme.com/users/${GDC_WALKME_HASH}/walkme_${GDC_WALKME_HASH}_https.js`
            );
        });

        it('should load script with GDC walkme hash in custom env', () => {
            (isProductionHostname as any).mockReturnValue(false);
            const fakeEnv = 'fakeEnv';

            load(GDC_WALKME_HASH, fakeEnv);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                `https://cdn.walkme.com/users/${GDC_WALKME_HASH}/${fakeEnv}/walkme_${GDC_WALKME_HASH}_https.js`
            );
        });

        it('should load script with custom walkme hash in custom env', () => {
            (isProductionHostname as any).mockReturnValue(false);
            const fakeEnv = 'fakeEnv';
            const fakeHash = 'fakeHash';
            load(fakeHash, fakeEnv);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                `https://cdn.walkme.com/users/${fakeHash}/${fakeEnv}/walkme_${fakeHash}_https.js`
            );
        });
    });
});
