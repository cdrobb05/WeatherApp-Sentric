// (C) 2007-2018 GoodData Corporation

import { load, DEVELOPMENT_SNIPPET, PRODUCTION_SNIPPET } from '../trialSnippet';
import { loadScript } from '../load-script';

jest.mock('../env');
jest.mock('../load-script');

describe('trialSnippet', () => {
    describe('load', () => {
        beforeEach(() => {
            (loadScript as any).mockImplementation(() => Promise.resolve());
        });

        afterEach(() => {
            (loadScript as any).mockClear();
        });

        it('should not load trialSnippet when env is not defined', () => {
            const env: string | undefined = undefined;

            load(env);
            expect((loadScript as any).mock.calls.length).toBe(0);
        });

        it('should not load trialSnippet when env is deferent than prod or dev', () => {
            const env: string = 'fakeEnv';

            load(env);
            expect((loadScript as any).mock.calls.length).toBe(0);
        });

        it('should load dev trialSnippet when env is dev', () => {
            const env: string = 'dev';

            load(env);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                DEVELOPMENT_SNIPPET
            );
        });

        it('should load prod trialSnippet when env is prod', () => {
            const env: string = 'prod';

            load(env);
            expect((loadScript as any).mock.calls.length).toBe(1);
            expect((loadScript as any)).toBeCalledWith(
                PRODUCTION_SNIPPET
            );
        });
    });
});
