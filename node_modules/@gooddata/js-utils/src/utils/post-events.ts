// (C) 2007-2020 GoodData Corporation
import get from 'lodash/get';
import { IGdcMessageEvent, GdcMessageEventListener, IGdcMessageEventListenerConfig } from '@gooddata/typings';

export interface IHost {
    postMessage?: Window['postMessage'];
    parent?: IHost;
}

let host: IHost;
try {
    // eslint-disable-next-line no-restricted-globals
    host = parent; // do not use check `typeof parent` due to IE11 "Access denied error", instead wrap by try/catch
} catch (e) {
    host = {}; // use mocked host object when running in node (testcafe tests)
}

// enable unit testing
export const setHost = (h: IHost): void => {
    host = h;
};

export const postEvent = (product: string, name: string, data: any, contextId?: string): void => {
    if (!host.postMessage) {
        return;
    }
    host.postMessage({
        gdc: {
            product,
            event: { name, data, contextId }
        }
    }, '*');
};

interface IReceiverEntry {
    listener: GdcMessageEventListener;
    receiver: GdcMessageEventListener;
}

const receivers: IReceiverEntry[] = [];

let config: IGdcMessageEventListenerConfig = {
    product: '',
    validReceivedPostEvents: []
};

const receiveListener = (
    listener: GdcMessageEventListener
): GdcMessageEventListener => (event: IGdcMessageEvent<string, string, any>) => {
    return (
        get(event, 'data.gdc.product') === config.product &&
            // check for valid incoming command
            config.validReceivedPostEvents.includes(get(event, 'data.gdc.event.name'))
            ? listener(event)
            : false
    );
};

export function setConfig(product: string, validReceivedPostEvents: string[]): void {
    config = { product, validReceivedPostEvents };
}

export function addListener(listener: GdcMessageEventListener, target = window) {
    const receiver = receiveListener(listener);
    receivers.push({ listener, receiver });
    target.addEventListener('message', receiver, false);
}

export function removeListener(listener: GdcMessageEventListener, target = window) {
    const receiverObj = receivers.find(r => r.listener === listener);
    if (receiverObj) {
        receivers.splice(receivers.indexOf(receiverObj), 1);
        target.removeEventListener('message', receiverObj.receiver);
    }
}
