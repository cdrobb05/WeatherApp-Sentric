export interface IShortenTextOptions {
    maxLength?: number;
}
/**
 * @param {String} value string to be shortened
 * @param {Object} options currently only allows you to specify maxLength
 * @returns {String}
 */
export declare function shortenText(value: string, options?: IShortenTextOptions): string;
/**
 * Escapes special characters used in regular expressions.
 * @param {String} value string to be escaped
 * @returns {String}
 */
export declare function escapeRegExp(value: string): string;
/**
 * Generates pseudo-random string.
 * @param {Number} len length of string to be generated
 * @returns {String}
 */
export declare function randomString(len: number): string;
/**
 * Replaces non-alphanumerical characters with underscore.
 * @param {String|Number|null} value string to perform replacement on
 * @returns {String}
 */
export declare function simplifyText(value: string | number | null): string;
/**
 * Parse string in a form of [foo, bar] to an array of objects.
 * Assume alphanumeric strings in the array; if some is not alphanumeric , return null
 * @param {String} str input string with the array definition
 * @returns {Array} parsed array of strings
 */
export declare function parseStringToArray(str: string): string[] | null;
/**
 * Returns a hash code for a string.
 *
 * The hash code for a string object is computed as
 *     s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 * using number arithmetic, where s[i] is the i th character
 * of the given string, n is the length of the string,
 * and ^ indicates exponentiation.
 * (The hash value of the empty string is zero.)
 *
 * @param {string} s a string
 * @return {number} a hash code value for the given string.
 */
export declare function hashCodeString(value: string): number;
