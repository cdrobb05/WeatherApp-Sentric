"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * @param {String} value string to be shortened
 * @param {Object} options currently only allows you to specify maxLength
 * @returns {String}
 */
function shortenText(value, options) {
    if (options === void 0) { options = {}; }
    var maxLength = options.maxLength;
    if (value && maxLength && value.length > maxLength) {
        return value.substr(0, maxLength) + "\u2026";
    }
    return value;
}
exports.shortenText = shortenText;
/**
 * Escapes special characters used in regular expressions.
 * @param {String} value string to be escaped
 * @returns {String}
 */
function escapeRegExp(value) {
    return value.replace(/([.*+?^${}()|\[\]\/\\])/g, '\\$1');
}
exports.escapeRegExp = escapeRegExp;
/**
 * Generates pseudo-random string.
 * @param {Number} len length of string to be generated
 * @returns {String}
 */
function randomString(len) {
    var text = '';
    var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';
    for (var i = 0; i < len; i += 1) {
        text += possible.charAt(Math.floor(Math.random() * possible.length));
    }
    return text;
}
exports.randomString = randomString;
/**
 * Replaces non-alphanumerical characters with underscore.
 * @param {String|Number|null} value string to perform replacement on
 * @returns {String}
 */
function simplifyText(value) {
    var s = value && value.toString ? value.toString() : '';
    return s.replace(/[^a-zA-Z0-9]/g, '_').toLowerCase();
}
exports.simplifyText = simplifyText;
/**
 * Parse string in a form of [foo, bar] to an array of objects.
 * Assume alphanumeric strings in the array; if some is not alphanumeric , return null
 * @param {String} str input string with the array definition
 * @returns {Array} parsed array of strings
 */
function parseStringToArray(str) {
    if (str) {
        if (str.match(/^\[]$/)) {
            // empty array of tags []
            return [];
        }
        if (str.match(/^\[[a-zA-Z0-9]+(,[a-zA-Z0-9]+)*]$/)) {
            // [foo], [foo,bar]
            return str.slice(1, -1).split(',');
        }
    }
    return null;
}
exports.parseStringToArray = parseStringToArray;
/**
 * Returns a hash code for a string.
 *
 * The hash code for a string object is computed as
 *     s[0]*31^(n-1) + s[1]*31^(n-2) + ... + s[n-1]
 * using number arithmetic, where s[i] is the i th character
 * of the given string, n is the length of the string,
 * and ^ indicates exponentiation.
 * (The hash value of the empty string is zero.)
 *
 * @param {string} s a string
 * @return {number} a hash code value for the given string.
 */
function hashCodeString(value) {
    if (!value || !value.length) {
        return 0;
    }
    var chars = value.split('');
    var hashCode = chars.reduce(function (hashCode, char) {
        var charCode = char.charCodeAt(0);
        return (((hashCode << 5) - hashCode) + charCode) | 0; // tslint:disable-line:no-bitwise
    }, 0);
    return Math.abs(hashCode);
}
exports.hashCodeString = hashCodeString;
//# sourceMappingURL=string.js.map