"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var get_1 = __importDefault(require("lodash/get"));
var host;
try {
    // eslint-disable-next-line no-restricted-globals
    host = parent; // do not use check `typeof parent` due to IE11 "Access denied error", instead wrap by try/catch
}
catch (e) {
    host = {}; // use mocked host object when running in node (testcafe tests)
}
// enable unit testing
exports.setHost = function (h) {
    host = h;
};
exports.postEvent = function (product, name, data, contextId) {
    if (!host.postMessage) {
        return;
    }
    host.postMessage({
        gdc: {
            product: product,
            event: { name: name, data: data, contextId: contextId }
        }
    }, '*');
};
var receivers = [];
var config = {
    product: '',
    validReceivedPostEvents: []
};
var receiveListener = function (listener) { return function (event) {
    return (get_1.default(event, 'data.gdc.product') === config.product &&
        // check for valid incoming command
        config.validReceivedPostEvents.includes(get_1.default(event, 'data.gdc.event.name'))
        ? listener(event)
        : false);
}; };
function setConfig(product, validReceivedPostEvents) {
    config = { product: product, validReceivedPostEvents: validReceivedPostEvents };
}
exports.setConfig = setConfig;
function addListener(listener, target) {
    if (target === void 0) { target = window; }
    var receiver = receiveListener(listener);
    receivers.push({ listener: listener, receiver: receiver });
    target.addEventListener('message', receiver, false);
}
exports.addListener = addListener;
function removeListener(listener, target) {
    if (target === void 0) { target = window; }
    var receiverObj = receivers.find(function (r) { return r.listener === listener; });
    if (receiverObj) {
        receivers.splice(receivers.indexOf(receiverObj), 1);
        target.removeEventListener('message', receiverObj.receiver);
    }
}
exports.removeListener = removeListener;
//# sourceMappingURL=post-events.js.map