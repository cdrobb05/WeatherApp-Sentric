"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2020 GoodData Corporation
var lodash_1 = require("lodash");
var typings_1 = require("@gooddata/typings");
exports.EXTERNAL_DATE_FILTER_FORMAT = 'YYYY-MM-DD';
var DATE_FORMAT_REGEX = /^\d{4}-\d{2}-\d{2}$/;
exports.ALL_TIME_GRANULARITY = 'ALL_TIME_GRANULARITY';
function validateDataSet(dataSet) {
    if (!dataSet) {
        return false;
    }
    var _a = getObjectUriIdentifier(dataSet), uri = _a.uri, identifier = _a.identifier;
    return lodash_1.isString(uri) || lodash_1.isString(identifier);
}
function isValidDateFilterFormat(filterItem, shouldValidateDataSet) {
    if (shouldValidateDataSet === void 0) { shouldValidateDataSet = true; }
    if (typings_1.EmbeddedGdc.isAbsoluteDateFilter(filterItem)) {
        var _a = filterItem.absoluteDateFilter, from = _a.from, to = _a.to, dataSet = _a.dataSet;
        var isValidDataSet = shouldValidateDataSet ? validateDataSet(dataSet) : true;
        return isValidDataSet
            && lodash_1.isString(from) && lodash_1.isString(to)
            && DATE_FORMAT_REGEX.test(from) && DATE_FORMAT_REGEX.test(to);
    }
    else {
        var _b = filterItem.relativeDateFilter, from = _b.from, to = _b.to, dataSet = _b.dataSet;
        var isValidDataSet = shouldValidateDataSet ? validateDataSet(dataSet) : true;
        return isValidDataSet && lodash_1.isNumber(from) && lodash_1.isNumber(to);
    }
}
exports.isValidDateFilterFormat = isValidDateFilterFormat;
function isValidAttributeFilterFormat(filterItem) {
    if (!typings_1.EmbeddedGdc.isAttributeFilter(filterItem)) {
        return false;
    }
    if (typings_1.EmbeddedGdc.isPositiveAttributeFilter(filterItem)) {
        var _a = filterItem.positiveAttributeFilter, displayForm = _a.displayForm, attributeElements = _a.in;
        var _b = getObjectUriIdentifier(displayForm), uri = _b.uri, identifier = _b.identifier;
        return (lodash_1.isString(uri) || lodash_1.isString(identifier))
            && Array.isArray(attributeElements) && attributeElements.length !== 0;
    }
    else {
        var _c = filterItem.negativeAttributeFilter, displayForm = _c.displayForm, attributeElements = _c.notIn;
        var _d = getObjectUriIdentifier(displayForm), uri = _d.uri, identifier = _d.identifier;
        // attributeElements could be empty in case of setting All Value
        return (lodash_1.isString(uri) || lodash_1.isString(identifier))
            && Array.isArray(attributeElements);
    }
}
// `dataSet` is required in AD only.
// In AD, we call this function with `shouldValidateDataSet = true`
// In KD, we call this function with `shouldValidateDataSet = false`
function isValidFilterItemFormat(filterItem, shouldValidateDataSet) {
    if (shouldValidateDataSet === void 0) { shouldValidateDataSet = true; }
    if (typings_1.EmbeddedGdc.isDateFilter(filterItem)) {
        return isValidDateFilterFormat(filterItem, shouldValidateDataSet);
    }
    else {
        return isValidAttributeFilterFormat(filterItem);
    }
}
exports.isValidFilterItemFormat = isValidFilterItemFormat;
function isValidRemoveFilterItemFormat(filterItem) {
    if (typings_1.EmbeddedGdc.isRemoveDateFilter(filterItem)) {
        var dataSet = filterItem.dataSet;
        var _a = getObjectUriIdentifier(dataSet), uri = _a.uri, identifier = _a.identifier;
        return lodash_1.isString(uri) || lodash_1.isString(identifier);
    }
    else if (typings_1.EmbeddedGdc.isRemoveAttributeFilter(filterItem)) {
        var displayForm = filterItem.displayForm;
        var _b = getObjectUriIdentifier(displayForm), uri = _b.uri, identifier = _b.identifier;
        return lodash_1.isString(uri) || lodash_1.isString(identifier);
    }
    return false;
}
exports.isValidRemoveFilterItemFormat = isValidRemoveFilterItemFormat;
function isValidRemoveFiltersFormat(filters) {
    return !lodash_1.isEmpty(filters) && filters.every(isValidRemoveFilterItemFormat);
}
exports.isValidRemoveFiltersFormat = isValidRemoveFiltersFormat;
function isValidFiltersFormat(filters, shouldValidateDataSet) {
    if (shouldValidateDataSet === void 0) { shouldValidateDataSet = true; }
    return !lodash_1.isEmpty(filters) && filters.every(function (filter) { return isValidFilterItemFormat(filter, shouldValidateDataSet); });
}
exports.isValidFiltersFormat = isValidFiltersFormat;
function getObjectUriIdentifier(obj) {
    if (!obj) {
        return {};
    }
    return {
        uri: typings_1.EmbeddedGdc.isObjectUriQualifier(obj) ? obj.uri : undefined,
        identifier: typings_1.EmbeddedGdc.isObjIdentifierQualifier(obj) ? obj.identifier : undefined
    };
}
exports.getObjectUriIdentifier = getObjectUriIdentifier;
function transformDateFilterItem(dateFilterItem) {
    if (typings_1.EmbeddedGdc.isAbsoluteDateFilter(dateFilterItem)) {
        var _a = dateFilterItem.absoluteDateFilter, dataSet = _a.dataSet, from = _a.from, to = _a.to;
        var _b = getObjectUriIdentifier(dataSet), datasetUri = _b.uri, datasetIdentifier = _b.identifier;
        return {
            to: to,
            from: from,
            datasetUri: datasetUri,
            datasetIdentifier: datasetIdentifier
        };
    }
    else {
        var _c = dateFilterItem.relativeDateFilter, granularity = _c.granularity, dataSet = _c.dataSet, from = _c.from, to = _c.to;
        var _d = getObjectUriIdentifier(dataSet), datasetUri = _d.uri, datasetIdentifier = _d.identifier;
        return {
            to: to,
            from: from,
            granularity: granularity,
            datasetUri: datasetUri,
            datasetIdentifier: datasetIdentifier
        };
    }
}
function transformAttributeFilterItem(attributeFilterItem) {
    if (typings_1.EmbeddedGdc.isPositiveAttributeFilter(attributeFilterItem)) {
        var _a = attributeFilterItem.positiveAttributeFilter, attributeElements = _a.in, displayForm = _a.displayForm;
        var _b = getObjectUriIdentifier(displayForm), dfUri = _b.uri, dfIdentifier = _b.identifier;
        return {
            negativeSelection: false,
            attributeElements: attributeElements,
            dfIdentifier: dfIdentifier,
            dfUri: dfUri
        };
    }
    else {
        var _c = attributeFilterItem.negativeAttributeFilter, attributeElements = _c.notIn, displayForm = _c.displayForm;
        var _d = getObjectUriIdentifier(displayForm), dfUri = _d.uri, dfIdentifier = _d.identifier;
        return {
            negativeSelection: true,
            attributeElements: attributeElements,
            dfIdentifier: dfIdentifier,
            dfUri: dfUri
        };
    }
}
function transformFilterContext(filters) {
    var defaultFiltersObject = {
        attributeFilters: [],
        dateFilters: []
    };
    if (lodash_1.isEmpty(filters)) {
        return defaultFiltersObject;
    }
    return filters.reduce(function (externalFilters, filterItem) {
        if (typings_1.EmbeddedGdc.isDateFilter(filterItem)) {
            var dateFilter = transformDateFilterItem(filterItem);
            externalFilters.dateFilters.push(dateFilter);
        }
        else {
            var attributeFilter = transformAttributeFilterItem(filterItem);
            externalFilters.attributeFilters.push(attributeFilter);
        }
        return externalFilters;
    }, defaultFiltersObject);
}
exports.transformFilterContext = transformFilterContext;
function isTransformedDateFilterItem(filterItem) {
    var _a = filterItem, from = _a.from, to = _a.to;
    return !lodash_1.isEmpty(filterItem) && from !== undefined && to !== undefined;
}
exports.isTransformedDateFilterItem = isTransformedDateFilterItem;
function isTransformedAttributeFilterItem(filterItem) {
    var attributeElements = filterItem.attributeElements;
    return !lodash_1.isEmpty(filterItem) && attributeElements !== undefined;
}
exports.isTransformedAttributeFilterItem = isTransformedAttributeFilterItem;
function isAllTimeDateFilterItem(filterItem) {
    return (!lodash_1.isEmpty(filterItem) &&
        filterItem.granularity === exports.ALL_TIME_GRANULARITY);
}
exports.isAllTimeDateFilterItem = isAllTimeDateFilterItem;
function isAllValueAttributeFilterItem(filterItem) {
    return (!lodash_1.isEmpty(filterItem) &&
        isTransformedAttributeFilterItem(filterItem) &&
        !filterItem.attributeElements.length);
}
exports.isAllValueAttributeFilterItem = isAllValueAttributeFilterItem;
//# sourceMappingURL=filterUtils.js.map