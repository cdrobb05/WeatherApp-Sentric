"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.mergeItems = mergeItems;
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _stringify = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/json/stringify"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _rxjs = require("rxjs");

var _operators = require("rxjs/operators");

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

function mergeItems(initialData, pagedData) {
  var initialItems = initialData.data.items; // we need to make sure the array contains the right amount of items

  initialItems.length = initialData.data.totalCount;
  var initialOffset = initialData.meta && initialData.meta.offset || 0;
  var _pagedData$data = pagedData.data,
      offset = _pagedData$data.offset,
      limit = _pagedData$data.limit;
  var items = [].concat((0, _toConsumableArray2["default"])(initialItems.slice(0, initialOffset + offset)), (0, _toConsumableArray2["default"])(pagedData.data.items), (0, _toConsumableArray2["default"])(initialItems.slice(initialOffset + offset + limit)));
  return {
    data: _objectSpread({}, initialData.data, {
      items: items
    }),
    meta: initialData.meta
  };
}

var EMPTY_PAGED_DATA = {
  data: {
    items: [],
    offset: 0,
    limit: 0
  }
};
var DEFAULT_OPTIONS = {
  pageSize: 1
};

var executeQuery = function executeQuery(makeRequest) {
  return function (query) {
    var request = _promise["default"].all([makeRequest(query), query]) // add query to response metadata
    .then(function (_ref) {
      var _ref2 = (0, _slicedToArray2["default"])(_ref, 1),
          response = _ref2[0];

      return {
        response: _objectSpread({}, response, {
          meta: _objectSpread({}, response.meta, {
            query: query
          })
        })
      };
    });

    return (0, _rxjs.from)(request);
  };
};

var toPages = function toPages(response, row$, options) {
  var initialOffset = response.meta && response.meta.offset || 0;

  function findPageNum(rowNum, pageSize) {
    return Math.floor(rowNum / pageSize);
  }

  function notYetLoaded(rowNum) {
    return !response.data.items[rowNum];
  }

  return row$.pipe((0, _operators.filter)(notYetLoaded), (0, _operators.map)(function (rowNum) {
    return rowNum - initialOffset;
  }), (0, _operators.filter)(function (rowNum) {
    return rowNum >= 0;
  }), (0, _operators.map)(function (rowNum) {
    return {
      offset: findPageNum(rowNum, options.pageSize) * options.pageSize,
      limit: options.pageSize
    };
  }), (0, _operators.distinct)(function (payload) {
    return (0, _stringify["default"])(payload);
  }));
};

var DataSource = /*#__PURE__*/function () {
  function DataSource(makeInitialRequest, makePagedRequest, options) {
    (0, _classCallCheck2["default"])(this, DataSource);
    this.options = _objectSpread({}, DEFAULT_OPTIONS, {}, options);
    this.createQueryStream = this.createQueryStream.bind(this);
    this.createRowStream = this.createRowStream.bind(this);
    this.getRowAt = this.getRowAt.bind(this);
    this.onChange = this.onChange.bind(this);
    this.getData = this.getData.bind(this);
    this.makeInitialRequest = makeInitialRequest;
    this.makePagedRequest = makePagedRequest;
    this.errorSubscriptions = [];
    this.changeSubscriptions = [];
    this.disposables = [];
    this.state = {
      data: {
        items: []
      }
    };
  }

  (0, _createClass2["default"])(DataSource, [{
    key: "resetChangeSubscriptions",
    value: function resetChangeSubscriptions() {
      this.changeSubscriptions = [];
    }
  }, {
    key: "disposeSubscriptions",
    value: function disposeSubscriptions() {
      this.disposables.forEach(function (subscription) {
        subscription.unsubscribe();
      });
      this.disposables = [];
    }
  }, {
    key: "complete",
    value: function complete() {
      var _this = this;

      setTimeout(function () {
        _this.disposables.forEach(function (subscription) {
          subscription.complete();
        });
      }, 0);
    }
  }, {
    key: "using",
    value: function using(subscription) {
      this.disposables.push(subscription);
    }
  }, {
    key: "createQueryStream",
    value: function createQueryStream(initialQuery) {
      var _this2 = this;

      this.disposeSubscriptions();
      var rowRequest$ = this.createRowStream();
      var initialData$ = executeQuery(this.makeInitialRequest)(initialQuery);
      this.using(initialData$.subscribe(function (data) {
        var normalizedData = mergeItems(data.response, EMPTY_PAGED_DATA);
        _this2.state = normalizedData;

        _this2.emitChange(_objectSpread({}, normalizedData, {
          initialLoad: true
        }));
      }, function (err) {
        _this2.emitError(err);
      }));
      var pagedData$ = initialData$.pipe((0, _operators.mergeMap)(function (wrappedInitialResponse) {
        var initialResponse = wrappedInitialResponse.response;
        var row$ = toPages(initialResponse, rowRequest$, _this2.options).pipe((0, _operators.map)(function (paging) {
          return _objectSpread({}, initialResponse.meta.query, {
            paging: paging
          });
        }), (0, _operators.mergeMap)(executeQuery(_this2.makePagedRequest)), (0, _operators.scan)(function (mergedResponse, wrappedPageResponse) {
          return mergeItems(mergedResponse, wrappedPageResponse.response);
        }, initialResponse));
        return row$;
      }));
      this.using(pagedData$.subscribe(function (data) {
        _this2.state = data;

        _this2.emitChange(data);
      }, function (err) {
        _this2.emitError(err);
      }, function () {
        _this2.emitChange({
          end: true
        });
      }));
    }
  }, {
    key: "createRowStream",
    value: function createRowStream() {
      var stream = new _rxjs.ReplaySubject();
      this.pagedQuerySource = stream.next.bind(stream);
      return stream;
    }
  }, {
    key: "emitChange",
    value: function emitChange(change) {
      var _this3 = this;

      setTimeout(function () {
        _this3.changeSubscriptions.forEach(function (handleChange) {
          return handleChange(change);
        });
      }, 0);
    }
  }, {
    key: "emitError",
    value: function emitError(error) {
      var _this4 = this;

      setTimeout(function () {
        _this4.errorSubscriptions.forEach(function (handleError) {
          return handleError(error);
        });
      }, 0);
    }
  }, {
    key: "getData",
    value: function getData(query) {
      this.createQueryStream(query);
    }
  }, {
    key: "getRowAt",
    value: function getRowAt(rowIndex) {
      var rows = this.state.data.items;

      if (rows[rowIndex]) {
        return rows[rowIndex];
      }

      this.pagedQuerySource(rowIndex);
      return null;
    }
  }, {
    key: "onChange",
    value: function onChange(changeHandler) {
      var _this5 = this;

      var len = this.changeSubscriptions.push(changeHandler);
      return function () {
        _this5.changeSubscriptions.splice(len - 1, 1);
      };
    }
  }, {
    key: "onError",
    value: function onError(errorHandler) {
      var _this6 = this;

      var len = this.errorSubscriptions.push(errorHandler);
      return function () {
        _this6.errorSubscriptions.splice(len - 1, 1);
      };
    }
  }]);
  return DataSource;
}();

exports["default"] = DataSource;