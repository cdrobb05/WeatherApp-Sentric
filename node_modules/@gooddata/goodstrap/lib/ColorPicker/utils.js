"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getHexFromHslColor = getHexFromHslColor;
exports.getRgbFromHslColor = getRgbFromHslColor;
exports.getHslFromRgbColor = getHslFromRgbColor;
exports.getHslFromHexColor = getHslFromHexColor;
exports.getColorStyle = getColorStyle;
exports.isHexColorValid = isHexColorValid;
exports.isHslColorBlackOrWhite = isHslColorBlackOrWhite;
exports.calculateHueChange = calculateHueChange;
exports.SATURATION_ARRAY = void 0;

var _tinycolor = _interopRequireDefault(require("tinycolor2"));

// (C) 2007-2020 GoodData Corporation
var SATURATION_ARRAY = [0.1, 0.3, 0.4, 0.5, 0.65, 0.8, 0.9, 1];
exports.SATURATION_ARRAY = SATURATION_ARRAY;
var HEX_LENGTH_WITH_HASH = 7;
var HEX_LENGTH_WITHOUT_HASH = 6;

function getHexFromHslColor(hsl) {
  var color = (0, _tinycolor["default"])("hsl(".concat(hsl.h, ", ").concat(hsl.s * 100, "%, ").concat(hsl.l * 100, "% )"));
  return color.toHexString();
}

function getRgbFromHslColor(hsl) {
  var color = (0, _tinycolor["default"])("hsl(".concat(hsl.h, ", ").concat(hsl.s * 100, "%, ").concat(hsl.l * 100, "% )"));

  var _color$toRgb = color.toRgb(),
      r = _color$toRgb.r,
      g = _color$toRgb.g,
      b = _color$toRgb.b;

  return {
    r: r,
    g: g,
    b: b
  };
}

function getHslFromRgbColor(rgb) {
  var color = (0, _tinycolor["default"])("rgb ".concat(rgb.r, " ").concat(rgb.g, " ").concat(rgb.b));

  var _color$toHsl = color.toHsl(),
      h = _color$toHsl.h,
      s = _color$toHsl.s,
      l = _color$toHsl.l;

  return {
    h: h,
    s: s,
    l: l
  };
}

function getHslFromHexColor(hex) {
  var color = (0, _tinycolor["default"])(hex);

  var _color$toHsl2 = color.toHsl(),
      h = _color$toHsl2.h,
      s = _color$toHsl2.s,
      l = _color$toHsl2.l;

  return {
    h: h,
    s: s,
    l: l
  };
}

function getHslColorString(hue, saturation, lightness) {
  return "hsl(".concat(hue, ", ").concat(Math.round(saturation * 100), "%, ").concat(Math.round(lightness * 100), "%)");
}

function getColorStyle(hslColor) {
  return {
    backgroundColor: getHslColorString(hslColor.h, hslColor.s, hslColor.l),
    borderColor: hslColor.l > 0.95 ? "#ccc" : null
  };
}

function hasHexStringValidLength(hexColorString) {
  return hexColorString.startsWith("#") && hexColorString.length === HEX_LENGTH_WITH_HASH || hexColorString.length === HEX_LENGTH_WITHOUT_HASH;
}

function isHexColorValid(hexColorString) {
  return hasHexStringValidLength(hexColorString) && (0, _tinycolor["default"])(hexColorString).isValid();
}

function isHslColorBlackOrWhite(hslColor) {
  return hslColor.l === 1 || hslColor.l === 0;
}

function calculateHueChange(e, hue, container) {
  e.preventDefault();
  var containerWidth = container.clientWidth;
  var x = typeof e.pageX === "number" ? e.pageX : e.touches[0].pageX;
  var left = x - (container.getBoundingClientRect().left + window.pageXOffset);
  var h;

  if (left < 0) {
    h = 0;
  } else if (left > containerWidth) {
    h = 359;
  } else {
    var percent = left * 100 / containerWidth;
    h = 360 * percent / 100;
  }

  if (hue !== h) {
    return {
      h: h,
      s: 0.5,
      l: 0.5
    };
  }

  return null;
}