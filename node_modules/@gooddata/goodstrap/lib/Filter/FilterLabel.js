"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.FilterLabel = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactIntl = require("react-intl");

var _intlShape = require("../core/intlShape");

// (C) 2007-2020 GoodData Corporation
var FilterLabel = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2["default"])(FilterLabel, _React$PureComponent);

  function FilterLabel(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, FilterLabel);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(FilterLabel).call(this, props));
    _this.state = {
      hasEllipsis: false
    };
    _this.setLabelRef = _this.setLabelRef.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(FilterLabel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.checkEllipsis();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.checkEllipsis();
    }
  }, {
    key: "setLabelRef",
    value: function setLabelRef(ref) {
      this.labelRef = ref;
    }
  }, {
    key: "getIsDate",
    value: function getIsDate() {
      return this.props.isDate;
    }
  }, {
    key: "isAllSelected",
    value: function isAllSelected() {
      return this.props.isAllSelected;
    }
  }, {
    key: "checkEllipsis",
    value: function checkEllipsis() {
      var _this$labelRef = this.labelRef,
          offsetWidth = _this$labelRef.offsetWidth,
          scrollWidth = _this$labelRef.scrollWidth; // for some reason, IE11 returns offsetWidth = scrollWidth - 1 even when there is no ellipsis

      var hasEllipsis = offsetWidth < scrollWidth - 1;

      if (hasEllipsis !== this.state.hasEllipsis) {
        this.setState({
          hasEllipsis: hasEllipsis
        });
      }
    }
  }, {
    key: "renderSelectionLabel",
    value: function renderSelectionLabel(content) {
      return _react["default"].createElement("span", {
        className: "count s-total-count"
      }, content);
    }
  }, {
    key: "renderSelection",
    value: function renderSelection() {
      if (!this.getIsDate() && !this.props.noData) {
        var _this$props = this.props,
            selectionSize = _this$props.selectionSize,
            intl = _this$props.intl;

        if (this.isAllSelected()) {
          return this.renderSelectionLabel(intl.formatMessage({
            id: "gs.filterLabel.all"
          }));
        }

        if (selectionSize === 0) {
          return this.renderSelectionLabel(intl.formatMessage({
            id: "gs.filterLabel.none"
          }));
        }

        if (this.state.hasEllipsis) {
          if (selectionSize > 0) {
            return this.renderSelectionLabel("(".concat(selectionSize, ")"));
          }
        }
      }

      return false;
    }
  }, {
    key: "renderTitle",
    value: function renderTitle() {
      return [_react["default"].createElement("span", {
        className: "filter-label-title",
        key: "title",
        title: this.props.title
      }, this.props.title), this.isAllSelected() && !this.getIsDate() && !this.props.noData ? _react["default"].createElement("span", {
        key: "title-colon"
      }, ":") : false];
    }
  }, {
    key: "renderSelectedElements",
    value: function renderSelectedElements() {
      if (!this.props.selection || this.isAllSelected()) {
        return false;
      }

      return [_react["default"].createElement("span", {
        key: "selection-colon"
      }, ": "), _react["default"].createElement("span", {
        className: "filter-label-selection",
        key: "selection"
      }, this.props.selection)];
    }
  }, {
    key: "render",
    value: function render() {
      return _react["default"].createElement("div", {
        className: "adi-attribute-filter-label s-attribute-filter-label"
      }, _react["default"].createElement("span", {
        className: "label",
        ref: this.setLabelRef
      }, this.renderTitle(), this.renderSelectedElements()), this.renderSelection());
    }
  }]);
  return FilterLabel;
}(_react["default"].PureComponent);

exports.FilterLabel = FilterLabel;
(0, _defineProperty2["default"])(FilterLabel, "propTypes", {
  intl: _intlShape.intlShape.isRequired,
  isAllSelected: _propTypes["default"].bool,
  isDate: _propTypes["default"].bool,
  selection: _propTypes["default"].string,
  selectionSize: _propTypes["default"].number,
  title: _propTypes["default"].string.isRequired,
  noData: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(FilterLabel, "defaultProps", {
  isAllSelected: false,
  isDate: false,
  selection: "",
  selectionSize: null,
  noData: false
});

var _default = (0, _reactIntl.injectIntl)(FilterLabel);

exports["default"] = _default;