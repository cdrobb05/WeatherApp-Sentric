"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

_Object$defineProperty(exports, "DropdownBody", {
  enumerable: true,
  get: function get() {
    return _DropdownBody["default"];
  }
});

_Object$defineProperty(exports, "DropdownButton", {
  enumerable: true,
  get: function get() {
    return _DropdownButton["default"];
  }
});

exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _reactResponsive = _interopRequireDefault(require("react-responsive"));

var _MediaQueries = require("../core/MediaQueries");

var _DropdownBody = _interopRequireDefault(require("./DropdownBody"));

var _DropdownButton = _interopRequireDefault(require("./DropdownButton"));

var _Overlay = _interopRequireWildcard(require("../core/Overlay"));

var _FullScreenOverlay = _interopRequireDefault(require("../core/FullScreenOverlay"));

// (C) 2007-2020 GoodData Corporation
var SCROLLBAR_SELECTOR = ".fixedDataTableLayout_main .ScrollbarLayout_main";
var MOBILE_DROPDOWN_ALIGN_POINTS = [{
  align: "tl tl"
}];
var DEFAULT_MEDIA_QUERY_VALUES = {
  type: "screen",
  width: window.innerWidth,
  height: window.innerHeight
};
/**
 * Element.matches is only supported via prefix in IE11 and Edge.
 */

function matches(element, selector) {
  var matchesImpl = element.matches || element.msMatchesSelector;
  return matchesImpl.call(element, selector);
}
/**
 * Prevent the overlay from closing when scrolling and finishing
 * with a cursor position outside of the overlay.
 */


function shouldCloseOnClick(e) {
  var activeElement = document.activeElement || e.srcElement;

  if (!activeElement) {
    return false;
  }

  var hasScrolled = matches(activeElement, SCROLLBAR_SELECTOR);
  return !hasScrolled;
}

var Dropdown = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2["default"])(Dropdown, _PureComponent);

  function Dropdown(props) {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, Dropdown);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(Dropdown)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    _this.toggleDropdown = _this.toggleDropdown.bind((0, _assertThisInitialized2["default"])(_this));
    _this.closeDropdown = _this.closeDropdown.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setDropdownOverlayRef = _this.setDropdownOverlayRef.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setDropdownButtonRef = _this.setDropdownButtonRef.bind((0, _assertThisInitialized2["default"])(_this));
    _this.state = {
      isOpen: false,
      dropdownId: (0, _uniqueId["default"])("dropdown-")
    };
    return _this;
  }

  (0, _createClass2["default"])(Dropdown, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (nextProps.disabled) {
        this.closeDropdown();
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.dropdownOverlayRef) {
        setTimeout(this.dropdownOverlayRef.align, 0);
      }
    }
  }, {
    key: "setDropdownOverlayRef",
    value: function setDropdownOverlayRef(ref) {
      this.dropdownOverlayRef = ref;
    }
  }, {
    key: "setDropdownButtonRef",
    value: function setDropdownButtonRef(ref) {
      this.dropdownButtonRef = ref;
    }
  }, {
    key: "setDropdownOpenStateTo",
    value: function setDropdownOpenStateTo(isOpen) {
      var _this2 = this;

      var wasOpen = this.state.isOpen;
      this.setState({
        isOpen: isOpen
      }, function () {
        if (isOpen !== wasOpen) {
          // Prevent triggering dispatch in the middle of dispatch
          // when the dropdown is opened in parent's component
          // lifecycle method. Let React finish processing the
          // first action and trigger second action (which could be
          // bound to this callback) async
          setTimeout(function () {
            _this2.props.onOpenStateChanged(isOpen);
          }, 0);
        }
      });
    }
  }, {
    key: "toggleDropdown",
    value: function toggleDropdown() {
      this.setDropdownOpenStateTo(!this.state.isOpen);
    }
  }, {
    key: "openDropdown",
    value: function openDropdown() {
      this.setDropdownOpenStateTo(true);
    }
  }, {
    key: "closeDropdown",
    value: function closeDropdown() {
      this.setDropdownOpenStateTo(false);
    }
  }, {
    key: "renderOverlay",
    value: function renderOverlay() {
      var _this3 = this;

      if (!this.state.isOpen) {
        return false;
      }

      var MediaQuery = this.props.MediaQuery;
      return _react["default"].createElement(MediaQuery, {
        query: _MediaQueries.IS_MOBILE_DEVICE,
        values: DEFAULT_MEDIA_QUERY_VALUES
      }, function (isMobile) {
        if (isMobile) {
          return _this3.renderMobileOverlay();
        }

        return _this3.renderDesktopOverlay();
      });
    }
  }, {
    key: "renderDesktopOverlay",
    value: function renderDesktopOverlay() {
      var _this$props = this.props,
          Overlay = _this$props.Overlay,
          closeOnParentScroll = _this$props.closeOnParentScroll,
          closeOnMouseDrag = _this$props.closeOnMouseDrag,
          closeOnOutsideClick = _this$props.closeOnOutsideClick,
          overlayPositionType = _this$props.overlayPositionType,
          alignPoints = _this$props.alignPoints,
          enableEventPropagation = _this$props.enableEventPropagation,
          overlayZIndex = _this$props.overlayZIndex;
      return _react["default"].createElement(Overlay, {
        ref: this.setDropdownOverlayRef,
        alignTo: ".".concat(this.state.dropdownId),
        positionType: overlayPositionType,
        alignPoints: alignPoints,
        closeOnOutsideClick: closeOnOutsideClick,
        closeOnMouseDrag: closeOnMouseDrag,
        closeOnParentScroll: closeOnParentScroll,
        shouldCloseOnClick: shouldCloseOnClick,
        ignoreClicksOn: [this.dropdownButtonRef],
        ignoreClicksOnByClass: this.props.ignoreClicksOn,
        onClose: this.closeDropdown // Overlay prevents event propagation by default using defaultProps for these
        ,
        onClick: enableEventPropagation ? _noop["default"] : undefined,
        onMouseOver: enableEventPropagation ? _noop["default"] : undefined,
        onMouseUp: enableEventPropagation ? _noop["default"] : undefined,
        zIndex: overlayZIndex
      }, this.renderDesktopBody());
    }
  }, {
    key: "renderMobileOverlay",
    value: function renderMobileOverlay() {
      var FullScreenOverlay = this.props.FullScreenOverlay;
      return _react["default"].createElement(FullScreenOverlay, {
        alignTo: "body",
        alignPoints: MOBILE_DROPDOWN_ALIGN_POINTS
      }, this.renderMobileBody());
    }
  }, {
    key: "renderMobileBody",
    value: function renderMobileBody() {
      return _react["default"].createElement("div", {
        className: "gd-mobile-dropdown-overlay overlay gd-flex-row-container"
      }, _react["default"].createElement("div", {
        className: "gd-mobile-dropdown-header gd-flex-item"
      }, this.renderButton({
        isMobile: true
      })), _react["default"].createElement("div", {
        className: "gd-mobile-dropdown-content gd-flex-item-stretch gd-flex-row-container"
      }, this.renderBody({
        isMobile: true
      })));
    }
  }, {
    key: "renderDesktopBody",
    value: function renderDesktopBody() {
      return _react["default"].createElement("div", {
        className: "overlay dropdown-body"
      }, this.renderBody({
        isMobile: false
      }));
    }
  }, {
    key: "renderLabel",
    value: function renderLabel() {
      if (!this.props.label) {
        return false;
      }

      return _react["default"].createElement("div", {
        className: "gd-input-label"
      }, this.props.label);
    }
  }, {
    key: "renderButton",
    value: function renderButton(_ref) {
      var _ref$isMobile = _ref.isMobile,
          isMobile = _ref$isMobile === void 0 ? false : _ref$isMobile;

      var button = _react["default"].cloneElement(this.props.button, {
        isOpen: this.state.isOpen,
        disabled: this.props.disabled,
        isMobile: isMobile
      });

      return _react["default"].createElement("div", {
        ref: this.setDropdownButtonRef,
        onClick: !this.props.disabled ? this.toggleDropdown.bind(this) : undefined,
        className: this.state.dropdownId
      }, button);
    }
  }, {
    key: "renderBody",
    value: function renderBody(_ref2) {
      var isMobile = _ref2.isMobile;
      var body = this.props.body;
      var params = typeof body.type === "string" ? {} : {
        closeDropdown: this.closeDropdown,
        isMobile: isMobile
      };
      return _react["default"].cloneElement(body, params);
    }
  }, {
    key: "render",
    value: function render() {
      var classes = (0, _classnames["default"])("gd-dropdown", this.props.className);
      return _react["default"].createElement("div", {
        className: classes
      }, this.renderLabel(), this.renderButton({
        isMobile: false
      }), this.renderOverlay());
    }
  }]);
  return Dropdown;
}(_react.PureComponent);

exports["default"] = Dropdown;
(0, _defineProperty2["default"])(Dropdown, "propTypes", {
  alignPoints: _Overlay["default"].propTypes.alignPoints,
  body: _propTypes["default"].element.isRequired,
  className: _propTypes["default"].string,
  label: _propTypes["default"].string,
  button: _propTypes["default"].element.isRequired,
  closeOnMouseDrag: _propTypes["default"].bool,
  closeOnOutsideClick: _propTypes["default"].bool,
  closeOnParentScroll: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  onOpenStateChanged: _propTypes["default"].func,
  ignoreClicksOn: _propTypes["default"].array,
  enableEventPropagation: _propTypes["default"].bool,
  overlayPositionType: _propTypes["default"].oneOf(["absolute", "fixed", _Overlay.POSITION_SAME_AS_TARGET]),
  overlayZIndex: _propTypes["default"].number,
  // Dropdown components, exposed for testing
  MediaQuery: _propTypes["default"].func,
  Overlay: _propTypes["default"].func,
  FullScreenOverlay: _propTypes["default"].func
});
(0, _defineProperty2["default"])(Dropdown, "defaultProps", {
  onOpenStateChanged: _noop["default"],
  ignoreClicksOn: [],
  enableEventPropagation: false,
  alignPoints: [{
    align: "bl tl"
  }],
  label: null,
  labelPositionTop: false,
  disabled: false,
  className: "",
  closeOnParentScroll: false,
  closeOnMouseDrag: false,
  closeOnOutsideClick: true,
  overlayPositionType: undefined,
  overlayZIndex: null,
  // Dropdown components
  MediaQuery: _reactResponsive["default"],
  Overlay: _Overlay["default"],
  FullScreenOverlay: _FullScreenOverlay["default"]
});