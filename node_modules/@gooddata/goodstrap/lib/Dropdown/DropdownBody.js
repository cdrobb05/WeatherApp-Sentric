"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.DropdownBody = exports.DEFAULT_MOBILE_ITEM_HEIGHT = exports.DEFAULT_ITEM_HEIGHT = exports.MAX_VISIBLE_ITEMS_COUNT = exports.LOADING_HEIGHT = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/objectWithoutProperties"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _get = _interopRequireDefault(require("lodash/get"));

var _result = _interopRequireDefault(require("lodash/result"));

var _defer = _interopRequireDefault(require("lodash/defer"));

var _reactIntl = require("react-intl");

var _NoData = _interopRequireDefault(require("../data/NoData"));

var _FlexDimensions = _interopRequireDefault(require("../core/FlexDimensions"));

var _Input = _interopRequireDefault(require("../Form/Input"));

var _LoadingMask = _interopRequireDefault(require("../core/LoadingMask"));

var _SingleSelectList = _interopRequireDefault(require("../List/SingleSelectList"));

var _Tabs = _interopRequireDefault(require("../core/Tabs"));

var _intlShape = require("../core/intlShape");

// (C) 2007-2021 GoodData Corporation
var LOADING_HEIGHT = 100;
exports.LOADING_HEIGHT = LOADING_HEIGHT;
var MAX_VISIBLE_ITEMS_COUNT = 10;
exports.MAX_VISIBLE_ITEMS_COUNT = MAX_VISIBLE_ITEMS_COUNT;
var DEFAULT_ITEM_HEIGHT = 28;
exports.DEFAULT_ITEM_HEIGHT = DEFAULT_ITEM_HEIGHT;
var DEFAULT_MOBILE_ITEM_HEIGHT = 40;
exports.DEFAULT_MOBILE_ITEM_HEIGHT = DEFAULT_MOBILE_ITEM_HEIGHT;
var HALF_ROW = 0.5;

var DropdownBody = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(DropdownBody, _Component);

  function DropdownBody(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, DropdownBody);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DropdownBody).call(this, props));
    _this.closeOnSelect = _this.closeOnSelect.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setFlexDimensionsRef = _this.setFlexDimensionsRef.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(DropdownBody, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.isUnmounted = true;
    }
  }, {
    key: "getItemsCount",
    value: function getItemsCount() {
      var _this$props = this.props,
          items = _this$props.items,
          dataSource = _this$props.dataSource;

      if (items) {
        return items.length;
      }

      if (dataSource) {
        return dataSource.rowsCount;
      }

      throw new Error("No items or data source provided");
    }
  }, {
    key: "setFlexDimensionsRef",
    value: function setFlexDimensionsRef(ref) {
      this.flexDimensionsRef = ref;
    }
  }, {
    key: "updateListDimensions",
    value: function updateListDimensions() {
      if (this.flexDimensionsRef) {
        this.flexDimensionsRef.updateSize();
      }
    }
  }, {
    key: "closeOnSelect",
    value: function closeOnSelect() {
      var _this2 = this;

      var _this$props2 = this.props,
          closeDropdown = _this$props2.closeDropdown,
          onSelect = _this$props2.onSelect; // Defer closing dropdown. This ensures the event target element (the dropdown list item) is still
      // in the DOM as the event propagates to document, where it may propagate to other
      // overlays. This allows other overlays to correctly determine whether to close or not eg. if the overlay
      // contains this dropdown, it should probably not close, otherwise it probably should

      (0, _defer["default"])(function () {
        if (!_this2.isUnmounted) {
          // This prevents calling setState on unmounted Dropdown component
          closeDropdown();
        }
      });
      onSelect.apply(void 0, arguments);
    }
  }, {
    key: "hasNoData",
    value: function hasNoData() {
      var isLoading = this.props.isLoading;
      return !isLoading && this.getItemsCount() === 0;
    }
  }, {
    key: "renderSearchField",
    value: function renderSearchField() {
      var _this$props3 = this.props,
          isSearchFieldVisible = _this$props3.isSearchFieldVisible,
          isMobile = _this$props3.isMobile,
          searchString = _this$props3.searchString,
          onSearch = _this$props3.onSearch,
          searchPlaceholder = _this$props3.searchPlaceholder,
          searchFieldSize = _this$props3.searchFieldSize,
          searchAutofocus = _this$props3.searchAutofocus;

      if (!isSearchFieldVisible) {
        return false;
      }

      var searchFieldClassNames = (0, _classnames["default"])({
        "gd-dropdown-searchfield": true,
        "gd-flex-item": isMobile
      });
      return _react["default"].createElement(_Input["default"], {
        className: searchFieldClassNames,
        clearOnEsc: true,
        value: searchString,
        onChange: onSearch,
        placeholder: searchPlaceholder,
        isSearch: true,
        isSmall: searchFieldSize === "small",
        autofocus: searchAutofocus
      });
    }
  }, {
    key: "renderTabs",
    value: function renderTabs() {
      var _this$props4 = this.props,
          areTabsVisible = _this$props4.areTabsVisible,
          onTabSelect = _this$props4.onTabSelect,
          tabs = _this$props4.tabs,
          filterConfig = _this$props4.filterConfig;

      if (!areTabsVisible) {
        return false;
      }

      return _react["default"].createElement(_Tabs["default"], {
        tabs: tabs,
        className: "gd-dropdown-tabs",
        selectedTabId: (0, _get["default"])(filterConfig, ["tab", "id"]),
        onTabSelect: onTabSelect
      });
    }
  }, {
    key: "renderFooter",
    value: function renderFooter() {
      var _this$props5 = this.props,
          Footer = _this$props5.Footer,
          closeDropdown = _this$props5.closeDropdown;

      if (Footer && typeof Footer === "function") {
        return Footer(closeDropdown);
      }

      return Footer || false;
    }
  }, {
    key: "renderLoadingMask",
    value: function renderLoadingMask() {
      return _react["default"].createElement(_LoadingMask["default"], {
        style: {
          height: LOADING_HEIGHT
        }
      });
    }
  }, {
    key: "renderList",
    value: function renderList() {
      var _this$props6 = this.props,
          isMobile = _this$props6.isMobile,
          List = _this$props6.List,
          onScrollStart = _this$props6.onScrollStart,
          maxVisibleItemsCount = _this$props6.maxVisibleItemsCount,
          items = _this$props6.items,
          rowItem = _this$props6.rowItem,
          itemHeight = _this$props6.itemHeight,
          mobileItemHeight = _this$props6.mobileItemHeight,
          width = _this$props6.width,
          scrollToSelected = _this$props6.scrollToSelected,
          listProps = (0, _objectWithoutProperties2["default"])(_this$props6, ["isMobile", "List", "onScrollStart", "maxVisibleItemsCount", "items", "rowItem", "itemHeight", "mobileItemHeight", "width", "scrollToSelected"]); // FIXME pick only relevant props for list

      delete listProps.intl;
      delete listProps.className;
      delete listProps.isLoading;
      delete listProps.searchString;
      delete listProps.noData;
      delete listProps.closeDropdown;
      delete listProps.onSelect;
      delete listProps.height;
      var currentItemHeight = isMobile ? Math.max(mobileItemHeight, itemHeight) : itemHeight;
      var itemsCount = this.getItemsCount();
      var calculatedItemsCount = itemsCount > maxVisibleItemsCount ? maxVisibleItemsCount + HALF_ROW : itemsCount;
      var listHeight = (0, _result["default"])(this.props, "height", calculatedItemsCount * currentItemHeight);
      var listClassNames = (0, _classnames["default"])({
        "gd-flex-item-stretch": isMobile
      });
      return _react["default"].createElement(_FlexDimensions["default"], {
        measureHeight: isMobile,
        measureWidth: isMobile || !width,
        className: listClassNames,
        ref: this.setFlexDimensionsRef
      }, _react["default"].createElement(List, (0, _extends2["default"])({
        onScrollStart: onScrollStart,
        onSelect: this.closeOnSelect,
        width: width,
        height: listHeight,
        items: items,
        rowItem: rowItem && _react["default"].cloneElement(rowItem, {
          isMobile: isMobile
        }),
        itemHeight: currentItemHeight,
        compensateBorder: !isMobile,
        scrollToSelected: scrollToSelected
      }, listProps)));
    }
  }, {
    key: "renderNoData",
    value: function renderNoData() {
      var _this$props7 = this.props,
          intl = _this$props7.intl,
          searchString = _this$props7.searchString,
          noData = _this$props7.noData;
      var t = intl.formatMessage;
      var hasNoMatchingData = this.hasNoData() && !!searchString;

      var renderDefaultNoData = function renderDefaultNoData() {
        return _react["default"].createElement(_NoData["default"], {
          hasNoMatchingData: hasNoMatchingData,
          notFoundLabel: t({
            id: "gs.noData.noMatchingData"
          }),
          noDataLabel: t({
            id: "gs.noData.noDataAvailable"
          })
        });
      };

      return _react["default"].cloneElement(noData || renderDefaultNoData(), {
        hasNoMatchingData: hasNoMatchingData
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
          className = _this$props8.className,
          isLoading = _this$props8.isLoading,
          isMobile = _this$props8.isMobile,
          width = _this$props8.width;
      var content = isLoading ? this.renderLoadingMask() : this.renderList();
      var bodyClassNames = (0, _classnames["default"])(className, {
        "gd-flex-item-stretch": isMobile,
        "gd-flex-row-container": isMobile
      });
      return _react["default"].createElement("div", {
        className: bodyClassNames,
        style: {
          width: isMobile ? "auto" : width
        }
      }, this.renderSearchField(), this.renderTabs(), this.hasNoData() ? this.renderNoData() : content, this.renderFooter());
    }
  }]);
  return DropdownBody;
}(_react.Component);

exports.DropdownBody = DropdownBody;
(0, _defineProperty2["default"])(DropdownBody, "propTypes", {
  areTabsVisible: _propTypes["default"].bool,
  className: _propTypes["default"].string,
  closeDropdown: _propTypes["default"].func,
  filterConfig: _propTypes["default"].object,
  Footer: _propTypes["default"].oneOfType([_propTypes["default"].node, _propTypes["default"].func]),
  height: _propTypes["default"].oneOfType([_propTypes["default"].number, _propTypes["default"].func]),
  intl: _intlShape.intlShape.isRequired,
  isLoading: _propTypes["default"].bool,
  isMobile: _propTypes["default"].bool,
  isSearchFieldVisible: _propTypes["default"].bool,
  scrollToSelected: _propTypes["default"].bool,
  itemHeight: _propTypes["default"].number,
  items: _propTypes["default"].array,
  dataSource: _propTypes["default"].object,
  List: _propTypes["default"].func,
  maxVisibleItemsCount: _propTypes["default"].number,
  mobileItemHeight: _propTypes["default"].number,
  noData: _propTypes["default"].node,
  onScrollStart: _propTypes["default"].func,
  onSearch: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  onTabSelect: _propTypes["default"].func,
  rowItem: _propTypes["default"].node,
  searchFieldSize: _propTypes["default"].string,
  searchPlaceholder: _propTypes["default"].string,
  searchString: _propTypes["default"].string,
  searchAutofocus: _propTypes["default"].bool,
  tabs: _propTypes["default"].array,
  width: _propTypes["default"].number
});
(0, _defineProperty2["default"])(DropdownBody, "defaultProps", {
  areTabsVisible: false,
  className: "",
  closeDropdown: function closeDropdown() {},
  filterConfig: {},
  Footer: false,
  height: undefined,
  // https://www.youtube.com/watch?v=otCpCn0l4Wo
  isLoading: false,
  isMobile: false,
  isSearchFieldVisible: false,
  scrollToSelected: false,
  itemHeight: DEFAULT_ITEM_HEIGHT,
  items: null,
  dataSource: null,
  List: _SingleSelectList["default"],
  maxVisibleItemsCount: MAX_VISIBLE_ITEMS_COUNT,
  mobileItemHeight: DEFAULT_MOBILE_ITEM_HEIGHT,
  noData: false,
  onScrollStart: function onScrollStart() {},
  onSearch: function onSearch() {},
  onSelect: function onSelect() {},
  onTabSelect: function onTabSelect() {},
  rowItem: null,
  searchFieldSize: "small",
  searchPlaceholder: "",
  searchString: "",
  searchAutofocus: true,
  tabs: [],
  width: 0
});

var _default = (0, _reactIntl.injectIntl)(DropdownBody);

exports["default"] = _default;