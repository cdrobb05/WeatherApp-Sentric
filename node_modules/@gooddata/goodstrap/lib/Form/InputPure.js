"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactNativeListener = _interopRequireDefault(require("react-native-listener"));

var _bindAll = _interopRequireDefault(require("lodash/bindAll"));

var _noop = _interopRequireDefault(require("lodash/noop"));

var _constants = require("../core/constants");

// (C) 2007-2020 GoodData Corporation
var InputPure = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(InputPure, _Component);

  function InputPure(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, InputPure);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(InputPure).call(this, props));
    (0, _bindAll["default"])((0, _assertThisInitialized2["default"])(_this), ["onClear", "onChange", "onKeyPress"]);
    return _this;
  }

  (0, _createClass2["default"])(InputPure, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      if (this.props.autofocus) {
        // https://github.com/facebook/react/issues/1791
        setTimeout(function () {
          return _this2.inputNodeRef && _this2.inputNodeRef.focus();
        }, 100);
      }
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      this.props.onChange(e.target.value, e);
    }
  }, {
    key: "onKeyPress",
    value: function onKeyPress(e) {
      switch (e.keyCode) {
        case _constants.KEY_CODE_ESCAPE:
          if (this.props.clearOnEsc) {
            this.onClear();
          }

          this.props.onEscKeyPress();
          break;

        case _constants.KEY_CODE_ENTER:
          this.props.onEnterKeyPress();
          break;

        default:
          break;
      }
    }
  }, {
    key: "onClear",
    value: function onClear(e) {
      if (e) {
        e.stopPropagation();
      }

      this.props.onChange("", e);
    }
  }, {
    key: "getLabelClassNames",
    value: function getLabelClassNames(className) {
      return (0, _classnames["default"])({
        "gd-input": true,
        "gd-input-small": this.props.isSmall,
        "gd-input-search": this.props.isSearch,
        "gd-input-with-prefix": !!this.props.prefix,
        "gd-input-with-suffix": !!this.props.suffix,
        "gd-input-with-label": !!this.props.label,
        "gd-input-label-top": this.props.labelPositionTop,
        "has-error": this.props.hasError,
        "has-warning": this.props.hasWarning,
        "is-disabled": this.props.disabled
      }, className);
    }
  }, {
    key: "getInputClassNames",
    value: function getInputClassNames() {
      return (0, _classnames["default"])({
        "gd-input-field": true,
        "gd-input-field-small": this.props.isSmall
      });
    }
  }, {
    key: "renderPrefix",
    value: function renderPrefix(prefix) {
      return prefix ? _react["default"].createElement("span", {
        className: "gd-input-prefix"
      }, prefix) : false;
    }
  }, {
    key: "renderSuffix",
    value: function renderSuffix(suffix) {
      return suffix ? _react["default"].createElement("span", {
        className: "gd-input-suffix"
      }, suffix) : false;
    }
  }, {
    key: "renderLabel",
    value: function renderLabel(label) {
      return label ? _react["default"].createElement("span", {
        className: "gd-input-label"
      }, label) : false;
    }
  }, {
    key: "renderSearch",
    value: function renderSearch(isSearch) {
      return isSearch ? _react["default"].createElement("span", {
        className: "gd-input-icon icon-search"
      }) : false;
    }
  }, {
    key: "renderClearIcon",
    value: function renderClearIcon(clearOnEsc) {
      return clearOnEsc && this.props.value.length > 0 ? // react events use delegation and don't bubble, click on clear needs to be kept local
      // to avoid handling by overlay close handler and others
      _react["default"].createElement(_reactNativeListener["default"], {
        onClick: this.onClear
      }, _react["default"].createElement("span", {
        className: "gd-input-icon-clear icon-clear s-input-clear"
      })) : false;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var _this$props = this.props,
          className = _this$props.className,
          clearOnEsc = _this$props.clearOnEsc,
          disabled = _this$props.disabled,
          isSearch = _this$props.isSearch,
          placeholder = _this$props.placeholder,
          prefix = _this$props.prefix,
          readonly = _this$props.readonly,
          suffix = _this$props.suffix,
          label = _this$props.label,
          maxlength = _this$props.maxlength,
          value = _this$props.value,
          onBlur = _this$props.onBlur,
          onFocus = _this$props.onFocus;
      return _react["default"].createElement("label", {
        className: this.getLabelClassNames(className)
      }, this.renderLabel(label), _react["default"].createElement("div", {
        className: "gd-input-wrapper"
      }, _react["default"].createElement("input", {
        ref: function ref(_ref) {
          _this3.inputNodeRef = _ref;
        },
        className: this.getInputClassNames(),
        disabled: disabled,
        maxLength: maxlength,
        onChange: this.onChange,
        onBlur: onBlur,
        onFocus: onFocus,
        onKeyDown: this.onKeyPress,
        placeholder: placeholder,
        readOnly: readonly,
        value: value
      }), this.renderSearch(isSearch), this.renderClearIcon(clearOnEsc), this.renderPrefix(prefix), this.renderSuffix(suffix)));
    }
  }]);
  return InputPure;
}(_react.Component);

exports["default"] = InputPure;
(0, _defineProperty2["default"])(InputPure, "propTypes", {
  autofocus: _propTypes["default"].bool,
  className: _propTypes["default"].string,
  clearOnEsc: _propTypes["default"].bool,
  disabled: _propTypes["default"].bool,
  hasError: _propTypes["default"].bool,
  hasWarning: _propTypes["default"].bool,
  isSearch: _propTypes["default"].bool,
  isSmall: _propTypes["default"].bool,
  maxlength: _propTypes["default"].number,
  onChange: _propTypes["default"].func,
  onEscKeyPress: _propTypes["default"].func,
  onEnterKeyPress: _propTypes["default"].func,
  onBlur: _propTypes["default"].func,
  onFocus: _propTypes["default"].func,
  placeholder: _propTypes["default"].string,
  prefix: _propTypes["default"].string,
  readonly: _propTypes["default"].bool,
  suffix: _propTypes["default"].string,
  label: _propTypes["default"].string,
  labelPositionTop: _propTypes["default"].bool,
  value: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].number])
});
(0, _defineProperty2["default"])(InputPure, "defaultProps", {
  autofocus: false,
  className: "",
  clearOnEsc: false,
  disabled: false,
  hasError: false,
  hasWarning: false,
  isSearch: false,
  isSmall: false,
  maxlength: 255,
  onChange: _noop["default"],
  onEscKeyPress: _noop["default"],
  onEnterKeyPress: _noop["default"],
  onBlur: _noop["default"],
  onFocus: _noop["default"],
  placeholder: "",
  prefix: "",
  readonly: false,
  suffix: "",
  label: "",
  labelPositionTop: false,
  value: ""
});