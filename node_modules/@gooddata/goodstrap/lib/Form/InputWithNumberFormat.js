"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

var _Object$defineProperties = require("@babel/runtime-corejs2/core-js/object/define-properties");

var _Object$getOwnPropertyDescriptors = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors");

var _Object$getOwnPropertyDescriptor = require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor");

var _Object$getOwnPropertySymbols = require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols");

var _Object$keys = require("@babel/runtime-corejs2/core-js/object/keys");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.DEFAULT_SEPARATORS = exports.MAX_DECIMAL_POINT_NUMBERS = exports.MAX_NUMBER = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/extends"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _parseFloat2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-float"));

var _react = _interopRequireWildcard(require("react"));

var _memoize = _interopRequireDefault(require("lodash/memoize"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _InputPure = _interopRequireDefault(require("./InputPure"));

function ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty2["default"])(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }

// Highest number (BIGINT) according to gooddata documentation help.gooddata.com object-datatypes
var MAX_NUMBER = Math.pow(10, 15); // Max number of digits right to decimal point according to gooddata documentation help.gooddata.com object-datatypes

exports.MAX_NUMBER = MAX_NUMBER;
var MAX_DECIMAL_POINT_NUMBERS = 6;
exports.MAX_DECIMAL_POINT_NUMBERS = MAX_DECIMAL_POINT_NUMBERS;
var DEFAULT_SEPARATORS = {
  thousand: ",",
  decimal: "."
};
exports.DEFAULT_SEPARATORS = DEFAULT_SEPARATORS;
var getDanglingDecimalPointRegExp = (0, _memoize["default"])(function (decimal) {
  return new RegExp("\\".concat(decimal, "$"));
});
var getFormatValidationRegExp = (0, _memoize["default"])(function (_ref) {
  var thousand = _ref.thousand,
      decimal = _ref.decimal;
  return new RegExp("^-?(\\d|\\".concat(thousand, ")*(\\").concat(decimal, "\\d*)?$"));
});

var parseStandardNumberString = function parseStandardNumberString(numberString) {
  var belowDecimal = numberString.split(".")[1];
  var roundedNumberString = belowDecimal && belowDecimal.length >= MAX_DECIMAL_POINT_NUMBERS ? (0, _parseFloat2["default"])(numberString).toFixed(MAX_DECIMAL_POINT_NUMBERS) : numberString;
  var number = (0, _parseFloat2["default"])(roundedNumberString);
  return number === 0 ? 0 : number;
};

var convertFormattedStringToStandard = function convertFormattedStringToStandard(formattedString, _ref2) {
  var thousand = _ref2.thousand,
      decimal = _ref2.decimal;
  var withoutThousandSeparators = formattedString.toString().split(thousand).join("");
  var withoutDanglingDecimalPoint = withoutThousandSeparators.replace(getDanglingDecimalPointRegExp(decimal), "");
  var withStandardDecimalPoint = withoutDanglingDecimalPoint.split(decimal).join(".");
  return withStandardDecimalPoint.length > 0 ? withStandardDecimalPoint : null;
};

var parse = function parse(value, separators) {
  if (value === null || value === "" || value === "-") {
    return null;
  }

  var numberString = convertFormattedStringToStandard(value, separators);

  if (numberString === null) {
    return null;
  }

  return parseStandardNumberString(numberString);
};

var isValid = function isValid(value, separators) {
  return getFormatValidationRegExp(separators).test(value) && Math.abs(parse(value, separators)) <= MAX_NUMBER;
};

var format = function format(value, _ref3) {
  var thousand = _ref3.thousand,
      decimal = _ref3.decimal;

  if (value === null) {
    return "";
  }

  var _value$toString$split = value.toString().split("."),
      _value$toString$split2 = (0, _slicedToArray2["default"])(_value$toString$split, 2),
      aboveDecimal = _value$toString$split2[0],
      belowDecimal = _value$toString$split2[1];

  var aboveDecimalFormatted = aboveDecimal.replace(/(\d)(?=(\d{3})+(?!\d))/g, "$1".concat(thousand));
  return belowDecimal ? "".concat(aboveDecimalFormatted).concat(decimal).concat(belowDecimal) : aboveDecimalFormatted;
};

var InputWithNumberFormat = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(InputWithNumberFormat, _Component);

  function InputWithNumberFormat(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, InputWithNumberFormat);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(InputWithNumberFormat).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onChange", function (value, e) {
      var _this$props = _this.props,
          separators = _this$props.separators,
          onChange = _this$props.onChange;

      if (_this.state.value === value) {
        return;
      }

      if (!isValid(value, separators)) {
        _this.handleCaretShift(e);

        return;
      }

      _this.setState({
        value: value
      });

      onChange(parse(value, separators));
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onFocus", function () {
      _this.setState({
        isFocused: true
      });

      _this.props.onFocus();
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "onBlur", function () {
      var _this$props2 = _this.props,
          separators = _this$props2.separators,
          onBlur = _this$props2.onBlur;
      var value = _this.state.value;

      _this.setState({
        value: format(parse(value, separators), separators),
        isFocused: false
      });

      onBlur();
    });
    _this.state = {
      value: format(props.value, props.separators)
    };
    return _this;
  }

  (0, _createClass2["default"])(InputWithNumberFormat, [{
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(_ref4) {
      var newValue = _ref4.value;
      var _this$props3 = this.props,
          value = _this$props3.value,
          separators = _this$props3.separators;
      var isFocused = this.state.isFocused;

      if (value !== newValue && !isFocused) {
        this.setState({
          value: format(newValue, separators)
        });
      }
    }
  }, {
    key: "handleCaretShift",
    value: function handleCaretShift(e) {
      var _this2 = this;

      var caretPosition = e.target.selectionStart - 1;
      this.setState({}, function () {
        _this2.input.inputNodeRef.setSelectionRange(caretPosition, caretPosition);
      });
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      return _react["default"].createElement(_InputPure["default"], (0, _extends2["default"])({}, this.props, {
        ref: function ref(_ref5) {
          _this3.input = _ref5;
        },
        onFocus: this.onFocus,
        onChange: this.onChange,
        onBlur: this.onBlur,
        value: this.state.value
      }));
    }
  }]);
  return InputWithNumberFormat;
}(_react.Component);

exports["default"] = InputWithNumberFormat;
(0, _defineProperty2["default"])(InputWithNumberFormat, "propTypes", _objectSpread({}, _InputPure["default"].propTypes, {
  separators: _propTypes["default"].shape({
    thousand: _propTypes["default"].string,
    decimal: _propTypes["default"].string
  })
}));
(0, _defineProperty2["default"])(InputWithNumberFormat, "defaultProps", _objectSpread({}, _InputPure["default"].defaultProps, {
  separators: DEFAULT_SEPARATORS
}));