"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.DummyDataSource = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _kefir = require("kefir");

var _streams = require("./streams");

// (C) 2007-2020 GoodData Corporation
var MAX_RESPONSE_TIME = 5000;

var DummyDataSource = /*#__PURE__*/function () {
  function DummyDataSource() {
    var initialRows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
    var moreRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
    var maxResponseTime = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : MAX_RESPONSE_TIME;
    (0, _classCallCheck2["default"])(this, DummyDataSource);
    this.initialRows = initialRows;
    this.moreRows = moreRows;
    this.maxResponseTime = maxResponseTime;
    this.allRows = initialRows.concat(moreRows);
    var searches = (0, _streams.createStream)();
    this.search$ = searches.stream;
    this.emitSearch = searches.emit;
    var rowsUpdates = (0, _streams.createStream)();
    this.data$ = rowsUpdates.stream;
    this.emitRowsUpdate = rowsUpdates.emit;
    this.isLoading$ = (0, _kefir.merge)([(0, _kefir.constant)({
      isLoading: false
    }), this.search$.map(function (searchString) {
      return {
        searchString: searchString,
        isLoading: false
      };
    })]);
    this.firstLoad$ = (0, _kefir.constant)(true);
    this.finishedReload$ = (0, _kefir.constant)(true);
    this.load();
  }

  (0, _createClass2["default"])(DummyDataSource, [{
    key: "load",
    value: function load() {
      this.rows = this.initialRows;
      this.rowsCount = this.rows.length;

      if (typeof this.totalRowsCount === "undefined") {
        this.totalRowsCount = this.allRows;
      }
    }
  }, {
    key: "search",
    value: function search(_ref) {
      var searchString = _ref.searchString;
      this.emitSearch(searchString);
      var lowerSearchString = searchString.toLowerCase();

      if (this.allRows.length) {
        var allResults = this.allRows.filter(function (row) {
          return (row.title || "").toLowerCase().includes(lowerSearchString);
        });
        this.rows = allResults.slice(0, 20);
        this.rowsCount = allResults.length;
        this.emitRowsUpdate();
      }

      return false;
    }
  }, {
    key: "getObjectAt",
    value: function getObjectAt(index) {
      var _this = this;

      if (this.rows[index]) {
        return this.rows[index];
      }

      setTimeout(function () {
        _this.rows[index] = _this.allRows[index];
        _this.rowsCount = _this.allRows.length;

        _this.emitRowsUpdate();
      }, Math.floor(Math.random() * this.maxResponseTime));
      return null;
    }
  }]);
  return DummyDataSource;
}();

exports.DummyDataSource = DummyDataSource;

var _default = function _default() {
  var initialRows = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
  var moreRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  return new DummyDataSource(initialRows, moreRows);
};

exports["default"] = _default;