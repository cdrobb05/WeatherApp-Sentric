"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.mergeItems = mergeItems;
exports.PageTracker = void 0;

var _values = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/values"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _isUndefined = _interopRequireDefault(require("lodash/isUndefined"));

var _range = _interopRequireDefault(require("lodash/range"));

var _head = _interopRequireDefault(require("lodash/head"));

var _last = _interopRequireDefault(require("lodash/last"));

var _get = _interopRequireDefault(require("lodash/get"));

// (C) 2007-2020 GoodData Corporation
var PENDING = "pending";
var LOADED = "loaded";

function mergeItems(items, newItems, start) {
  var itemsCopy = items.slice();

  for (var i = 0; i < newItems.length; i += 1) {
    itemsCopy[start + i] = newItems[i];
  }

  return itemsCopy;
}

var PageTracker = /*#__PURE__*/function () {
  function PageTracker(options) {
    (0, _classCallCheck2["default"])(this, PageTracker);
    this.itemsPerPage = (0, _get["default"])(options, "itemsPerPage", 20);
    this.reset();
  }

  (0, _createClass2["default"])(PageTracker, [{
    key: "reset",
    value: function reset() {
      this.pages = {};
    }
  }, {
    key: "getPagesToLoad",
    value: function getPagesToLoad(start, end) {
      var _this = this;

      var pages = this.getPagesInRange(start, end);
      var pagesToLoad = [];
      (0, _values["default"])(pages).forEach(function (pageNo) {
        if ((0, _isUndefined["default"])(_this.pages[pageNo])) {
          pagesToLoad.push(pageNo);
        }
      });
      this.markPagesAsPending(pagesToLoad);
      return pagesToLoad;
    }
  }, {
    key: "getRangeToLoad",
    value: function getRangeToLoad(start, end) {
      var pages = this.getPagesToLoad(start, end);

      if (!pages.length) {
        return null;
      }

      return {
        offset: (0, _head["default"])(pages) * this.itemsPerPage,
        limit: ((0, _last["default"])(pages) - (0, _head["default"])(pages) + 1) * this.itemsPerPage
      };
    }
  }, {
    key: "getPagesInRange",
    value: function getPagesInRange(start, end) {
      var startPage = Math.floor(start / this.itemsPerPage);
      var endPage = Math.ceil(end / this.itemsPerPage);
      return (0, _range["default"])(startPage, endPage);
    }
  }, {
    key: "markPages",
    value: function markPages(pageNums, status) {
      var _this2 = this;

      (0, _values["default"])(pageNums).forEach(function (pageNo) {
        _this2.pages[pageNo] = status;
      });
    }
  }, {
    key: "markPagesAsPending",
    value: function markPagesAsPending(pageNums) {
      this.markPages(pageNums, PENDING);
    }
  }, {
    key: "markRangeAsPending",
    value: function markRangeAsPending(start, end) {
      var pages = this.getPagesInRange(start, end);
      this.markPagesAsPending(pages);
    }
  }, {
    key: "markPagesAsLoaded",
    value: function markPagesAsLoaded(pageNums) {
      this.markPages(pageNums, LOADED);
    }
  }, {
    key: "markRangeAsLoaded",
    value: function markRangeAsLoaded(start, end) {
      var pages = this.getPagesInRange(start, end);
      this.markPagesAsLoaded(pages);
    }
  }, {
    key: "getPageOffset",
    value: function getPageOffset(pageNo) {
      return this.itemsPerPage * pageNo;
    }
  }]);
  return PageTracker;
}();

exports.PageTracker = PageTracker;