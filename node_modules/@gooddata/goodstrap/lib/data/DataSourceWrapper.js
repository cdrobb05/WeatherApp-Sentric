"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports["default"] = exports.DISPLAY_SEARCH_FIELD_THRESHOLD = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _isEqual2 = _interopRequireDefault(require("lodash/isEqual"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _get = _interopRequireDefault(require("lodash/get"));

var _List = _interopRequireDefault(require("../List/List"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

var DISPLAY_SEARCH_FIELD_THRESHOLD = 5;
exports.DISPLAY_SEARCH_FIELD_THRESHOLD = DISPLAY_SEARCH_FIELD_THRESHOLD;

var DataSourceWrapper = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(DataSourceWrapper, _Component);

  function DataSourceWrapper(props) {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, DataSourceWrapper);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(DataSourceWrapper)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    _this.state = {
      totalRowsCount: 0,
      firstLoad: true,
      filterConfig: _this.props.filterConfig
    };
    return _this;
  }

  (0, _createClass2["default"])(DataSourceWrapper, [{
    key: "componentWillMount",
    value: function componentWillMount() {
      var _this2 = this;

      this.onLoadingChange = function (options) {
        return _this2.setState(options);
      };

      var isLoading$ = this.props.dataSource.isLoading$;
      isLoading$.onValue(this.onLoadingChange);

      this.onRowsUpdated = function () {
        return _this2.forceUpdate();
      };

      var data$ = this.props.dataSource.data$;
      data$.onValue(this.onRowsUpdated); // isLoading is first false, then loading starts and switches to true
      // we want to know that first load has been finished => skipWhile & filter

      this.onFirstLoaded = function () {
        var nextState = _objectSpread({}, _this2.state, {
          totalRowsCount: _this2.props.dataSource.rowsCount,
          firstLoad: false
        });

        var prevFilterConfig = _this2.state.filterConfig;

        var filterConfig = _this2.props.getFilterConfigAfterFirstLoad(nextState);

        _this2.setState(_objectSpread({}, nextState, {
          filterConfig: filterConfig
        }));

        if (!(0, _isEqual2["default"])(prevFilterConfig, filterConfig)) {
          _this2.handleFilterChange(filterConfig);
        }
      };

      this.props.dataSource.firstLoad$.onValue(this.onFirstLoaded);

      this.onReload = function () {
        return _this2.setState({
          totalRowsCount: _this2.props.dataSource.rowsCount,
          firstLoad: false
        });
      };

      this.props.dataSource.finishedReload$.onValue(this.onReload);
      this.onSearch(this.generateInnerFilterConfig(this.state.filterConfig));
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var ds = this.props.dataSource;
      ds.data$.offValue(this.onRowsUpdated);
      ds.isLoading$.offValue(this.onLoadingChange);
      ds.firstLoad$.offValue(this.onFirstLoaded);
      ds.finishedReload$.offValue(this.onReload);
    }
  }, {
    key: "onSearch",
    value: function onSearch(_ref) {
      var searchString = _ref.searchString,
          _ref$showOnlyMy = _ref.showOnlyMy,
          showOnlyMy = _ref$showOnlyMy === void 0 ? false : _ref$showOnlyMy;
      var dataSourceSearchConfig = {
        searchString: searchString,
        requestArguments: {
          // when searching, showOnlyMy is always false (= search in all)
          showOnlyMy: !searchString && showOnlyMy
        }
      };
      this.props.dataSource.search(dataSourceSearchConfig);
    }
  }, {
    key: "generateInnerFilterConfig",
    value: function generateInnerFilterConfig(filterConfig) {
      return {
        searchString: (0, _get["default"])(filterConfig, "searchString", ""),
        showOnlyMy: (0, _get["default"])(filterConfig, ["tab", "isMy"], false)
      };
    }
  }, {
    key: "handleFilterChange",
    value: function handleFilterChange(filterConfig) {
      this.props.onFilterChange(filterConfig);
      this.setState({
        filterConfig: filterConfig
      });
      this.onSearch(this.generateInnerFilterConfig(filterConfig));
    }
  }, {
    key: "isSearchFieldVisible",
    value: function isSearchFieldVisible() {
      var underRowThreshold = this.state.totalRowsCount <= this.props.displaySearchFieldTreshold;
      return !this.state.firstLoad && (!underRowThreshold || !!this.state.filterConfig.searchString || this.state.isLoading);
    }
  }, {
    key: "areTabsVisible",
    value: function areTabsVisible() {
      return !this.state.firstLoad && !this.state.filterConfig.searchString && !!this.props.tabs.length;
    }
  }, {
    key: "render",
    value: function render() {
      var _this3 = this;

      var child = _react["default"].Children.only(this.props.children);

      var currentSearchString = (0, _get["default"])(this.state, ["filterConfig", "searchString"]);
      var currentTab = (0, _get["default"])(this.state, ["filterConfig", "tab"]);
      return _react["default"].cloneElement(child, _objectSpread({}, this.props, {
        dataSource: this.props.dataSource,
        filterConfig: this.state.filterConfig,
        searchString: this.state.filterConfig.searchString,
        isSearchFieldVisible: this.isSearchFieldVisible(),
        areTabsVisible: this.areTabsVisible(),
        onSearch: function onSearch(searchString) {
          return _this3.handleFilterChange({
            tab: currentTab,
            searchString: searchString
          });
        },
        onTabSelect: function onTabSelect(tab) {
          return _this3.handleFilterChange({
            tab: tab,
            searchString: currentSearchString
          });
        },
        isLoading: this.state.isLoading,
        rowsCount: this.props.dataSource.rowsCount
      }));
    }
  }]);
  return DataSourceWrapper;
}(_react.Component);

exports["default"] = DataSourceWrapper;
(0, _defineProperty3["default"])(DataSourceWrapper, "propTypes", {
  children: _propTypes["default"].node.isRequired,
  dataSource: _propTypes["default"].object.isRequired,
  displaySearchFieldTreshold: _propTypes["default"].number,
  filterConfig: _propTypes["default"].object,
  List: _propTypes["default"].func,
  getFilterConfigAfterFirstLoad: _propTypes["default"].func,
  onFilterChange: _propTypes["default"].func,
  searchPlaceholder: _propTypes["default"].string,
  tabs: _propTypes["default"].array
});
(0, _defineProperty3["default"])(DataSourceWrapper, "defaultProps", {
  displaySearchFieldTreshold: DISPLAY_SEARCH_FIELD_THRESHOLD,
  filterConfig: {
    searchString: "",
    tab: null
  },
  List: _List["default"],
  getFilterConfigAfterFirstLoad: function getFilterConfigAfterFirstLoad(state) {
    return state.filterConfig;
  },
  onFilterChange: function onFilterChange() {},
  searchPlaceholder: "",
  tabs: []
});