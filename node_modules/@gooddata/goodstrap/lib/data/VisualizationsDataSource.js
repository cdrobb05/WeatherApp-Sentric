"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = createDataSource;

var _cloneDeep = _interopRequireDefault(require("lodash/cloneDeep"));

var _compact = _interopRequireDefault(require("lodash/compact"));

var _get = _interopRequireDefault(require("lodash/get"));

var _partial = _interopRequireDefault(require("lodash/partial"));

var _set = _interopRequireDefault(require("lodash/set"));

var _DataSource = _interopRequireDefault(require("./DataSource"));

// (C) 2007-2020 GoodData Corporation
function getLimit(requestOptions) {
  var itemsPerPage = requestOptions.itemsPerPage;
  return itemsPerPage !== undefined ? "limit=".concat(itemsPerPage) : "";
}

function getOffset(requestOptions) {
  var page = requestOptions.page,
      itemsPerPage = requestOptions.itemsPerPage;
  var offset = page * itemsPerPage;
  return "offset=".concat(offset);
}

function getOrderBy(requestOptions, orderBy) {
  return "orderBy=".concat(orderBy);
}

function getTitle(requestOptions) {
  var searchString = requestOptions.searchString;
  return searchString ? "title=".concat(encodeURIComponent(searchString)) : "";
}

function getAuthor(requestOptions, author) {
  var showOnlyMy = requestOptions.showOnlyMy;
  return showOnlyMy && author ? "author=".concat(author) : "";
}

function getGetTotal(requestOptions) {
  var initialLoad = requestOptions.initialLoad,
      searchString = requestOptions.searchString;
  var requestTotal = initialLoad || searchString;
  return requestTotal ? "getTotalCount=1" : "";
}

function getVisualizationType(visualizationObject, visualizationClasses) {
  var visualizationClassUri = (0, _get["default"])(visualizationObject, "content.visualizationClass.uri");
  var matchedClass = visualizationClasses.find(function (visualizationClass) {
    return (0, _get["default"])(visualizationClass, "meta.uri") === visualizationClassUri;
  });
  return (0, _get["default"])(matchedClass, "content.url", "").split(":")[1] || "unknown";
}

function addVisualizationClassesToItems(items, visualizationClasses) {
  return items.map(function (visualizationItem) {
    var visualizationObject = visualizationItem.visualizationObject; // for now we support only GD visualizations

    var type = getVisualizationType(visualizationObject, visualizationClasses);
    return (0, _set["default"])((0, _cloneDeep["default"])(visualizationObject), "content.type", type);
  });
}

function getVisualizations(sdk, _ref, requestOptions) {
  var projectId = _ref.projectId,
      orderBy = _ref.orderBy,
      author = _ref.author,
      visualizationClasses = _ref.visualizationClasses;
  var page = requestOptions.page;
  var baseUri = "/gdc/md/".concat(projectId, "/objects/query?category=visualizationObject");
  var uriParts = (0, _compact["default"])([getLimit(requestOptions), getOffset(requestOptions), getOrderBy(requestOptions, orderBy), getAuthor(requestOptions, author), getTitle(requestOptions), getGetTotal(requestOptions)]).join("&");
  var composedUri = "".concat(baseUri, "&").concat(uriParts);
  var $promise = sdk.xhr.get(composedUri);
  return $promise.then(function (response) {
    return response.getData();
  }).then(function (data) {
    var items = data.objects.items;
    var totalCount = data.objects.paging.totalCount;
    var itemsWithVisualizationClasses = addVisualizationClassesToItems(items, visualizationClasses);
    var itemsWithReferencesConverted = itemsWithVisualizationClasses.map(sdk.utils.convertReferencesToUris);
    return {
      totalCount: totalCount,
      page: page,
      items: itemsWithReferencesConverted
    };
  });
}

function createDataSource(sdk, _ref2) {
  var projectId = _ref2.projectId,
      _ref2$orderBy = _ref2.orderBy,
      orderBy = _ref2$orderBy === void 0 ? "id" : _ref2$orderBy,
      author = _ref2.author,
      _ref2$visualizationCl = _ref2.visualizationClasses,
      visualizationClasses = _ref2$visualizationCl === void 0 ? [] : _ref2$visualizationCl;
  return new _DataSource["default"]({
    itemsPerPage: 50,
    requestHandler: (0, _partial["default"])(getVisualizations, sdk, {
      projectId: projectId,
      orderBy: orderBy,
      author: author,
      visualizationClasses: visualizationClasses
    })
  });
}