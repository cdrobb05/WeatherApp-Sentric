"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.getIncludeExcludeTagsPayload = getIncludeExcludeTagsPayload;
exports.createPageLoadStream = createPageLoadStream;
exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _promise = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/promise"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _kefir = require("kefir");

var _get = _interopRequireDefault(require("lodash/get"));

var _min = _interopRequireDefault(require("lodash/min"));

var _max = _interopRequireDefault(require("lodash/max"));

var _flatten = _interopRequireDefault(require("lodash/flatten"));

var _isNumber = _interopRequireDefault(require("lodash/isNumber"));

var _streams = require("./streams");

var _paging = require("./paging");

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

var ITEMS_PER_PAGE = 100;
var SEARCH_DEBOUNCE_TIME = 100;
var SCROLL_DEBOUNCE_TIME = 150;
var INITIAL_RANGE = [0, 99];

function getExtrema(list) {
  return [(0, _min["default"])(list), (0, _max["default"])(list)];
}

function getIncludeExcludeTagsPayload() {
  var tagsConfiguration = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var includeObjectsWithTags = tagsConfiguration.includeObjectsWithTags,
      excludeObjectsWithTags = tagsConfiguration.excludeObjectsWithTags;

  if (includeObjectsWithTags) {
    return {
      includeObjectsWithTags: includeObjectsWithTags
    };
  } else if (excludeObjectsWithTags) {
    return {
      excludeObjectsWithTags: excludeObjectsWithTags
    };
  }

  return {};
}

function createPageLoadStream(rowRequest$, getPagesToLoad, loadPage) {
  var debounceTime = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : SCROLL_DEBOUNCE_TIME;
  return (0, _streams.createBufferedStream)(rowRequest$).debounce(debounceTime).map(getExtrema).map(function (extrema) {
    return getPagesToLoad.apply(void 0, (0, _toConsumableArray2["default"])(extrema));
  }).flatten().flatMap(function (page) {
    return (0, _kefir.fromPromise)(loadPage(page));
  });
}

function createListReloadStream(search$, initialLoad$) {
  var searchDebounce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return (0, _kefir.merge)([(0, _isNumber["default"])(searchDebounce) ? search$.debounce(searchDebounce) : search$, initialLoad$]);
}

var DataSource = /*#__PURE__*/function () {
  function DataSource(options) {
    (0, _classCallCheck2["default"])(this, DataSource);
    this.requestHandler = options.requestHandler;
    this.itemsPerPage = (0, _get["default"])(options, "itemsPerPage", ITEMS_PER_PAGE);
    this.searchDebounceTime = (0, _get["default"])(options, "searchDebounceTime", SEARCH_DEBOUNCE_TIME);
    this.totalCount = 0;
    this.setRows([], 0);
    this.pageTracker = new _paging.PageTracker({
      itemsPerPage: this.itemsPerPage
    });
    this.setupStreams();
  }

  (0, _createClass2["default"])(DataSource, [{
    key: "createStreams",
    value: function createStreams() {
      var initialLoads = (0, _streams.createStream)();
      this.initialLoad$ = initialLoads.stream.map(function () {
        return {
          searchString: ""
        };
      });
      this.load = initialLoads.emit;
      var searches = (0, _streams.createStream)();
      this.search$ = searches.stream;
      this.search = searches.emit;
      this.createRowRequestStream();
    }
  }, {
    key: "setupStreams",
    value: function setupStreams() {
      var _this = this;

      this.createStreams(); // first load or request to search for string

      this.listReload$ = createListReloadStream(this.search$, this.initialLoad$, this.searchDebounceTime); // load first page while showing loading wheel via isLoading$ mechanism

      this.finishedReload$ = this.listReload$ // reset everything for a new round of initial load and scrolling
      .onValue(function () {
        // new stream for view to requests rows with
        _this.createRowRequestStream();

        _this.pageTracker.reset();

        _this.setRows([], 0);
      }) // start loading first couple pages, only care for the latest reload
      .flatMapLatest(function (options) {
        var _this$pageTracker;

        var pages = (_this$pageTracker = _this.pageTracker).getPagesToLoad.apply(_this$pageTracker, INITIAL_RANGE);

        var requestArguments = (0, _get["default"])(options, "requestArguments");

        var loadPage = function loadPage(page, index) {
          return _this.requestHandler(_objectSpread({
            itemsPerPage: _this.itemsPerPage,
            searchString: (0, _get["default"])(options, "searchString", "")
          }, requestArguments, {
            initialLoad: index === 0,
            page: page
          }));
        };

        var pagePromises = pages.map(loadPage);

        var pageData = _promise["default"].all(pagePromises); // TODO: solve Promise.all problem


        return (0, _kefir.fromPromise)(pageData);
      }) // merge partial results into one row chunk
      .map(function (pageData) {
        return {
          // no need to use mergeItems, because initial pages are contiguous
          rows: (0, _flatten["default"])(pageData.map(function (page) {
            return page.items;
          })),
          totalCount: (0, _get["default"])(pageData, "0.totalCount")
        };
      }).onValue(function (initialData) {
        var _this$pageTracker2;

        _this.totalCount = initialData.totalCount !== undefined ? initialData.totalCount : _this.totalCount;

        (_this$pageTracker2 = _this.pageTracker).markRangeAsLoaded.apply(_this$pageTracker2, INITIAL_RANGE);

        _this.setRows(initialData.rows, _this.totalCount);
      });
      this.firstLoad$ = this.finishedReload$.map(function () {
        return true;
      }).take(1); // start listening for row requests while scrolling

      this.data$ = this.listReload$.flatMapLatest(function (params) {
        var searchString = (0, _get["default"])(params, "searchString", "");
        var requestArguments = (0, _get["default"])(params, "requestArguments"); // group lists of requested rows to pages and send out requests to fetch them

        var getPagesToLoad = _this.pageTracker.getPagesToLoad.bind(_this.pageTracker);

        var loadPage = function loadPage(page) {
          return _this.requestHandler(_objectSpread({}, requestArguments, {
            itemsPerPage: _this.itemsPerPage,
            searchString: searchString,
            initialLoad: false,
            page: page
          }));
        };

        return createPageLoadStream(_this.rowRequest$, getPagesToLoad, loadPage);
      }); // update rows with items obtained through paging

      this.data$.onValue(function (pageData) {
        var newRows = (0, _paging.mergeItems)(_this.rows, pageData.items, pageData.page * _this.itemsPerPage);

        _this.setRows(newRows, pageData.totalCount !== undefined ? pageData.totalCount : _this.totalCount);
      }); // initial load or search causes loading wheel to be displayed
      // hide it once initial data have been received

      this.isLoading$ = (0, _kefir.merge)([createListReloadStream(this.search$, this.initialLoad$).map(function (options) {
        return _objectSpread({}, options, {
          isLoading: true
        });
      }), this.finishedReload$.map(function () {
        return {
          isLoading: false
        };
      })]);
    }
  }, {
    key: "createRowRequestStream",
    value: function createRowRequestStream() {
      var rowRequests = (0, _streams.createStream)();
      this.rowRequest$ = rowRequests.stream;
      this.requestRow = rowRequests.emit;
    }
  }, {
    key: "setRows",
    value: function setRows(rows, totalCount) {
      this.rows = rows;
      this.rowsCount = totalCount;
    }
  }, {
    key: "getObjectAt",
    value: function getObjectAt(rowIndex) {
      var row = (0, _get["default"])(this.rows, rowIndex, null);

      if (!row) {
        this.requestRow(rowIndex);
      }

      return row;
    }
  }]);
  return DataSource;
}();

exports["default"] = DataSource;