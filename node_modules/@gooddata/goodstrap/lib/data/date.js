"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getDateTimeConfig = getDateTimeConfig;

var _momentTimezone = _interopRequireDefault(require("moment-timezone"));

// (C) 2007-2020 GoodData Corporation
var META_TIMEZONE = "Europe/Prague";
var FORMAT_DATE = "YYYY-MM-DD";
var FORMAT_YEAR = "YYYY";

var sameFormatted = function sameFormatted(firstDate, secondDate, format) {
  return firstDate.format(format) === secondDate.format(format);
};

function getDateTimeConfig(date) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var _options$dateTimezone = options.dateTimezone,
      dateTimezone = _options$dateTimezone === void 0 ? META_TIMEZONE : _options$dateTimezone,
      _options$now = options.now,
      now = _options$now === void 0 ? new Date() : _options$now;

  var dateWithTimezone = _momentTimezone["default"].tz(date, dateTimezone);

  var dateWithTimezoneInLocal = dateWithTimezone.clone().local();
  var NOW = (0, _momentTimezone["default"])(now);
  var TODAY = (0, _momentTimezone["default"])(now);
  var YESTERDAY = (0, _momentTimezone["default"])(now).subtract(1, "days");
  var isToday = sameFormatted(dateWithTimezoneInLocal, TODAY, FORMAT_DATE);
  var isYesterday = sameFormatted(dateWithTimezoneInLocal, YESTERDAY, FORMAT_DATE);
  var isCurrentYear = sameFormatted(dateWithTimezoneInLocal, NOW, FORMAT_YEAR);
  return {
    date: dateWithTimezone.toDate(),
    isToday: isToday,
    isYesterday: isYesterday,
    isCurrentYear: isCurrentYear
  };
}