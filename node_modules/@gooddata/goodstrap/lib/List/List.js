"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bindAll = _interopRequireDefault(require("lodash/bindAll"));

var _fixedDataTable = require("fixed-data-table-2");

var _classnames = _interopRequireDefault(require("classnames"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

var BORDER_HEIGHT = 1;

function preventScroll(event) {
  event.preventDefault();
}

function isTouchDevice() {
  return "ontouchstart" in document.documentElement;
}

var List = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(List, _Component);

  function List() {
    var _this;

    (0, _classCallCheck2["default"])(this, List);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(List).call(this));
    _this.state = {
      selected: null
    };
    (0, _bindAll["default"])((0, _assertThisInitialized2["default"])(_this), ["onSelect", "onScrollStart", "onScrollEnd", "renderCell"]);
    return _this;
  }

  (0, _createClass2["default"])(List, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var _this$props = this.props,
          scrollToSelected = _this$props.scrollToSelected,
          dataSource = _this$props.dataSource;

      if (scrollToSelected) {
        (0, _toConsumableArray2["default"])(Array(dataSource.rowsCount).keys()).forEach(function (row) {
          var item = _this2.props.dataSource.getObjectAt(row);

          if (item && item.selected) {
            // Because list items start from 0 we need to add the +1 here
            _this2.setState({
              selected: row + 1
            });
          }
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.enablePageScrolling();
    }
  }, {
    key: "onSelect",
    value: function onSelect(event, rowIndex) {
      var _this$props2 = this.props,
          dataSource = _this$props2.dataSource,
          onSelect = _this$props2.onSelect;
      var item = dataSource.getObjectAt(rowIndex);

      if (item) {
        onSelect(item);
      }
    }
  }, {
    key: "onScroll",
    value: function onScroll(method, scrollY) {
      if (method) {
        var _this$props3 = this.props,
            height = _this$props3.height,
            itemHeight = _this$props3.itemHeight; // vertical scroll position returned by fixed-data-table is converted to index of first visible item

        var rowIndex = Math.floor(scrollY / itemHeight);
        var visibleRange = Math.ceil(height / itemHeight);
        method(rowIndex, rowIndex + visibleRange);
      }
    }
  }, {
    key: "onScrollStart",
    value: function onScrollStart(scrollX, scrollY) {
      this.onScroll(this.props.onScrollStart, scrollY);
    }
  }, {
    key: "onScrollEnd",
    value: function onScrollEnd(scrollX, scrollY) {
      this.onScroll(this.props.onScroll, scrollY);
    }
  }, {
    key: "getClassNames",
    value: function getClassNames() {
      return (0, _classnames["default"])("gd-infinite-list", this.props.className);
    }
  }, {
    key: "disablePageScrolling",
    value: function disablePageScrolling() {
      document.body.addEventListener("wheel", preventScroll, {
        passive: false
      });
    }
  }, {
    key: "enablePageScrolling",
    value: function enablePageScrolling() {
      document.body.removeEventListener("wheel", preventScroll);
    }
  }, {
    key: "renderCell",
    value: function renderCell(props) {
      var _this$props4 = this.props,
          dataSource = _this$props4.dataSource,
          rowItem = _this$props4.rowItem;
      var item = dataSource.getObjectAt(props.rowIndex);

      var itemElement = _react["default"].cloneElement(rowItem, _objectSpread({}, item ? {
        item: item
      } : {}, {
        width: this.props.width,
        isFirst: props.rowIndex === 0,
        isLast: props.rowIndex === dataSource.rowsCount - 1
      }));

      return _react["default"].createElement(_fixedDataTable.Cell, props, itemElement);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props5 = this.props,
          width = _this$props5.width,
          height = _this$props5.height,
          itemHeight = _this$props5.itemHeight,
          dataSource = _this$props5.dataSource,
          itemHeightGetter = _this$props5.itemHeightGetter;
      var selected = this.state.selected; // compensates for https://github.com/facebook/fixed-data-table/blob/5373535d98b08b270edd84d7ce12833a4478c6b6/src/FixedDataTableNew.react.js#L872

      var compensatedHeight = this.props.compensateBorder ? height + BORDER_HEIGHT * 2 : height;
      return _react["default"].createElement("div", {
        className: this.getClassNames(),
        onMouseOver: this.disablePageScrolling,
        onMouseOut: this.enablePageScrolling
      }, _react["default"].createElement(_fixedDataTable.Table, {
        width: width,
        height: compensatedHeight,
        rowHeight: itemHeight,
        rowHeightGetter: itemHeightGetter,
        headerHeight: 0,
        rowsCount: dataSource.rowsCount,
        onRowClick: this.onSelect,
        onScrollStart: this.onScrollStart,
        onScrollEnd: this.onScrollEnd,
        touchScrollEnabled: isTouchDevice(),
        scrollToRow: selected
      }, _react["default"].createElement(_fixedDataTable.Column, {
        flexGrow: 1,
        width: 1,
        cell: this.renderCell
      })));
    }
  }]);
  return List;
}(_react.Component);

exports["default"] = List;
(0, _defineProperty3["default"])(List, "propTypes", {
  className: _propTypes["default"].string,
  compensateBorder: _propTypes["default"].bool,
  dataSource: _propTypes["default"].object.isRequired,
  height: _propTypes["default"].number,
  itemHeight: function itemHeight(props, propName) {
    if (props[propName] <= 0) {
      throw Error("".concat(propName, " should be greater than 0"));
    }
  },
  itemHeightGetter: _propTypes["default"].func,
  onScroll: _propTypes["default"].func,
  onScrollStart: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  scrollToSelected: _propTypes["default"].bool,
  rowItem: _propTypes["default"].element.isRequired,
  width: _propTypes["default"].number
});
(0, _defineProperty3["default"])(List, "defaultProps", {
  className: "",
  onScroll: function onScroll() {},
  onScrollStart: function onScrollStart() {},
  onSelect: function onSelect() {},
  width: 200,
  height: 300,
  itemHeight: 28,
  itemHeightGetter: null,
  compensateBorder: true,
  scrollToSelected: false
});