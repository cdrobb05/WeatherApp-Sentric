"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.MultiSelectList = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactIntl = require("react-intl");

var _classnames = _interopRequireDefault(require("classnames"));

var _immutable = require("immutable");

var _Button = _interopRequireDefault(require("../Button/Button"));

var _Guid = require("../core/Guid");

var _FlexDimensions = _interopRequireDefault(require("../core/FlexDimensions"));

var _List = _interopRequireDefault(require("./List"));

var _ListItem = _interopRequireDefault(require("./ListItem"));

var _MultiSelectListItem = _interopRequireDefault(require("./MultiSelectListItem"));

var _intlShape = require("../core/intlShape");

// (C) 2007-2020 GoodData Corporation
// eslint-disable-next-line import/no-unresolved, import/extensions
var MultiSelectList = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(MultiSelectList, _Component);

  function MultiSelectList(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, MultiSelectList);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(MultiSelectList).call(this, props));
    _this.onActionCheckboxChange = _this.onActionCheckboxChange.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(MultiSelectList, [{
    key: "onActionCheckboxChange",
    value: function onActionCheckboxChange() {
      var _this$props = this.props,
          onSelectAll = _this$props.onSelectAll,
          onSelectNone = _this$props.onSelectNone,
          isInverted = _this$props.isInverted,
          isSearching = _this$props.isSearching;

      if (this.isAllSelected() || !isInverted && isSearching && this.isIndefiniteSelection && !this.isEmpty()) {
        return onSelectNone();
      }

      return onSelectAll();
    }
  }, {
    key: "getSelectableItems",
    value: function getSelectableItems() {
      var props = this.props;
      return props.items.map(function (source) {
        return {
          source: source,
          onSelect: props.onSelect,
          onMouseOver: props.onItemMouseOver,
          onMouseOut: props.onItemMouseOut,
          onOnly: props.onSelectOnly,
          selected: props.isSelected(source),
          id: props.getItemKey(source)
        };
      });
    }
  }, {
    key: "getRowItem",
    value: function getRowItem() {
      var _this$props2 = this.props,
          rowItem = _this$props2.rowItem,
          listItemClass = _this$props2.listItemClass;
      return rowItem || _react["default"].createElement(_ListItem["default"], {
        listItemClass: listItemClass
      });
    }
  }, {
    key: "getSelectionString",
    value: function getSelectionString(selection) {
      var intl = this.props.intl;

      if (!selection.length) {
        return "";
      }

      return selection.map(function (selectionItem) {
        // replace by isImmutable for version >= 4
        var item = _immutable.Iterable.isIterable(selectionItem) ? selectionItem : (0, _immutable.fromJS)(selectionItem);

        if (item.has("available") && !item.get("available")) {
          return intl.formatMessage({
            id: "gs.list.notAvailableAbbreviation"
          });
        }

        return item.get("title") || "(".concat(intl.formatMessage({
          id: "empty_value"
        }), ")");
      }).join(", ");
    }
  }, {
    key: "getDataSource",
    value: function getDataSource() {
      var selectableItems = this.getSelectableItems();
      return {
        rowsCount: this.props.itemsCount || selectableItems.length,
        getObjectAt: function getObjectAt(rowIndex) {
          return selectableItems[rowIndex];
        }
      };
    }
  }, {
    key: "isEmpty",
    value: function isEmpty() {
      var _this$props3 = this.props,
          selection = _this$props3.selection,
          itemsCount = _this$props3.itemsCount,
          isInverted = _this$props3.isInverted,
          isSearching = _this$props3.isSearching,
          items = _this$props3.items,
          isSelected = _this$props3.isSelected;

      if (selection.length === 0) {
        return !isInverted;
      }

      if (isSearching) {
        return items.every(function (item) {
          return !isSelected(item);
        });
      }

      return selection.length === 0 && !isInverted || selection.length === itemsCount && isInverted;
    }
  }, {
    key: "isPositiveSelection",
    value: function isPositiveSelection() {
      var _this$props4 = this.props,
          isInverted = _this$props4.isInverted,
          selection = _this$props4.selection;
      return selection.length > 0 && !isInverted;
    }
  }, {
    key: "isIndefiniteSelection",
    value: function isIndefiniteSelection() {
      var _this$props5 = this.props,
          selection = _this$props5.selection,
          isSearching = _this$props5.isSearching,
          items = _this$props5.items,
          isSelected = _this$props5.isSelected,
          filteredItemsCount = _this$props5.filteredItemsCount;

      if (selection.length === 0) {
        return false;
      }

      if (isSearching) {
        var selectedItems = items.filter(function (item) {
          return isSelected(item);
        });
        var selectedItemsCount = selectedItems.length;
        return selectedItemsCount !== 0 && selectedItemsCount !== filteredItemsCount;
      }

      return true;
    }
  }, {
    key: "isAllSelected",
    value: function isAllSelected() {
      var _this$props6 = this.props,
          itemsCount = _this$props6.itemsCount,
          isInverted = _this$props6.isInverted,
          isSearching = _this$props6.isSearching,
          items = _this$props6.items,
          isSelected = _this$props6.isSelected,
          selection = _this$props6.selection;

      if (isSearching) {
        var selectedItemsCount = items.filter(function (item) {
          return isSelected(item);
        }).length;
        var totalItemsCount = items.filter(function (item) {
          return item !== null;
        }).length;
        return selectedItemsCount === totalItemsCount;
      }

      return isInverted ? selection.length === 0 : selection.length === itemsCount;
    }
  }, {
    key: "renderSearchResultsLength",
    value: function renderSearchResultsLength() {
      var _this$props7 = this.props,
          itemsCount = _this$props7.itemsCount,
          isSearching = _this$props7.isSearching,
          intl = _this$props7.intl;

      if (isSearching && itemsCount > 0) {
        return _react["default"].createElement("span", {
          className: "gd-list-actions-selection-size s-list-search-selection-size"
        }, intl.formatMessage({
          id: "gs.list.searchResults"
        }), " (", itemsCount, ")");
      }

      return null;
    }
  }, {
    key: "renderActions",
    value: function renderActions() {
      var _this$props8 = this.props,
          selectAllCheckbox = _this$props8.selectAllCheckbox,
          intl = _this$props8.intl;

      if (selectAllCheckbox) {
        var checkboxClasses = (0, _classnames["default"])("input-checkbox", "gd-checkbox-selection", {
          "checkbox-indefinite": this.isIndefiniteSelection()
        });
        var labelClasses = (0, _classnames["default"])("input-checkbox-label", "s-select-all-checkbox");

        var checkbox = _react["default"].createElement("label", {
          className: labelClasses
        }, _react["default"].createElement("input", {
          readOnly: true,
          type: "checkbox",
          className: checkboxClasses,
          checked: !this.isEmpty(),
          onChange: this.onActionCheckboxChange
        }), _react["default"].createElement("span", {
          className: "input-label-text"
        }, intl.formatMessage({
          id: "gs.list.all"
        })));

        return _react["default"].createElement("div", {
          className: "gd-list-actions gd-list-actions-invertable"
        }, checkbox, this.renderSearchResultsLength());
      }

      return _react["default"].createElement("div", {
        className: "gd-list-actions"
      }, _react["default"].createElement(_Button["default"], {
        className: "gd-button-link",
        tagName: "a",
        onClick: this.props.onSelectAll,
        value: intl.formatMessage({
          id: "gs.list.selectAll"
        })
      }), _react["default"].createElement(_Button["default"], {
        className: "gd-button-link",
        tagName: "a",
        onClick: this.props.onSelectNone,
        value: intl.formatMessage({
          id: "gs.list.clear"
        })
      }));
    }
  }, {
    key: "renderStatusBar",
    value: function renderStatusBar() {
      var _this$props9 = this.props,
          selectAllCheckbox = _this$props9.selectAllCheckbox,
          selection = _this$props9.selection,
          isInverted = _this$props9.isInverted,
          tagName = _this$props9.tagName,
          intl = _this$props9.intl;

      if (!selectAllCheckbox) {
        return null;
      }

      var attributeName = _react["default"].createElement("span", {
        className: "gd-shortened-text gd-attribute-name s-dropdown-attribute-filter-name",
        title: tagName
      }, tagName);

      var selectionItemsStr = this.getSelectionString(selection);
      var isSelectionEmpty = selection.length === 0;
      var invertedInfo = !isSelectionEmpty && isInverted ? _react["default"].createElement("span", null, _react["default"].createElement("b", null, intl.formatMessage({
        id: "gs.list.all"
      })), "\xA0", intl.formatMessage({
        id: "gs.list.except"
      }), "\xA0") : null;
      var selectionList = !isSelectionEmpty ? _react["default"].createElement("span", {
        className: "gd-shortened-text gd-selection-list s-dropdown-attribute-selection-list",
        title: selectionItemsStr
      }, "".concat(selectionItemsStr)) : null;
      var selectionLengthInfo = selection.length > 1 ? "\xA0(".concat(selection.length, ")") : null;

      var is = _react["default"].createElement("span", null, "\xA0", intl.formatMessage({
        id: "gs.list.is"
      }), "\xA0");

      var allOrNone = isSelectionEmpty && (!isInverted ? "(".concat(intl.formatMessage({
        id: "gs.filterLabel.none"
      }), ")") : _react["default"].createElement("b", null, intl.formatMessage({
        id: "gs.list.all"
      })));
      return _react["default"].createElement("div", {
        className: "gd-list-status-bar s-list-status-bar"
      }, attributeName, is, allOrNone, invertedInfo, selectionList, selectionLengthInfo);
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props10 = this.props,
          isMobile = _this$props10.isMobile,
          width = _this$props10.width,
          height = _this$props10.height,
          itemHeight = _this$props10.itemHeight;
      var rowItem = this.getRowItem();
      var dataSource = this.getDataSource();
      return _react["default"].createElement("div", {
        className: "gd-flex-item-stretch-mobile gd-flex-row-container-mobile"
      }, this.renderActions(), _react["default"].createElement(_FlexDimensions["default"], {
        measureHeight: isMobile,
        measureWidth: isMobile || !width,
        className: "gd-flex-item-stretch-mobile"
      }, _react["default"].createElement(_List["default"], {
        className: "is-multiselect",
        width: width,
        height: height,
        itemHeight: itemHeight,
        dataSource: dataSource,
        rowItem: rowItem,
        onScroll: this.props.onRangeChange,
        compensateBorder: !isMobile
      })), this.renderStatusBar());
    }
  }]);
  return MultiSelectList;
}(_react.Component);

exports.MultiSelectList = MultiSelectList;
(0, _defineProperty2["default"])(MultiSelectList, "propTypes", {
  filtered: _propTypes["default"].bool,
  getItemKey: _propTypes["default"].func,
  height: _propTypes["default"].number.isRequired,
  intl: _intlShape.intlShape.isRequired,
  isMobile: _propTypes["default"].bool,
  isSelected: _propTypes["default"].func,
  isFiltered: _propTypes["default"].bool,
  itemHeight: _propTypes["default"].number.isRequired,
  items: _propTypes["default"].array.isRequired,
  itemsCount: _propTypes["default"].number.isRequired,
  filteredItemsCount: _propTypes["default"].number,
  listItemClass: _propTypes["default"].oneOfType([_propTypes["default"].func, _propTypes["default"].instanceOf(_react.Component)]),
  maxSelectionSize: _propTypes["default"].number,
  onItemMouseOut: _propTypes["default"].func,
  onItemMouseOver: _propTypes["default"].func,
  onRangeChange: _propTypes["default"].func,
  onSelect: _propTypes["default"].func,
  onSelectAll: _propTypes["default"].func,
  onSelectNone: _propTypes["default"].func,
  onSelectOnly: _propTypes["default"].func,
  rowItem: _propTypes["default"].element,
  width: _propTypes["default"].number,
  selectAllCheckbox: _propTypes["default"].bool,
  selection: _propTypes["default"].array,
  isInverted: _propTypes["default"].bool,
  isSearching: _propTypes["default"].bool,
  tagName: _propTypes["default"].string
});
(0, _defineProperty2["default"])(MultiSelectList, "defaultProps", {
  isInverted: false,
  isSearching: false,
  selection: [],
  filtered: false,
  getItemKey: _Guid.guidFor,
  isFiltered: false,
  isMobile: false,
  isSelected: function isSelected() {},
  listItemClass: _MultiSelectListItem["default"],
  // TODO add tests
  maxSelectionSize: 500,
  // based on filters in gdc-client
  filteredItemsCount: 0,
  onItemMouseOut: function onItemMouseOut() {},
  onItemMouseOver: function onItemMouseOver() {},
  onRangeChange: function onRangeChange() {},
  onSelect: function onSelect() {},
  onSelectAll: function onSelectAll() {},
  onSelectNone: function onSelectNone() {},
  onSelectOnly: function onSelectOnly() {},
  rowItem: null,
  selectAllCheckbox: false,
  tagName: ""
});

var _default = (0, _reactIntl.injectIntl)(MultiSelectList);

exports["default"] = _default;