"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var React = _interopRequireWildcard(require("react"));

var PropTypes = _interopRequireWildcard(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _jsUtils = require("@gooddata/js-utils");

var _noop = _interopRequireDefault(require("lodash/noop"));

// (C) 2007-2020 GoodData Corporation
var Button = /*#__PURE__*/function (_React$Component) {
  (0, _inherits2["default"])(Button, _React$Component);

  function Button() {
    var _this;

    (0, _classCallCheck2["default"])(this, Button);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Button).apply(this, arguments));

    _this._onClick = function (e) {
      if (!_this.props.disabled) {
        _this.props.onClick(e);
      }
    };

    return _this;
  }

  (0, _createClass2["default"])(Button, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          tagName = _this$props.tagName,
          title = _this$props.title,
          value = _this$props.value,
          tabIndex = _this$props.tabIndex,
          type = _this$props.type,
          iconLeft = _this$props.iconLeft,
          iconRight = _this$props.iconRight;
      var TagName = tagName;
      return React.createElement(TagName, {
        ref: function ref(_ref) {
          _this2.buttonNode = _ref;
        },
        title: title,
        className: this.getClassnames(),
        type: type,
        onClick: this._onClick,
        tabIndex: tabIndex
      }, this.renderIcon(iconLeft), value && React.createElement("span", {
        className: "gd-button-text"
      }, value), this.renderIcon(iconRight));
    }
  }, {
    key: "getClassnames",
    value: function getClassnames() {
      var _cx;

      var value = this.props.value;
      var generatedSeleniumClass = value ? "s-".concat(_jsUtils.string.simplifyText(value)) : "";
      return (0, _classnames["default"])((_cx = {}, (0, _defineProperty2["default"])(_cx, this.props.className, !!this.props.className), (0, _defineProperty2["default"])(_cx, generatedSeleniumClass, true), (0, _defineProperty2["default"])(_cx, "gd-button", true), (0, _defineProperty2["default"])(_cx, "disabled", this.props.disabled), _cx));
    }
  }, {
    key: "renderIcon",
    value: function renderIcon(icon) {
      if (!icon) {
        return null;
      }

      return React.createElement("span", {
        className: (0, _classnames["default"])("gd-button-icon", icon)
      });
    }
  }]);
  return Button;
}(React.Component);

exports["default"] = Button;
Button.propTypes = {
  className: PropTypes.string,
  disabled: PropTypes.bool,
  onClick: PropTypes.func,
  tabIndex: PropTypes.number,
  tagName: PropTypes.string,
  title: PropTypes.string,
  type: PropTypes.string,
  value: PropTypes.string,
  iconLeft: PropTypes.string,
  iconRight: PropTypes.string
};
Button.defaultProps = {
  className: "",
  disabled: false,
  onClick: _noop["default"],
  tabIndex: -1,
  tagName: "button",
  title: "",
  type: "button",
  value: "",
  iconLeft: null,
  iconRight: null
};