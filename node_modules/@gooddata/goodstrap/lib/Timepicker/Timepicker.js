"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.Timepicker = exports.normalizeTime = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _propTypes = _interopRequireDefault(require("prop-types"));

var _moment = _interopRequireDefault(require("moment"));

var _timeUtilities = require("./timeUtilities");

var _localeUtilities = require("../core/localeUtilities");

var _Overlay = require("../core/Overlay");

var _Dropdown = _interopRequireWildcard(require("../Dropdown/Dropdown"));

var _DropdownBody = require("../Dropdown/DropdownBody");

var _intlShape = require("../core/intlShape");

// (C) 2019-2020 GoodData Corporation
var DEFAULT_WIDTH = 199;
var MINUTES_IN_HOUR = 60; // export normalizeTime function for use outside this component

var normalizeTime = _timeUtilities.normalizeTime;
exports.normalizeTime = normalizeTime;

var Timepicker = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Timepicker, _Component);

  function Timepicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Timepicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Timepicker).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "getTimeItems", function (selectedTime) {
      var currentItem;
      var items = [];
      var hours = selectedTime.h,
          minutes = selectedTime.m;

      for (var h = 0; h < _timeUtilities.HOURS_IN_DAY; h += 1) {
        for (var m = 0; m < MINUTES_IN_HOUR; m += _timeUtilities.TIME_ANCHOR) {
          var item = {
            h: h,
            m: m,
            title: (0, _timeUtilities.formatTime)(h, m)
          };
          items.push(item);

          if (h === hours && m === minutes) {
            currentItem = item;
          }
        }
      }

      return {
        items: items,
        currentItem: currentItem
      };
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "updateDropdownWidth", function () {
      var _this$dropdownRef$cur = _this.dropdownRef.current.getBoundingClientRect(),
          width = _this$dropdownRef$cur.width;

      _this.setState({
        dropdownWidth: width
      });
    });
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "handleTimeChanged", function (newlySelectedTime) {
      if (!newlySelectedTime) {
        return;
      }

      var h = newlySelectedTime.h,
          m = newlySelectedTime.m;
      var selectedTime = (0, _timeUtilities.updateTime)(h, m);

      _this.setState({
        selectedTime: selectedTime
      }, function () {
        return _this.props.onChange(selectedTime);
      });
    });
    _this.dropdownRef = _react["default"].createRef();

    _this.updateLocaleForMoment();

    _this.state = {
      dropdownWidth: DEFAULT_WIDTH,
      selectedTime: (0, _timeUtilities.normalizeTime)(props.time || new Date())
    };
    return _this;
  }

  (0, _createClass2["default"])(Timepicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.updateDropdownWidth();
    }
  }, {
    key: "getComponentClasses",
    value: function getComponentClasses() {
      return "gd-datepicker ".concat(this.props.className, " gd-datepicker-input gd-timepicker");
    }
  }, {
    key: "updateLocaleForMoment",
    value: function updateLocaleForMoment() {
      _moment["default"].locale((0, _localeUtilities.mapChineseLocaleForMoment)(this.props.intl.locale));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          overlayPositionType = _this$props.overlayPositionType,
          maxVisibleItemsCount = _this$props.maxVisibleItemsCount,
          overlayZIndex = _this$props.overlayZIndex;
      var _this$state = this.state,
          dropdownWidth = _this$state.dropdownWidth,
          selectedTime = _this$state.selectedTime;
      var time = {
        h: selectedTime.getHours(),
        m: selectedTime.getMinutes()
      };

      var _this$getTimeItems = this.getTimeItems(time),
          items = _this$getTimeItems.items,
          currentItem = _this$getTimeItems.currentItem;

      return _react["default"].createElement("div", {
        className: this.getComponentClasses(),
        ref: this.dropdownRef
      }, _react["default"].createElement(_Dropdown["default"], {
        overlayPositionType: overlayPositionType,
        alignPoints: [{
          align: "bl tl"
        }, {
          align: "tl bl"
        }],
        button: _react["default"].createElement(_Dropdown.DropdownButton, {
          value: (0, _timeUtilities.formatTime)(time.h, time.m),
          iconLeft: "icon-timer"
        }),
        body: _react["default"].createElement(_Dropdown.DropdownBody, {
          width: dropdownWidth,
          items: items,
          maxVisibleItemsCount: maxVisibleItemsCount,
          selection: currentItem,
          onSelect: this.handleTimeChanged
        }),
        overlayZIndex: overlayZIndex
      }));
    }
  }]);
  return Timepicker;
}(_react.Component);

exports.Timepicker = Timepicker;
(0, _defineProperty2["default"])(Timepicker, "propTypes", {
  className: _propTypes["default"].string,
  // optional css class applied to outer div
  intl: _intlShape.intlShape.isRequired,
  maxVisibleItemsCount: _propTypes["default"].number,
  time: _propTypes["default"].instanceOf(Date),
  // time value used to initialize time picker
  onChange: _propTypes["default"].func,
  // called when selected time changes
  overlayPositionType: _propTypes["default"].oneOf(["absolute", "fixed", _Overlay.POSITION_SAME_AS_TARGET]),
  overlayZIndex: _propTypes["default"].number
});
(0, _defineProperty2["default"])(Timepicker, "defaultProps", {
  className: "",
  maxVisibleItemsCount: _DropdownBody.MAX_VISIBLE_ITEMS_COUNT,
  time: null,
  onChange: function onChange() {},
  overlayPositionType: undefined,
  overlayZIndex: null
});

var _default = (0, _reactIntl.injectIntl)(Timepicker);

exports["default"] = _default;