// (C) 2007-2020 GoodData Corporation

/* eslint-disable */

/**
 * Copyright 2015, Yahoo Inc.
 * Copyrights licensed under the MIT License. See the accompanying LICENSE file for terms.
 */
"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports["default"] = createTouchBackend;
exports.TouchBackend = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _invariant = _interopRequireDefault(require("invariant"));

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

function getEventClientTouchOffset(e) {
  if (e.targetTouches.length === 1) {
    return getEventClientOffset(e.targetTouches[0]);
  }
}

function getEventClientOffset(e) {
  if (e.targetTouches) {
    return getEventClientTouchOffset(e);
  } else {
    return {
      x: e.clientX,
      y: e.clientY
    };
  }
}

var ELEMENT_NODE = 1;

function getNodeClientOffset(node) {
  var el = node.nodeType === ELEMENT_NODE ? node : node.parentElement;

  if (!el) {
    return null;
  }

  var _el$getBoundingClient = el.getBoundingClientRect(),
      top = _el$getBoundingClient.top,
      left = _el$getBoundingClient.left;

  return {
    x: left,
    y: top
  };
}

var eventNames = {
  mouse: {
    start: "mousedown",
    move: "mousemove",
    end: "mouseup",
    click: "click"
  },
  touch: {
    start: "touchstart",
    move: "touchmove",
    end: "touchend"
  }
};

function getNodesAtOffset(nodes, clientOffset) {
  return (0, _keys["default"])(nodes).filter(function (nodeId) {
    var boundingRect = nodes[nodeId].getBoundingClientRect();
    return clientOffset.x >= boundingRect.left && clientOffset.x <= boundingRect.right && clientOffset.y >= boundingRect.top && clientOffset.y <= boundingRect.bottom;
  });
}

function getDistance(p1, p2) {
  var a = p1.x - p2.x;
  var b = p1.y - p2.y;
  return Math.sqrt(a * a + b * b);
}

var TouchBackend = /*#__PURE__*/function () {
  function TouchBackend(manager) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
    (0, _classCallCheck2["default"])(this, TouchBackend);
    options = _objectSpread({
      enableTouchEvents: true,
      enableMouseEvents: false,
      delay: 0
    }, options);
    this.actions = manager.getActions();
    this.monitor = manager.getMonitor();
    this.registry = manager.getRegistry();
    this.delay = options.delay;
    this.sourceNodes = {};
    this.sourceNodeOptions = {};
    this.sourcePreviewNodes = {};
    this.sourcePreviewNodeOptions = {};
    this.moveStartSourceIds = {};
    this.targetNodes = {};
    this.targetNodeOptions = {};
    this.listenerTypes = [];
    this._mouseClientOffset = null;

    if (options.enableMouseEvents) {
      this.listenerTypes.push("mouse");
    }

    if (options.enableTouchEvents) {
      this.listenerTypes.push("touch");
    }

    this.getSourceClientOffset = this.getSourceClientOffset.bind(this);
    this.handleTopMoveStart = this.handleTopMoveStart.bind(this);
    this.handleTopMoveStartDelay = this.handleTopMoveStartDelay.bind(this);
    this.handleTopMoveStartCapture = this.handleTopMoveStartCapture.bind(this);
    this.handleTopMoveCapture = this.handleTopMoveCapture.bind(this);
    this.handleTopMoveEndCapture = this.handleTopMoveEndCapture.bind(this);
  }

  (0, _createClass2["default"])(TouchBackend, [{
    key: "startHandler",
    value: function startHandler() {
      return this.delay ? this.handleTopMoveStartDelay : this.handleTopMoveStart;
    }
  }, {
    key: "setup",
    value: function setup() {
      if (typeof window === "undefined") {
        return;
      }

      (0, _invariant["default"])(!this.constructor.isSetUp, "Cannot have two Touch backends at the same time.");
      this.constructor.isSetUp = true;
      this.addEventListener(window, "start", this.startHandler());
      this.addEventListener(window, "start", this.handleTopMoveStartCapture, true);
      this.addEventListener(window, "move", this.handleTopMoveCapture, true);
      this.addEventListener(window, "end", this.handleTopMoveEndCapture, true);
    }
  }, {
    key: "teardown",
    value: function teardown() {
      if (typeof window === "undefined") {
        return;
      }

      this.constructor.isSetUp = false;
      this._mouseClientOffset = null;
      this.removeEventListener(window, "start", this.startHandler());
      this.removeEventListener(window, "start", this.handleTopMoveStartCapture, true);
      this.removeEventListener(window, "move", this.handleTopMoveCapture, true);
      this.removeEventListener(window, "end", this.handleTopMoveEndCapture, true);
    }
  }, {
    key: "addEventListener",
    value: function addEventListener(subject, event, handler, capture) {
      this.listenerTypes.forEach(function (listenerType) {
        var eventName = eventNames[listenerType][event];

        if (eventName) {
          subject.addEventListener(eventName, handler, capture);
        }
      });
    }
  }, {
    key: "removeEventListener",
    value: function removeEventListener(subject, event, handler, capture) {
      this.listenerTypes.forEach(function (listenerType) {
        var eventName = eventNames[listenerType][event];

        if (eventName) {
          subject.removeEventListener(eventName, handler, capture);
        }
      });
    }
  }, {
    key: "connectDragSource",
    value: function connectDragSource(sourceId, node, options) {
      var _this = this;

      var handleMoveStart = this.handleMoveStart.bind(this, sourceId);
      var handleCancelClick = this.handleCancelClick.bind(this, sourceId);
      this.sourceNodes[sourceId] = node;
      this.addEventListener(node, "start", handleMoveStart);
      this.addEventListener(node, "click", handleCancelClick, true);
      return function () {
        delete _this.sourceNodes[sourceId];

        _this.removeEventListener(node, "start", handleMoveStart);

        _this.removeEventListener(node, "click", handleCancelClick, true);
      };
    }
  }, {
    key: "connectDragPreview",
    value: function connectDragPreview(sourceId, node, options) {
      var _this2 = this;

      this.sourcePreviewNodeOptions[sourceId] = options;
      this.sourcePreviewNodes[sourceId] = node;
      return function () {
        delete _this2.sourcePreviewNodes[sourceId];
        delete _this2.sourcePreviewNodeOptions[sourceId];
      };
    }
  }, {
    key: "connectDropTarget",
    value: function connectDropTarget(targetId, node) {
      var _this3 = this;

      this.targetNodes[targetId] = node;
      return function () {
        delete _this3.targetNodes[targetId];
      };
    }
  }, {
    key: "getSourceClientOffset",
    value: function getSourceClientOffset(sourceId) {
      return getNodeClientOffset(this.sourceNodes[sourceId]);
    }
  }, {
    key: "handleTopMoveStartCapture",
    value: function handleTopMoveStartCapture(e) {
      this.moveStartSourceIds = {};
    }
  }, {
    key: "handleMoveStart",
    value: function handleMoveStart(sourceId) {
      this.moveStartSourceIds[sourceId] = true;
    }
  }, {
    key: "handleCancelClick",
    value: function handleCancelClick(sourceId, e) {
      if (this.moveStartSourceIds[sourceId]) {
        e.stopPropagation();
      }
    }
  }, {
    key: "handleTopMoveStart",
    value: function handleTopMoveStart(e) {
      var clientOffset = getEventClientOffset(e);

      if (clientOffset && getNodesAtOffset(this.sourceNodes, clientOffset).length > 0) {
        this._mouseClientOffset = clientOffset; // note: calling preventDefault here, seems to be the only way to defeat text selection in Safari
        // to handle other browsers, we could just call window.getSelection().removeAllRanges();

        if (e.target.tagName !== "SELECT" && e.target.tagName !== "INPUT") {
          e.preventDefault(); // when clicking on draggable (DragSource decorated) component, document.activeElement doesn't change
          // the following resets document.activeElement to document.body

          var activeElement = document.activeElement;

          if (activeElement && typeof activeElement.blur === "function") {
            activeElement.blur();
          }
        }
      }
    }
  }, {
    key: "handleTopMoveStartDelay",
    value: function handleTopMoveStartDelay(e) {
      this.timeout = setTimeout(this.handleTopMoveStart.bind(this, e), this.delay);
    }
  }, {
    key: "handleTopMoveCapture",
    value: function handleTopMoveCapture(e) {
      clearTimeout(this.timeout);
      var clientOffset = getEventClientOffset(e);

      if (!clientOffset) {
        return;
      } // If we're not dragging and we've moved a little, that counts as a drag start


      if (!this.monitor.isDragging()) {
        if (this._mouseClientOffset && getDistance(this._mouseClientOffset, clientOffset) > 2) {
          var sourceIdsArray = (0, _keys["default"])(this.moveStartSourceIds);

          if (sourceIdsArray.length > 0) {
            e.preventDefault();
            this.actions.beginDrag(sourceIdsArray, {
              clientOffset: this._mouseClientOffset,
              getSourceClientOffset: this.getSourceClientOffset,
              publishSource: false
            });
            this._mouseClientOffset = null;
          }
        }

        return;
      }

      this.actions.publishDragSource();
      e.preventDefault();
      var matchingTargetIds = getNodesAtOffset(this.targetNodes, clientOffset);
      this.actions.hover(matchingTargetIds, {
        clientOffset: clientOffset
      });
    }
  }, {
    key: "handleTopMoveEndCapture",
    value: function handleTopMoveEndCapture(e) {
      if (!this.monitor.isDragging() || this.monitor.didDrop()) {
        this.moveStartSourceIds = {};
        return;
      }

      e.preventDefault();
      this._mouseClientOffset = null;
      this.actions.drop();
      this.actions.endDrag();
    }
  }]);
  return TouchBackend;
}();

exports.TouchBackend = TouchBackend;

function createTouchBackend() {
  var optionsOrManager = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
    enableMouseEvents: true,
    enableTouchEvents: false
  };

  var touchBackendFactory = function touchBackendFactory(manager) {
    return new TouchBackend(manager, optionsOrManager);
  };

  if (optionsOrManager.getMonitor) {
    return touchBackendFactory(optionsOrManager);
  } else {
    return touchBackendFactory;
  }
}