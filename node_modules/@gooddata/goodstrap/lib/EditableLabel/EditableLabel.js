"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bindAll = _interopRequireDefault(require("lodash/bindAll"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _reactTextareaAutosize = _interopRequireDefault(require("react-textarea-autosize/dist/react-textarea-autosize"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Overlay = _interopRequireDefault(require("../core/Overlay"));

var _constants = require("../core/constants");

// (C) 2007-2020 GoodData Corporation
var EditableLabel = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(EditableLabel, _Component);

  function EditableLabel(props) {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, EditableLabel);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(EditableLabel)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    (0, _bindAll["default"])((0, _assertThisInitialized2["default"])(_this), ["edit", "selectAndFocus", "onKeyDown", "onSubmit", "onChange", "onDocumentClick"]);
    _this.state = {
      value: props.value,
      isEditing: false,
      textareaWidth: 100
    };
    _this.root = _react["default"].createRef();
    _this.textarea = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(EditableLabel, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var rootNode = this.root.current;
      rootNode.addEventListener("dragstart", this.onSelectStart);
      rootNode.addEventListener("selectstart", this.onSelectStart);

      if (this.props.autofocus) {
        this.edit();
      }
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(newProps) {
      if (this.props.value !== newProps.value) {
        this.setState({
          value: newProps.value
        });
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var rootNode = this.root.current;
      rootNode.removeEventListener("dragstart", this.onSelectStart);
      rootNode.removeEventListener("selectstart", this.onSelectStart);
      this.removeListeners();
    }
  }, {
    key: "onDocumentClick",
    value: function onDocumentClick(e) {
      if (this.isClickOutsideTextarea(e.target)) {
        var textAreaNode = this.textarea;
        textAreaNode.blur();
      }
    }
  }, {
    key: "onSelectStart",
    value: function onSelectStart(e) {
      e.stopPropagation();
    }
  }, {
    key: "onKeyDown",
    value: function onKeyDown(e) {
      var isSubmit = e.keyCode === _constants.KEY_CODE_ENTER;
      var isCancel = e.keyCode === _constants.KEY_CODE_ESCAPE;

      if (isSubmit || isCancel) {
        e.preventDefault();
        e.stopPropagation();
      }

      if (isSubmit) {
        this.onSubmit();
      }

      if (isCancel) {
        this.onCancel();
      }
    }
  }, {
    key: "onSubmit",
    value: function onSubmit() {
      var oldValue = this.props.value;
      var newTrimmedValue = this.state.value.trim();

      if (newTrimmedValue === "") {
        this.setState({
          value: ""
        });
      }

      if (oldValue !== newTrimmedValue) {
        this.props.onSubmit(newTrimmedValue);
      } else {
        this.props.onCancel(oldValue);
      }

      this.setState({
        value: newTrimmedValue,
        isEditing: false
      });
      this.removeListeners();
    }
  }, {
    key: "onCancel",
    value: function onCancel() {
      var value = this.props.value;
      this.props.onCancel(value);
      this.setState({
        value: value,
        isEditing: false
      });
      this.removeListeners();
    }
  }, {
    key: "onChange",
    value: function onChange(e) {
      var _this2 = this;

      var value = e.target.value;
      this.setState({
        value: value
      }, function () {
        _this2.props.onChange(value);
      });
    }
  }, {
    key: "edit",
    value: function edit(e) {
      var _this3 = this;

      if (!this.state.isEditing) {
        if (e) {
          e.stopPropagation();
        }

        this.setState({
          isEditing: true
        }, function () {
          _this3.selectAndFocus();

          document.addEventListener("mousedown", _this3.onDocumentClick);
        });
        this.props.onEditingStart();
      }
    }
  }, {
    key: "isClickOutsideTextarea",
    value: function isClickOutsideTextarea(clickedTarget) {
      return this.textarea && !this.textarea.contains(clickedTarget);
    }
  }, {
    key: "isMultiLine",
    value: function isMultiLine() {
      return this.props.maxRows > 1;
    }
  }, {
    key: "removeListeners",
    value: function removeListeners() {
      document.removeEventListener("mousedown", this.onDocumentClick);
    }
  }, {
    key: "measureRootDimensions",
    value: function measureRootDimensions() {
      var rootElement = this.root.current;
      var rootElementFontSize = getComputedStyle(rootElement).fontSize;
      this.setState({
        textareaWidth: rootElement.offsetWidth,
        textareaFontSize: Math.floor((0, _parseInt2["default"])(rootElementFontSize, 10))
      });
    }
  }, {
    key: "selectAndFocus",
    value: function selectAndFocus() {
      var componentElement = this.textarea;
      var _this$props = this.props,
          scollToEndOnEditingStart = _this$props.scollToEndOnEditingStart,
          textareaInOverlay = _this$props.textareaInOverlay;

      if (componentElement) {
        componentElement.focus();

        if (scollToEndOnEditingStart && this.isMultiLine()) {
          componentElement.scrollTop = componentElement.scrollHeight;
        }

        componentElement.select();

        if (textareaInOverlay) {
          this.measureRootDimensions();
        }
      }
    }
  }, {
    key: "renderTextAreaInOverlay",
    value: function renderTextAreaInOverlay() {
      var alignId = (0, _uniqueId["default"])("gd-editable-label-");
      var style = {
        width: this.state.textareaWidth,
        fontSize: "".concat(this.state.textareaFontSize, "px"),
        // http://stackoverflow.com/a/6295222
        lineHeight: "".concat(this.state.textareaFontSize * 1.25, "px")
      };
      return _react["default"].createElement("div", {
        className: "".concat(alignId, " gd-editable-label-textarea-wrapper")
      }, _react["default"].createElement(_Overlay["default"], {
        alignTo: ".".concat(alignId),
        alignPoints: [{
          align: "cr cr"
        }]
      }, _react["default"].createElement("div", {
        className: "gd-editable-label-overlay"
      }, this.renderTextarea(style))));
    }
  }, {
    key: "renderTextarea",
    value: function renderTextarea() {
      var _this4 = this;

      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      return _react["default"].createElement(_reactTextareaAutosize["default"], {
        style: style,
        rows: 1,
        maxRows: this.props.maxRows,
        maxLength: this.props.maxLength,
        onKeyDown: this.onKeyDown,
        onBlur: this.onSubmit,
        onChange: this.onChange,
        defaultValue: this.props.value,
        placeholder: this.props.placeholder,
        inputRef: function inputRef(tag) {
          _this4.textarea = tag;
        }
      });
    }
  }, {
    key: "renderEditableLabelEdit",
    value: function renderEditableLabelEdit() {
      return this.props.textareaInOverlay ? this.renderTextAreaInOverlay() : this.renderTextarea();
    }
  }, {
    key: "render",
    value: function render() {
      var editableLabelClasses = (0, _classnames["default"])({
        "gd-editable-label": true,
        "s-editable-label": true,
        "is-editing": this.state.isEditing,
        placeholder: this.state.value === ""
      }, this.props.className);
      var displayValue = this.props.children || this.state.value || this.props.placeholder;
      return _react["default"].createElement("div", {
        ref: this.root,
        className: editableLabelClasses,
        onClick: this.edit
      }, this.state.isEditing ? this.renderEditableLabelEdit() : displayValue);
    }
  }]);
  return EditableLabel;
}(_react.Component);

exports["default"] = EditableLabel;
(0, _defineProperty2["default"])(EditableLabel, "propTypes", {
  children: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  className: _propTypes["default"].string,
  maxLength: _propTypes["default"].number,
  maxRows: _propTypes["default"].number,
  onCancel: _propTypes["default"].func,
  onEditingStart: _propTypes["default"].func,
  onChange: _propTypes["default"].func,
  onSubmit: _propTypes["default"].func.isRequired,
  placeholder: _propTypes["default"].string,
  scollToEndOnEditingStart: _propTypes["default"].bool,
  textareaInOverlay: _propTypes["default"].bool,
  value: _propTypes["default"].string.isRequired,
  autofocus: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(EditableLabel, "defaultProps", {
  children: false,
  className: "",
  maxLength: 100000,
  maxRows: 1,
  onCancel: function onCancel() {},
  onEditingStart: function onEditingStart() {},
  onChange: function onChange() {},
  placeholder: "",
  scollToEndOnEditingStart: true,
  textareaInOverlay: false,
  autofocus: false
});