"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _parseFloat2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-float"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _isNumber = _interopRequireDefault(require("lodash/isNumber"));

// (C) 2007-2020 GoodData Corporation
var ResponsiveText = /*#__PURE__*/function (_React$PureComponent) {
  (0, _inherits2["default"])(ResponsiveText, _React$PureComponent);

  function ResponsiveText(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, ResponsiveText);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(ResponsiveText).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "containerRef", (0, _react.createRef)());
    _this.state = {
      fontSize: null
    };
    _this.resetFontSize = _this.resetFontSize.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleWindowResize = (0, _debounce["default"])(_this.resetFontSize, _this.props.windowResizeRefreshDelay);
    return _this;
  }

  (0, _createClass2["default"])(ResponsiveText, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var window = this.props.window;
      this.windowResizeListener = window.addEventListener("resize", this.handleWindowResize);
      this.adjustTextSize();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps() {
      this.resetFontSize();
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      this.adjustTextSize();
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var window = this.props.window;

      if (this.windowResizeListener) {
        this.windowResizeListener.cancel();
      }

      window.removeEventListener("resize", this.handleWindowResize);
    }
  }, {
    key: "resetFontSize",
    value: function resetFontSize() {
      this.setState({
        fontSize: null
      });
    }
  }, {
    key: "adjustTextSize",
    value: function adjustTextSize() {
      var currentStyle = this.props.window.getComputedStyle(this.containerRef.current, null);
      var currentFontSize = (0, _parseFloat2["default"])(currentStyle.fontSize);

      if (!this.state.fontSize && (0, _isNumber["default"])(currentFontSize)) {
        var scrollWidth = this.containerRef.current.scrollWidth;

        var _ref = this.containerRef.current ? this.containerRef.current.getBoundingClientRect() : 0,
            width = _ref.width;

        var ratio = width / scrollWidth;
        var size = Math.floor(currentFontSize * ratio);
        this.setState({
          fontSize: "".concat(size, "px")
        });
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          tagClassName = _this$props.tagClassName,
          title = _this$props.title,
          children = _this$props.children;
      var fontSize = this.state.fontSize;
      return _react["default"].createElement(this.props.tagName, {
        className: tagClassName,
        ref: this.containerRef,
        style: {
          fontSize: fontSize
        },
        title: title
      }, children);
    }
  }]);
  return ResponsiveText;
}(_react["default"].PureComponent);

exports["default"] = ResponsiveText;
(0, _defineProperty2["default"])(ResponsiveText, "propTypes", {
  tagName: _propTypes["default"].string,
  tagClassName: _propTypes["default"].string,
  windowResizeRefreshDelay: _propTypes["default"].number,
  title: _propTypes["default"].string,
  window: _propTypes["default"].object,
  children: _propTypes["default"].node
});
(0, _defineProperty2["default"])(ResponsiveText, "defaultProps", {
  tagName: "div",
  tagClassName: null,
  windowResizeRefreshDelay: 50,
  title: null,
  children: null,
  window: window
});