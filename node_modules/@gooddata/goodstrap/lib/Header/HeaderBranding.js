"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.toColor = toColor;
exports.luminanceOf = luminanceOf;
exports.chooseColor = chooseColor;
exports.getActiveItemColor = getActiveItemColor;
exports.getHeaderTextColor = getHeaderTextColor;
exports.getPickerHoverColor = getPickerHoverColor;
exports.getMenuItemHoverColor = getMenuItemHoverColor;
exports.getSeparatorBorderColor = getSeparatorBorderColor;

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

// (C) 2007-2021 GoodData Corporation
var HEX3_REGEX = /^#([\da-fA-F])([\da-fA-F])([\da-fA-F])/;
var HEX6_REGEX = /^#([\da-fA-F]{2})([\da-fA-F]{2})([\da-fA-F]{2})/;
/**
 * Helper function that transforms any string representation of a color
 * into dojo.Color object.
 *
 * @param String string
 * @return dojo.Color
 */

function toColor(string) {
  var parsed;
  var p = _parseInt2["default"];
  var color = string.replace(/\s*/g, ""); // Remove all spaces

  var hex3Match = HEX3_REGEX.exec(color);
  var hex6Match = HEX6_REGEX.exec(color);

  if (hex6Match) {
    // 6 digit hex
    parsed = [p(hex6Match[1], 16), p(hex6Match[2], 16), p(hex6Match[3], 16)];
  } else if (hex3Match) {
    // 3 digit hex
    parsed = [p(hex3Match[1], 16) * 17, p(hex3Match[2], 16) * 17, p(hex3Match[3], 16) * 17];
  }

  if (parsed) {
    return {
      r: parsed[0],
      g: parsed[1],
      b: parsed[2],
      a: 1
    };
  }

  return {
    r: 0,
    g: 0,
    b: 0,
    a: 1
  };
}
/**
 * Helper function that returns a luminance of a color.
 * Color must be an object with r, g and b properties.
 *
 * @param  {dojo.Color} color
 * @return {Number} Luminance in interval 0 - 255
 */


function luminanceOf(color) {
  // Imprecise luminance values may arise from finite precision of RGB coefitients
  // We have to round this value to two decimal places to avoid strange results
  var raw = 0.2126 * color.r + 0.7152 * color.g + 0.0722 * color.b;
  var rounded = Math.round(raw * 100) / 100;
  return rounded;
}
/**
 * Function that chooses from two colors based on luminance
 * of control color. This luminance is compared to specified threshold value.
 *
 * @param  {String} color as a String
 * @param  {Number} threshold Luminance threshold value in interval 1 - 255
 * @param  {String} dark Dark color variant for when control color luminance is higher than threshold
 * @param  {String} light Light color variant for when control color luminance is lower or equal than threshold
 * @return {String}
 */


function chooseColor(color, threshold, dark, light) {
  if (!color) return "";
  return luminanceOf(toColor(color)) > threshold ? dark : light;
}

function getActiveItemColor(branding) {
  var activeColor = branding.activeColor,
      headerColor = branding.headerColor;
  var detectedColor = chooseColor(headerColor, 128, "#000", "#FFF");
  return activeColor || detectedColor;
}

function getHeaderTextColor(branding) {
  var headerTextColor = branding.headerTextColor,
      headerColor = branding.headerColor;
  var detectedColor = chooseColor(headerColor, 128, "#000", "#FFF");
  return headerTextColor || detectedColor;
}

function getPickerHoverColor(branding) {
  var headerColor = branding.headerColor;
  var detectedColor = chooseColor(headerColor, 254.99, "rgba(0, 0, 0, .02)", "");
  return detectedColor || "";
}

function getMenuItemHoverColor(branding) {
  var lightOpacity = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0.5;
  var darkOpacity = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.25;
  var headerColor = branding.headerColor,
      activeColor = branding.activeColor;
  var backgroundColorLuminance = luminanceOf(toColor(headerColor || "#000"));
  var emphasisColorLuminance = luminanceOf(toColor(activeColor || "#fff"));
  return emphasisColorLuminance > backgroundColorLuminance ? "rgba(255, 255, 255, ".concat(lightOpacity, ")") : "rgba(0, 0, 0, ".concat(darkOpacity, ")");
}

function getSeparatorBorderColor(branding) {
  return getMenuItemHoverColor(branding, 0.25, 0.08);
}