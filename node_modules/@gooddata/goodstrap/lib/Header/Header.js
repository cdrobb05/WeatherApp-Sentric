"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty2 = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty2(exports, "__esModule", {
  value: true
});

exports.generateHeaderMenu = generateHeaderMenu;
exports.generateAccountMenu = generateAccountMenu;
exports.generateHelpMenu = generateHelpMenu;
exports.addUTMParameters = exports["default"] = exports.Header = exports.UTMContent = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-property"));

var _defineProperties = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/define-properties"));

var _getOwnPropertyDescriptors = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptors"));

var _getOwnPropertyDescriptor = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-descriptor"));

var _getOwnPropertySymbols = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/get-own-property-symbols"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

var _defineProperty3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactTransitionGroup = require("react-transition-group");

var _reactIntl = require("react-intl");

var _classnames = _interopRequireDefault(require("classnames"));

var _get = _interopRequireDefault(require("lodash/get"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _jsUtils = require("@gooddata/js-utils");

var _addCSS = _interopRequireDefault(require("../core/addCSS"));

var _domUtilities = require("../core/domUtilities");

var _intlShape = require("../core/intlShape");

var _Button = _interopRequireDefault(require("../Button/Button"));

var _Overlay = _interopRequireDefault(require("../core/Overlay"));

var _HeaderProjectPicker = _interopRequireDefault(require("./HeaderProjectPicker"));

var _HeaderMenu = _interopRequireWildcard(require("./HeaderMenu"));

var _HeaderAccount = _interopRequireDefault(require("./HeaderAccount"));

var _HeaderHelp = _interopRequireDefault(require("./HeaderHelp"));

var _utils = require("./utils");

var _HeaderBranding = require("./HeaderBranding");

function ownKeys(object, enumerableOnly) { var keys = (0, _keys["default"])(object); if (_getOwnPropertySymbols["default"]) { var symbols = (0, _getOwnPropertySymbols["default"])(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return (0, _getOwnPropertyDescriptor["default"])(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { (0, _defineProperty3["default"])(target, key, source[key]); }); } else if (_getOwnPropertyDescriptors["default"]) { (0, _defineProperties["default"])(target, (0, _getOwnPropertyDescriptors["default"])(source)); } else { ownKeys(Object(source)).forEach(function (key) { (0, _defineProperty2["default"])(target, key, (0, _getOwnPropertyDescriptor["default"])(source, key)); }); } } return target; }

var UTMContent = {
  DOCUMENTATION: "main_menu_help_documentation",
  UNIVERSITY: "main_menu_help_university",
  COMMUNITY: "main_menu_help_community",
  SUPPORT: "main_menu_help_support",
  TICKET: "main_menu_help_ticket"
};
exports.UTMContent = UTMContent;

function parseBootstrap(bootstrapData) {
  var current = (0, _get["default"])(bootstrapData, ["bootstrapResource", "current"], {});
  var branding = (0, _get["default"])(bootstrapData, ["bootstrapResource", "settings"], {});
  var featureFlags = current.featureFlags;
  var permissions = (0, _get["default"])(current, ["projectPermissions", "permissions"], {});
  var projectUri = (0, _get["default"])(current, ["project", "links", "self"], "");
  var projectId = projectUri.split("/").pop();
  var currentProjectSettings = (0, _get["default"])(bootstrapData, ["bootstrapResource", "profileSetting", "projectSettings", projectUri], {});
  var dashboardId = (0, _get["default"])(currentProjectSettings, ["dashboard"]);
  var tabId = (0, _get["default"])(currentProjectSettings, ["tab"]);
  var analyticalDashboards = (0, _get["default"])(current, ["analyticalDashboards"], []);
  var documentationUrl = (0, _get["default"])(branding, ["documentationUrl"], "");
  var supportForumUrl = (0, _get["default"])(branding, ["supportForumUrl"], "");
  var supportEmail = (0, _get["default"])(branding, ["supportEmail"], "");
  var isBranded = (0, _get["default"])(branding, ["isBranded"], false);
  var userEmail = (0, _get["default"])(bootstrapData, ["bootstrapResource", "accountSetting", "login"]);
  return {
    analyticalDashboards: analyticalDashboards,
    branding: branding,
    dashboardId: dashboardId,
    featureFlags: featureFlags,
    permissions: permissions,
    projectId: projectId,
    tabId: tabId,
    documentationUrl: documentationUrl,
    supportForumUrl: supportForumUrl,
    userEmail: userEmail,
    supportEmail: supportEmail,
    isBranded: isBranded
  };
}

function filterMenuItems(menuItems) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var activeItem = options.activeItem;
  return menuItems.map(function (item) {
    var isActive = activeItem === item.key;
    return _objectSpread({}, item, {
      isVisible: item.isVisible || isActive,
      isActive: isActive
    });
  }).filter(function (item) {
    return item.isVisible;
  }).map(function (item) {
    var rest = _objectSpread({}, item);

    delete rest.isVisible;
    return rest;
  });
}

function getOuterWidth(element) {
  var width = element.offsetWidth;

  var _getComputedStyle = getComputedStyle(element),
      marginLeft = _getComputedStyle.marginLeft,
      marginRight = _getComputedStyle.marginRight;

  return width + (0, _parseInt2["default"])(marginLeft, 10) + (0, _parseInt2["default"])(marginRight, 10);
}

function getWidthOfChildren(element) {
  var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "> *";
  var SAFETY_PADDING = 10;
  return (0, _from["default"])(element.querySelectorAll(selector)).map(getOuterWidth).reduce(function (sum, childWidth) {
    return sum + childWidth;
  }, SAFETY_PADDING);
}

var Header = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Header, _Component);

  function Header(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Header);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Header).call(this, props));
    (0, _defineProperty3["default"])((0, _assertThisInitialized2["default"])(_this), "nodeRef", (0, _react.createRef)());
    (0, _defineProperty3["default"])((0, _assertThisInitialized2["default"])(_this), "resizeHandler", (0, _debounce["default"])(function () {
      return _this.measure();
    }, 100));
    _this.state = {
      childrenWidth: 0,
      guid: (0, _uniqueId["default"])("header-"),
      isContentVisible: true,
      isOverlayMenuOpen: false,
      responsiveMode: false
    };
    _this.measure = _this.measure.bind((0, _assertThisInitialized2["default"])(_this));
    _this.measureChildren = _this.measureChildren.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(Header, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("resize", this.resizeHandler);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("resize", this.resizeHandler);
      (0, _domUtilities.removeFromDom)(this.stylesheet);
    }
  }, {
    key: "getClassNames",
    value: function getClassNames() {
      var _cx;

      var isContentLoaded = this.props.loaded && this.state.isContentVisible;
      return (0, _classnames["default"])((_cx = {
        "gd-header": true
      }, (0, _defineProperty3["default"])(_cx, this.state.guid, true), (0, _defineProperty3["default"])(_cx, "is-loaded", isContentLoaded), (0, _defineProperty3["default"])(_cx, "is-not-loaded", !isContentLoaded), (0, _defineProperty3["default"])(_cx, this.props.className, !!this.props.className), _cx));
    }
  }, {
    key: "measureChildren",
    value: function measureChildren() {
      var currentDOMNode = this.nodeRef.current;
      var childrenWidth = getWidthOfChildren(currentDOMNode, ".gd-header-measure");
      this.setState({
        childrenWidth: childrenWidth,
        isContentVisible: true
      }, this.measure.bind(this));
    }
  }, {
    key: "measure",
    value: function measure() {
      var currentDOMNode = this.nodeRef.current;

      if (!currentDOMNode) {
        // ref is null because 'this.measure()' is called after 100ms 'componentWillUnmount' called,
        // which cleans the nodeRef
        return;
      }

      var currentWidth = currentDOMNode.clientWidth;
      var responsiveMode = currentWidth < this.state.childrenWidth;

      if (this.state.responsiveMode !== responsiveMode) {
        this.setState({
          responsiveMode: responsiveMode,
          isOverlayMenuOpen: false
        });
      }
    }
  }, {
    key: "createStyles",
    value: function createStyles() {
      var guid = this.state.guid;
      var branding = this.props.branding;
      var activeItemColor = (0, _HeaderBranding.getActiveItemColor)(branding);
      var textColor = (0, _HeaderBranding.getHeaderTextColor)(branding);
      var menuItemHoverColor = (0, _HeaderBranding.getMenuItemHoverColor)(branding);
      var separatorBorderColor = (0, _HeaderBranding.getSeparatorBorderColor)(branding);
      var pickerHoverColor = (0, _HeaderBranding.getPickerHoverColor)(branding);
      var css = [];
      css.push(".".concat(guid, " { color: ").concat(textColor, "; background: ").concat(branding.headerColor, "}"));
      css.push(".".concat(guid, " .gd-header-menu-section { border-color: ").concat(separatorBorderColor, "}"));
      css.push(".".concat(guid, " .gd-header-menu-item:hover { border-color: ").concat(menuItemHoverColor, "}"));
      css.push(".".concat(guid, " .gd-header-menu-item.active { border-color: ").concat(activeItemColor, "}"));
      css.push(".".concat(guid, " .gd-header-project { border-color: ").concat(separatorBorderColor, "}"));
      css.push(".".concat(guid, " .gd-header-project:hover { background-color: ").concat(pickerHoverColor, "; color: ").concat(textColor, "}"));
      css.push(".".concat(guid, " .hamburger-icon:not(.is-open) i { border-color: ").concat(textColor, "}"));
      css.push(".".concat(guid, " .hamburger-icon:not(.is-open):after { border-color: ").concat(textColor, "}"));
      css.push(".".concat(guid, " .hamburger-icon:not(.is-open):before { border-color: ").concat(textColor, "}"));
      this.stylesheet = (0, _addCSS["default"])("header-css-".concat(guid), css.join("\n"), true);
    }
  }, {
    key: "toggleOverlayMenu",
    value: function toggleOverlayMenu(isOverlayMenuOpen) {
      this.setState({
        isOverlayMenuOpen: isOverlayMenuOpen
      });
    }
  }, {
    key: "addHelpSection",
    value: function addHelpSection(sections) {
      var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
          documentationUrl = _ref.documentationUrl;

      if (!documentationUrl) return sections;
      return [].concat((0, _toConsumableArray2["default"])(sections), [[{
        key: "gs.header.help",
        className: "s-menu-help icon-header-help",
        href: documentationUrl,
        target: "_blank"
      }]]);
    }
  }, {
    key: "renderNav",
    value: function renderNav() {
      return this.state.responsiveMode ? this.renderMobileNav() : this.renderStandardNav();
    }
  }, {
    key: "renderMobileNav",
    value: function renderMobileNav() {
      var _this2 = this;

      var iconClasses = (0, _classnames["default"])({
        "hamburger-icon": true,
        "is-open": this.state.isOverlayMenuOpen
      });
      return [_react["default"].createElement("div", {
        className: "hamburger-wrapper",
        key: "hamburger-wrapper"
      }, _react["default"].createElement("div", {
        className: iconClasses,
        key: "hamburger-icon",
        onClick: function onClick() {
          _this2.toggleOverlayMenu(!_this2.state.isOverlayMenuOpen);
        }
      }, _react["default"].createElement("i", null))), this.renderOverlayMenu()];
    }
  }, {
    key: "renderOverlayMenu",
    value: function renderOverlayMenu() {
      var _this3 = this;

      return _react["default"].createElement(_Overlay["default"], {
        key: "header-overlay-menu",
        alignPoints: [{
          align: "tr tr"
        }],
        closeOnOutsideClick: this.state.isOverlayMenuOpen,
        isModal: this.state.isOverlayMenuOpen,
        positionType: "fixed",
        onClose: function onClose() {
          _this3.toggleOverlayMenu(false);
        }
      }, _react["default"].createElement(_reactTransitionGroup.CSSTransitionGroup, {
        transitionName: "gd-header",
        transitionEnterTimeout: 300,
        transitionLeaveTimeout: 300,
        component: "div"
      }, this.renderVerticalMenu()));
    }
  }, {
    key: "renderVerticalMenu",
    value: function renderVerticalMenu() {
      var verticalSections = this.addHelpSection(this.props.sections, this.props.branding);
      return this.state.isOverlayMenuOpen ? _react["default"].createElement("div", {
        key: "overlay-menu",
        className: "gd-header-menu-vertical-wrapper"
      }, _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-header"
      }, "Menu"), _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-content"
      }, _react["default"].createElement(_HeaderMenu["default"], {
        onMenuItemClick: this.props.onMenuItemClick,
        sections: verticalSections,
        className: "gd-header-menu-vertical"
      })), _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-footer"
      }, _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-bottom-item"
      }, _react["default"].createElement("span", {
        className: "gd-header-username icon-user"
      }, this.props.userName)), _react["default"].createElement("div", null, this.renderLogoutButton()))) : false;
    }
  }, {
    key: "renderLogoutButton",
    value: function renderLogoutButton() {
      var _this4 = this;

      var t = this.props.intl.formatMessage;

      var _this$props$accountMe = this.props.accountMenuItems.filter(function (item) {
        return item.key === "gs.header.logout";
      }),
          _this$props$accountMe2 = (0, _slicedToArray2["default"])(_this$props$accountMe, 1),
          logoutMenuItem = _this$props$accountMe2[0];

      return logoutMenuItem ? _react["default"].createElement(_Button["default"], {
        value: t({
          id: "gs.header.logout"
        }),
        className: "logout-button",
        onClick: function onClick(e) {
          _this4.props.onMenuItemClick(logoutMenuItem, e);
        }
      }) : false;
    }
  }, {
    key: "renderStandardNav",
    value: function renderStandardNav() {
      var _this5 = this;

      return _react["default"].createElement("div", {
        className: "gd-header-stretch gd-header-menu-wrapper"
      }, _react["default"].createElement(_HeaderMenu["default"], {
        onMenuItemClick: this.props.onMenuItemClick,
        sections: this.props.sections,
        className: "gd-header-menu-horizontal"
      }), (!!this.props.helpMenuItems.length || this.props.disableHelpDropdown) && _react["default"].createElement(_HeaderHelp["default"], {
        onMenuItemClick: function onMenuItemClick() {
          var _this5$props;

          (_this5$props = _this5.props).onMenuItemClick.apply(_this5$props, arguments);

          _this5.props.onHelpMenuClicked();
        },
        className: "gd-header-measure",
        disableDropdown: this.props.disableHelpDropdown,
        onHelpClicked: this.props.onHelpClicked,
        items: this.props.helpMenuItems
      }), _react["default"].createElement(_HeaderAccount["default"], {
        userName: this.props.userName,
        onMenuItemClick: this.props.onMenuItemClick,
        className: "gd-header-measure",
        items: this.props.accountMenuItems
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props$branding = this.props.branding,
          logoUrl = _this$props$branding.logoUrl,
          applicationTitle = _this$props$branding.applicationTitle,
          displayProjects = _this$props$branding.displayProjects;
      this.createStyles();
      var logoClasses = (0, _classnames["default"])({
        "gd-header-logo": true,
        "gd-header-measure": true,
        "gd-header-shrink": this.state.responsiveMode
      });
      var projectClasses = (0, _classnames["default"])({
        "gd-header-measure": true
      });
      return _react["default"].createElement("div", {
        className: this.getClassNames(),
        ref: this.nodeRef
      }, _react["default"].createElement("a", {
        href: this.props.logoHref,
        onClick: this.props.onLogoClick,
        className: logoClasses
      }, _react["default"].createElement("img", {
        src: logoUrl,
        title: applicationTitle,
        onLoad: this.measureChildren,
        onError: this.measureChildren,
        alt: ""
      })), displayProjects && _react["default"].createElement(_HeaderProjectPicker["default"], {
        className: projectClasses,
        profileUri: this.props.profileUri,
        project: this.props.project,
        onProjectSelect: this.props.onProjectSelect,
        createDataSource: this.props.createProjectPickerDataSource,
        projectPickerFooter: this.props.projectPickerFooter
      }), this.renderNav());
    }
  }]);
  return Header;
}(_react.Component);

exports.Header = Header;
(0, _defineProperty3["default"])(Header, "propTypes", {
  accountMenuItems: _propTypes["default"].arrayOf(_HeaderMenu.itemPropType),
  helpMenuItems: _propTypes["default"].arrayOf(_HeaderMenu.itemPropType),
  branding: _propTypes["default"].object,
  className: _propTypes["default"].string,
  createProjectPickerDataSource: _propTypes["default"].func.isRequired,
  intl: _intlShape.intlShape.isRequired,
  loaded: _propTypes["default"].bool,
  logoHref: _propTypes["default"].string,
  onLogoClick: _propTypes["default"].func,
  onMenuItemClick: _propTypes["default"].func,
  onProjectSelect: _propTypes["default"].func,
  profileUri: _propTypes["default"].string.isRequired,
  project: _propTypes["default"].object.isRequired,
  sections: _propTypes["default"].arrayOf(_propTypes["default"].arrayOf(_HeaderMenu.itemPropType)),
  userName: _propTypes["default"].string.isRequired,
  projectPickerFooter: _propTypes["default"].node,
  disableHelpDropdown: _propTypes["default"].bool,
  onHelpClicked: _propTypes["default"].func
});
(0, _defineProperty3["default"])(Header, "defaultProps", {
  accountMenuItems: [],
  helpMenuItems: [],
  branding: {},
  className: "",
  loaded: true,
  logoHref: "/",
  onLogoClick: function onLogoClick() {},
  onMenuItemClick: function onMenuItemClick() {},
  onProjectSelect: function onProjectSelect() {},
  sections: [],
  disableHelpDropdown: false
});

var _default = (0, _reactIntl.injectIntl)(Header);

exports["default"] = _default;

function generateHeaderMenu(bootstrapData) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  var _parseBootstrap = parseBootstrap(bootstrapData),
      featureFlags = _parseBootstrap.featureFlags,
      permissions = _parseBootstrap.permissions,
      projectId = _parseBootstrap.projectId,
      dashboardId = _parseBootstrap.dashboardId,
      tabId = _parseBootstrap.tabId,
      analyticalDashboards = _parseBootstrap.analyticalDashboards;

  var hasNoDataSet = options.hasNoDataSet;
  var dashPart = dashboardId && tabId ? "".concat(dashboardId, "|").concat(tabId) : "";
  var enableAnalyticalDashboards = featureFlags.enableAnalyticalDashboards,
      analyticalDesigner = featureFlags.analyticalDesigner,
      enableCsvUploader = featureFlags.enableCsvUploader;
  var canManageProject = permissions.canManageProject,
      canUploadNonProductionCSV = permissions.canUploadNonProductionCSV,
      canManageReport = permissions.canManageReport,
      canAccessWorkbench = permissions.canAccessWorkbench,
      canCreateAnalyticalDashboard = permissions.canCreateAnalyticalDashboard,
      canCreateVisualization = permissions.canCreateVisualization,
      canManageMetric = permissions.canManageMetric;
  var shouldShowPPExperience = !_jsUtils.featureFlagsUtils.shouldHidePPExperience(featureFlags);
  var isDashboardVisible = projectId && canAccessWorkbench === "1" && shouldShowPPExperience;
  var isReportVisible = projectId && canManageReport === "1" && shouldShowPPExperience;

  var isFreemiumCustomer = _jsUtils.featureFlagsUtils.isFreemiumEdition(featureFlags.platformEdition);

  var enableNewNavigation = _jsUtils.featureFlagsUtils.shouldEnableNewNavigation(featureFlags);

  var canAccessLoadCsvPage = projectId && canUploadNonProductionCSV === "1" && enableCsvUploader;
  var isLoadSectionVisible = featureFlags.enableDataSection ? !isFreemiumCustomer && canAccessLoadCsvPage : canAccessLoadCsvPage;
  var isDataSectionVisible = featureFlags.enableDataSection && isFreemiumCustomer && projectId && canUploadNonProductionCSV === "1";
  var dataItemLink = canManageProject === "1" && hasNoDataSet ? "/admin/connect/#/projects/".concat(projectId, "/datasource") : "/admin/modeler/#/projects/".concat(projectId);
  var headerMenuSections = [[{
    key: "gs.header.dashboards",
    className: "s-menu-dashboards",
    href: "/#s=/gdc/projects/".concat(projectId, "|projectDashboardPage|").concat(dashPart),
    isVisible: isDashboardVisible
  }, {
    key: "gs.header.reports",
    className: "s-menu-reports",
    href: "/#s=/gdc/projects/".concat(projectId, "|domainPage|all-reports"),
    isVisible: isReportVisible
  }], [{
    key: enableNewNavigation ? "gs.header.kpis.new" : "gs.header.kpis",
    className: "s-menu-kpis",
    href: "/dashboards/#/project/".concat(projectId),
    isVisible: projectId && (analyticalDashboards.length || canCreateAnalyticalDashboard === "1" && enableAnalyticalDashboards)
  }, {
    key: "gs.header.analyze",
    className: "s-menu-analyze",
    href: "/analyze/#/".concat(projectId, "/reportId/edit"),
    isVisible: projectId && canCreateVisualization === "1" && analyticalDesigner
  }, {
    key: "gs.header.load",
    className: "s-menu-load",
    href: "/data/#/projects/".concat(projectId, "/datasets"),
    isVisible: isLoadSectionVisible
  }, {
    key: "gs.header.data",
    className: "s-menu-data",
    href: dataItemLink,
    isVisible: isDataSectionVisible
  }], [{
    key: "gs.header.manage",
    className: "s-menu-manage",
    href: "/#s=/gdc/projects/".concat(projectId, "|dataPage|"),
    isVisible: projectId && canManageMetric === "1"
  }]];
  return headerMenuSections.map(function (items) {
    return filterMenuItems(items, options);
  }).filter(function (items) {
    return items.length > 0;
  });
}

function generateAccountMenu(bootstrapData) {
  var _parseBootstrap2 = parseBootstrap(bootstrapData),
      branding = _parseBootstrap2.branding,
      permissions = _parseBootstrap2.permissions,
      projectId = _parseBootstrap2.projectId;

  var accountMenuItems = [{
    key: "gs.header.account",
    className: "s-account",
    href: "/#s=/gdc/projects/".concat(projectId, "|accountPage|"),
    isVisible: projectId && branding.displayAccountPage
  }, {
    key: "gs.header.dic",
    className: "s-dic",
    href: "/admin/disc/",
    isVisible: permissions.canInitData === "1"
  }, {
    key: "gs.header.logout",
    className: "s-logout",
    isVisible: true
  }];
  return filterMenuItems(accountMenuItems);
}

var addUTMParameters = function addUTMParameters(baseUrl, utmContent) {
  var isBranded = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
  return isBranded ? baseUrl : "".concat(baseUrl).concat(baseUrl.includes("?") ? "&" : "?", "utm_medium=platform&utm_source=product&utm_content=").concat(utmContent);
};

exports.addUTMParameters = addUTMParameters;

function generateHelpMenu(bootstrapData) {
  var _ref2 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      _ref2$sessionId = _ref2.sessionId,
      sessionId = _ref2$sessionId === void 0 ? "" : _ref2$sessionId;

  var _parseBootstrap3 = parseBootstrap(bootstrapData),
      documentationUrl = _parseBootstrap3.documentationUrl,
      supportForumUrl = _parseBootstrap3.supportForumUrl,
      userEmail = _parseBootstrap3.userEmail,
      projectId = _parseBootstrap3.projectId,
      supportEmail = _parseBootstrap3.supportEmail,
      isBranded = _parseBootstrap3.isBranded,
      featureFlags = _parseBootstrap3.featureFlags;

  var supportUrl = (0, _utils.generateSupportUrl)(projectId, sessionId, userEmail, window.location.href);
  var universityUrl = "https://university.gooddata.com";
  var communityUrl = "https://community.gooddata.com";

  var _ref3 = featureFlags || {},
      enableUniversityHelpMenuItem = _ref3.enableUniversityHelpMenuItem,
      enableCommunityHelpMenuItem = _ref3.enableCommunityHelpMenuItem;

  var helpMenuItems = [{
    key: "gs.header.documentation",
    className: "s-documentation",
    href: addUTMParameters(documentationUrl, UTMContent.DOCUMENTATION, isBranded),
    isVisible: !!documentationUrl,
    target: "_blank"
  }, {
    key: "gs.header.university",
    className: "s-university",
    href: addUTMParameters(universityUrl, UTMContent.UNIVERSITY, isBranded),
    isVisible: !!enableUniversityHelpMenuItem && !isBranded,
    target: "_blank"
  }, {
    key: "gs.header.community",
    className: "s-community",
    href: addUTMParameters(communityUrl, UTMContent.COMMUNITY, isBranded),
    isVisible: !!enableCommunityHelpMenuItem && !isBranded,
    target: "_blank"
  }, {
    key: "gs.header.visitSupportPortal",
    className: "s-support-portal",
    href: addUTMParameters(supportForumUrl, UTMContent.SUPPORT, isBranded),
    isVisible: !!supportForumUrl,
    target: "_blank"
  }, {
    key: "gs.header.submitTicket",
    className: "s-submit-ticket",
    href: "mailto:".concat(supportEmail),
    isVisible: isBranded && !!supportEmail,
    target: "_blank"
  }, {
    key: "gs.header.submitTicket",
    className: "s-submit-ticket",
    href: addUTMParameters(supportUrl, UTMContent.TICKET, isBranded),
    isVisible: !isBranded,
    target: "_blank"
  }];
  return filterMenuItems(helpMenuItems);
}