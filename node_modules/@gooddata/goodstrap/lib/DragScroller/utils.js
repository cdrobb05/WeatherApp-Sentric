"use strict";

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getAreaHit = getAreaHit;
exports.getAnimationRange = getAnimationRange;
exports.getSmoothTime = getSmoothTime;
exports.isEventWithinRect = isEventWithinRect;
// (C) 2007-2020 GoodData Corporation
var ACTIVE_CONTAINER_FRACTION = 4;
/**
 * Find out whether an active area of the scroller was hit (upper/lower).
 *
 * @param event dragOver or mouseOver event
 * @param element scroller element
 * @param {number} fraction determines the length of the upper/lower active area
 */

function getAreaHit(event, element) {
  var fraction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : ACTIVE_CONTAINER_FRACTION;
  var fractionPx = element.clientHeight / fraction;
  var diff = event.clientY - element.getBoundingClientRect().top;

  if (diff < fractionPx) {
    return "upper";
  }

  if (element.clientHeight - diff < fractionPx) {
    return "lower";
  }

  return "middle";
}
/**
 * Returns the range of scroll motion needed to travel to the active area hit.
 *
 * @param element scroller element
 * @param area active area hit
 */


function getAnimationRange(element, area) {
  if (area === "upper") {
    return {
      from: element.scrollTop,
      to: 0
    };
  }

  if (area === "lower") {
    return {
      from: element.scrollTop,
      to: element.scrollHeight - element.clientHeight
    };
  }

  return null;
}
/**
 * Determines the value of smooth time property based on motion interval.
 * Gives only approximate idea of the animation length, tweak to find
 * what suits best.
 *
 * @param {Object} range should contain `from` and `to` keys
 * @param {number} stiffness multiplication factor
 */


function getSmoothTime(_ref, stiffness) {
  var from = _ref.from,
      to = _ref.to;
  return Math.abs(to - from) * stiffness;
}
/**
 * Determines if a given mouse event happened within a given rectangle.
 *
 * @param {Event} event mouse event (drag leave, mouse move, ...)
 * @param {DOMRect} rect
 */


function isEventWithinRect(event, rect) {
  var between = function between(x, min, max) {
    return x > min && x < max;
  };

  return between(event.pageX, rect.left, rect.right) && between(event.pageY, rect.top, rect.bottom);
}