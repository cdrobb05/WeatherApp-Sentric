"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = smoothingGenerator;

var _regenerator = _interopRequireDefault(require("@babel/runtime-corejs2/regenerator"));

var _marked = /*#__PURE__*/_regenerator["default"].mark(smoothingGenerator);

// (C) 2007-2020 GoodData Corporation

/* eslint no-param-reassign:0 */
var EPSILON = 0.001;
/**
 * Critically Damped Ease-In/Ease-Out Smoothing
 * see Game Programming Gems 4, by Thomas Lowe
 */

function smoothCD(from, to, velocity, smoothTime, timeDelta) {
  if (smoothTime === 0) {
    return {
      value: to,
      velocity: 0
    };
  }

  var omega = 2 / smoothTime;
  var x = omega * timeDelta;
  var exp = 1 / (1 + x + 0.45 * (x * x) + 0.235 * (x * x * x)); // eslint-disable-line no-mixed-operators

  var change = from - to;
  var temp = (velocity + omega * change) * timeDelta;
  var newVelocity = (velocity - omega * temp) * exp;
  var newValue = to + (change + temp) * exp;
  return {
    value: newValue,
    velocity: newVelocity
  };
}

function smoothingGenerator(from, to, smoothTime) {
  var velocity,
      timeDelta,
      next,
      _args = arguments;
  return _regenerator["default"].wrap(function smoothingGenerator$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          velocity = _args.length > 3 && _args[3] !== undefined ? _args[3] : 0;

          if (!(to - from === 0 || !smoothTime)) {
            _context.next = 3;
            break;
          }

          return _context.abrupt("return");

        case 3:
          _context.next = 5;
          return;

        case 5:
          timeDelta = _context.sent;
          next = smoothCD(from, to, velocity, smoothTime, timeDelta);
          velocity = next.velocity; // eslint-disable-line prefer-destructuring

          from = next.value;
          _context.next = 11;
          return from;

        case 11:
          if (Math.abs(to - from) > EPSILON) {
            _context.next = 3;
            break;
          }

        case 12:
        case "end":
          return _context.stop();
      }
    }
  }, _marked);
}