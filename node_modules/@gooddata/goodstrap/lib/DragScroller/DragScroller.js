"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _bindAll = _interopRequireDefault(require("lodash/bindAll"));

var _throttle = _interopRequireDefault(require("lodash/throttle"));

var _customEvent = _interopRequireDefault(require("custom-event"));

var _time_tracker = _interopRequireDefault(require("./time_tracker"));

var _cd_smooth = _interopRequireDefault(require("./cd_smooth"));

var _utils = require("./utils");

// (C) 2007-2020 GoodData Corporation
var SPRING_STIFFNESS_FACTOR = 2;
var ACTIVE_CONTAINER_FRACTION = 4;
var MILLISECONDS_BETWEEN_EVENTS = 180;
var MINIMUM_SCROLLED_PIXELS = 5;
var listeners = ["onResize", "onMouseDown", "onMouseUp", "onMouseMove"];

var DragScroller = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(DragScroller, _Component);

  function DragScroller(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, DragScroller);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(DragScroller).call(this, props)); // user clicked the mouse

    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "scrollHandler", (0, _throttle["default"])(function (e) {
      if (_this.containerRef.current && _this.containerRef.current.scrollTop >= MINIMUM_SCROLLED_PIXELS) {
        _this.dispatchScroll(e);
      }
    }, MILLISECONDS_BETWEEN_EVENTS));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "containerRef", (0, _react.createRef)());
    _this.isMouseDown = false; // user is dragging mouse

    _this.isDragging = false; // controls whether the animation is running

    _this.isRunning = false; // DOMRect of scroller element

    _this.containerRect = null; // Inner container scroll height

    _this.containerScrollHeight = -1;
    _this.scrolledStream = null;
    _this.dispatchScroll = _this.dispatchScroll.bind((0, _assertThisInitialized2["default"])(_this));
    (0, _bindAll["default"])((0, _assertThisInitialized2["default"])(_this), listeners);
    return _this;
  }

  (0, _createClass2["default"])(DragScroller, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      this.updateContainerRect();
      listeners.forEach(function (listener) {
        return _this2.props.window.addEventListener(listener.slice(2).toLowerCase(), _this2[listener], true);
      });

      if (this.containerRef.current) {
        this.containerRef.current.addEventListener("scroll", this.scrollHandler);
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      var _this3 = this;

      listeners.forEach(function (listener) {
        return _this3.props.window.removeEventListener(listener.slice(2).toLowerCase(), _this3[listener], true);
      });

      if (this.containerRef.current) {
        this.containerRef.current.removeEventListener("scroll", this.scrollHandler);
      }
    }
  }, {
    key: "onMouseDown",
    value: function onMouseDown() {
      this.isMouseDown = true;
      this.isDragging = false;
    }
  }, {
    key: "onMouseMove",
    value: function onMouseMove(event) {
      if (this.isMouseDown && this.isDragging) {
        if ((0, _utils.isEventWithinRect)(event, this.containerRect)) {
          var areaHit = (0, _utils.getAreaHit)(event, this.containerRef.current, this.props.activeFraction);

          if (areaHit === "middle") {
            this.isRunning = false;
            return;
          }

          if (!this.isRunning) {
            var range = (0, _utils.getAnimationRange)(this.containerRef.current, areaHit);
            var smoothTime = (0, _utils.getSmoothTime)(range, SPRING_STIFFNESS_FACTOR);

            if (range.to - range.from === 0) {
              return;
            }

            this.isRunning = true;
            this.runAnimation(range, smoothTime);
          }

          event.preventDefault();
        } else {
          this.isRunning = false;
        }
      }

      if (this.isMouseDown) {
        // on first mouseDown, also mouseMove is called in Chrome on Windows
        // it is needed to ignore the very first mouseMove after mouseDown
        // https://stackoverflow.com/questions/30169521/how-to-prevent-mousemove-after-mousedown-or-mouseup-in-chrome-possible-bug-in-c
        this.isDragging = true;
      }
    }
  }, {
    key: "onMouseUp",
    value: function onMouseUp() {
      this.isMouseDown = false;
      this.isDragging = false;
      this.isRunning = false;
    }
  }, {
    key: "onResize",
    value: function onResize() {
      this.updateContainerRect();
    }
  }, {
    key: "runAnimation",
    value: function runAnimation(range, smoothTime) {
      var _this4 = this;

      var smoother = this.props.smoother(range.from, range.to, smoothTime);
      smoother.next();
      var tick = (0, _time_tracker["default"])();

      var animationFrame = function animationFrame() {
        var _smoother$next = smoother.next(tick()),
            done = _smoother$next.done,
            value = _smoother$next.value;

        smoother.next();
        _this4.isRunning = _this4.isRunning && !done;

        if (_this4.isRunning && _this4.containerRef.current) {
          _this4.containerRef.current.scrollTop = value;

          _this4.props.scheduleAnimationFrame(animationFrame);
        }
      };

      this.props.scheduleAnimationFrame(animationFrame);
    }
  }, {
    key: "updateContainerRect",
    value: function updateContainerRect() {
      this.containerRect = this.containerRef.current && this.containerRef.current.getBoundingClientRect();
      this.containerScrollHeight = this.containerRef.current ? this.containerRef.current.scrollHeight : 0;
    }
  }, {
    key: "dispatchScroll",
    value: function dispatchScroll(event) {
      // Ignore scroll event when just scrollable container size has changed. Chrome issue. See BB-78
      var scrollHeight = this.containerRef.current.scrollHeight;

      if (scrollHeight !== this.containerScrollHeight) {
        this.updateContainerRect();
        return;
      }

      this.props.window.dispatchEvent(new _customEvent["default"]("goodstrap.scrolled", {
        bubbles: true,
        detail: {
          node: event.target
        }
      }));
    }
  }, {
    key: "render",
    value: function render() {
      var styles = {
        overflowY: "auto"
      };
      return _react["default"].createElement("div", {
        ref: this.containerRef,
        className: this.props.className,
        style: styles
      }, this.props.children);
    }
  }]);
  return DragScroller;
}(_react.Component);

exports["default"] = DragScroller;
(0, _defineProperty2["default"])(DragScroller, "propTypes", {
  className: _propTypes["default"].string,
  children: _propTypes["default"].element.isRequired,
  smoother: _propTypes["default"].func,
  scheduleAnimationFrame: _propTypes["default"].func,
  activeFraction: _propTypes["default"].number,
  window: _propTypes["default"].object
});
(0, _defineProperty2["default"])(DragScroller, "defaultProps", {
  className: "",
  smoother: _cd_smooth["default"],
  scheduleAnimationFrame: window.requestAnimationFrame.bind(window),
  activeFraction: ACTIVE_CONTAINER_FRACTION,
  window: window
});