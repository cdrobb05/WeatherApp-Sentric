"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.Datepicker = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _moment = _interopRequireDefault(require("moment"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactDayPicker = require("react-day-picker");

var _DayPickerInput = _interopRequireDefault(require("react-day-picker/DayPickerInput"));

var _moment2 = _interopRequireWildcard(require("react-day-picker/moment"));

var _reactIntl = require("react-intl");

var _intlShape = require("../core/intlShape");

var _utils = require("../Overlay/utils");

var _domUtilities = require("../core/domUtilities");

var _localeUtilities = require("../core/localeUtilities");

// (C) 2007-2020 GoodData Corporation
var DATEPICKER_OUTSIDE_DAY_SELECTOR = "DayPicker-Day--outside";

var Datepicker = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(Datepicker, _Component);

  function Datepicker(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Datepicker);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Datepicker).call(this, props));
    (0, _defineProperty2["default"])((0, _assertThisInitialized2["default"])(_this), "resizeHandler", (0, _debounce["default"])(function () {
      return _this.alignDatePicker();
    }, 100));
    var date = props.date,
        intl = props.intl,
        alignPoints = props.alignPoints;
    _this.state = {
      align: alignPoints[0].align,
      selectedDate: null,
      focused: false
    };
    _this.state.selectedDate = _this.updateDate(date || new Date(), intl.locale);
    _this.handleDayChanged = _this.handleDayChanged.bind((0, _assertThisInitialized2["default"])(_this));
    _this.handleInputChanged = _this.handleInputChanged.bind((0, _assertThisInitialized2["default"])(_this));
    _this.alignDatePicker = _this.alignDatePicker.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setComponentRef = _this.setComponentRef.bind((0, _assertThisInitialized2["default"])(_this));
    _this.setDatepickerRef = _this.setDatepickerRef.bind((0, _assertThisInitialized2["default"])(_this));
    return _this;
  }

  (0, _createClass2["default"])(Datepicker, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("resize", this.resizeHandler);
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      var props = this.props;

      if (props.date > nextProps.date || props.date < nextProps.date || props.intl !== nextProps.intl) {
        var selectedDate = this.updateDate(nextProps.date, nextProps.intl.locale);
        this.setState({
          selectedDate: selectedDate
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps, prevState) {
      if (this.state.focused && !prevState.focused) {
        this.alignDatePicker();
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("resize", this.resizeHandler);
    }
  }, {
    key: "setComponentRef",
    value: function setComponentRef(ref) {
      this.rootRef = ref;
    }
  }, {
    key: "setDatepickerRef",
    value: function setDatepickerRef(ref) {
      this.datePickerContainer = ref ? ref.dayPicker.parentElement : null;
    }
  }, {
    key: "getInputClasses",
    value: function getInputClasses() {
      return (0, _classnames["default"])("input-text", "small-12", this.props.size, (0, _uniqueId["default"])("gd-datepicker-input-"));
    }
  }, {
    key: "getComponentClasses",
    value: function getComponentClasses() {
      return (0, _classnames["default"])("gd-datepicker", this.props.className, this.props.size, "gd-datepicker-input", this.state.focused ? "gd-datepicker-focused" : "");
    }
  }, {
    key: "getOverlayWrapperClasses",
    value: function getOverlayWrapperClasses() {
      var _this$state$align$spl = this.state.align.split(" "),
          _this$state$align$spl2 = (0, _slicedToArray2["default"])(_this$state$align$spl, 2),
          inputAnchorPoint = _this$state$align$spl2[0],
          pickerAnchorPoint = _this$state$align$spl2[1];

      return (0, _classnames["default"])("gd-datepicker-OverlayWrapper", "gd-datepicker-OverlayWrapper-".concat(inputAnchorPoint, "-xx"), "gd-datepicker-OverlayWrapper-xx-".concat(pickerAnchorPoint));
    }
  }, {
    key: "updateDate",
    value: function updateDate(date, locale) {
      _moment["default"].locale((0, _localeUtilities.mapChineseLocaleForMoment)(locale));

      return this.normalizeDate(date);
    }
  }, {
    key: "handleInputChanged",
    value: function handleInputChanged(e) {
      var _this2 = this;

      var value = e.target.value;
      var momentDate = (0, _moment["default"])(value, "l", true);

      if (momentDate.isValid()) {
        this.setState({
          selectedDate: momentDate.toDate(),
          focused: false
        }, function () {
          _this2.props.onChange(_this2.state.selectedDate);
        });
      } else {
        if (this.props.resetOnInvalidValue) {
          this.setState({
            focused: false,
            selectedDate: (0, _moment["default"])(this.state.selectedDate).toDate()
          });
          return;
        }

        this.setState({
          focused: false
        }, function () {
          _this2.props.onChange(null);
        });
      }
    }
  }, {
    key: "handleDayChanged",
    value: function handleDayChanged(newlySelectedDate) {
      var _this3 = this;

      if (!newlySelectedDate) {
        return;
      }

      if (_reactDayPicker.DateUtils.isSameDay(this.state.selectedDate, newlySelectedDate)) {
        return;
      }

      this.setState({
        selectedDate: newlySelectedDate
      }, function () {
        _this3.props.onChange(newlySelectedDate);
      });
    }
  }, {
    key: "normalizeDate",
    value: function normalizeDate(date) {
      return new Date(date.getFullYear(), date.getMonth(), date.getDate());
    }
  }, {
    key: "alignDatePicker",
    value: function alignDatePicker() {
      var _this4 = this;

      var alignPoints = this.props.alignPoints;
      var container = this.datePickerContainer;
      if (!alignPoints || !container) return;
      var optimalAlignment = (0, _utils.getOptimalAlignment)({
        targetRegion: (0, _domUtilities.elementRegion)(this.rootRef),
        selfRegion: (0, _domUtilities.elementRegion)(container),
        alignPoints: alignPoints
      });
      var align = optimalAlignment.alignment.align;
      this.setState({
        align: align
      }, function () {
        _this4.props.onAlign(align);
      });
    }
  }, {
    key: "handleWrapperClick",
    value: function handleWrapperClick(e) {
      /**
       * Prevent default fixes bug BB-332 but prevents in closing other dropdowns (Bug BB-1102)
       * so we want to prevent default only when clicking on outside dates in datepicker
       */
      if (e.target && e.target.classList && e.target.classList.contains(DATEPICKER_OUTSIDE_DAY_SELECTOR)) {
        e.preventDefault();
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this5 = this;

      var classNamesProps = {
        overlay: "gd-datepicker-picker",
        overlayWrapper: this.getOverlayWrapperClasses()
      };
      var dayPickerProps = {
        showOutsideDays: true,
        locale: (0, _localeUtilities.mapChineseLocaleForMoment)(this.props.intl.locale),
        localeUtils: _moment2["default"],
        month: this.state.selectedDate,
        ref: this.setDatepickerRef
      };
      var inputProps = {
        className: this.getInputClasses(),
        onBlur: this.handleInputChanged,
        tabIndex: this.props.tabIndex,
        onClick: function onClick() {
          _this5.setState({
            focused: true
          });
        },
        onFocus: function onFocus() {
          _this5.setState({
            focused: true
          });
        }
      };
      return _react["default"].createElement("div", {
        className: this.getComponentClasses(),
        ref: this.setComponentRef,
        onClick: this.handleWrapperClick
      }, _react["default"].createElement(_DayPickerInput["default"], {
        classNames: classNamesProps,
        value: this.state.selectedDate,
        onDayChange: this.handleDayChanged,
        dayPickerProps: dayPickerProps,
        inputProps: inputProps,
        formatDate: _moment2.formatDate,
        parseDate: _moment2.parseDate,
        format: "L",
        placeholder: this.props.placeholder
      }), _react["default"].createElement("span", {
        className: "gd-datepicker-icon icon-calendar"
      }));
    }
  }]);
  return Datepicker;
}(_react.Component);

exports.Datepicker = Datepicker;
(0, _defineProperty2["default"])(Datepicker, "propTypes", {
  className: _propTypes["default"].string,
  // optional css class applied to outer div
  date: _propTypes["default"].instanceOf(Date),
  // date value used to initialize date picker
  intl: _intlShape.intlShape.isRequired,
  placeholder: _propTypes["default"].string,
  onChange: _propTypes["default"].func,
  // called when selected date changes
  resetOnInvalidValue: _propTypes["default"].bool,
  // reset on invalid input
  size: _propTypes["default"].string,
  // optional css class, applied to outer div and input
  tabIndex: _propTypes["default"].number,
  alignPoints: _propTypes["default"].arrayOf(_propTypes["default"].shape({
    align: _propTypes["default"].oneOf(["bl tl", "br tr", "tl bl", "tr br"]).isRequired
  })),
  onAlign: _propTypes["default"].func
});
(0, _defineProperty2["default"])(Datepicker, "defaultProps", {
  className: "",
  date: null,
  placeholder: "",
  onChange: function onChange() {},
  resetOnInvalidValue: false,
  size: null,
  tabIndex: null,
  alignPoints: [{
    align: "bl tl"
  }, {
    align: "br tr"
  }, {
    align: "tl bl"
  }, {
    align: "tr br"
  }],
  onAlign: function onAlign() {}
});

var _default = (0, _reactIntl.injectIntl)(Datepicker);

exports["default"] = _default;