export declare const DEFAULT_ALIGN_POINTS: {
    align: string;
    offset: {
        x: number;
        y: number;
    };
}[];
declare function getDefaultViewportRegion(ignoreScrollOffsets: any): {
    top: number;
    left: number;
    width: any;
    height: any;
};
declare function getDefaultDocumentRegion(): {
    top: number;
    left: number;
    height: number;
    width: number;
};
/**
 * Calculate most visible alignment of self region which
 * would be positioned to target region using specified
 * align points
 */
export declare function getOptimalAlignmentForRegion({ boundaryRegion, targetRegion, selfRegion, alignPoints }: {
    boundaryRegion: any;
    targetRegion: any;
    selfRegion: any;
    alignPoints: any;
}): {
    alignment: {
        left: number;
        top: number;
        right: number;
        align: string;
    };
    visiblePart: number;
};
/**
 * Calculate optimal alignment of self region
 * using viewport boundaries. Try to position
 * using body boundaries if the region
 * is fully hidden in the viewport
 */
export declare function getOptimalAlignment({ targetRegion, selfRegion, ignoreScrollOffsets, alignPoints, getViewportRegion, getDocumentRegion, }: {
    targetRegion: any;
    selfRegion: any;
    ignoreScrollOffsets: any;
    alignPoints: any;
    getViewportRegion?: typeof getDefaultViewportRegion;
    getDocumentRegion?: typeof getDefaultDocumentRegion;
}): {
    alignment: {
        left: number;
        top: number;
        right: number;
        align: string;
    };
    visiblePart: number;
};
export {};
