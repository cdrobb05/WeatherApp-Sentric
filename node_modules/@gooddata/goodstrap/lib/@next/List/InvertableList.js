"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports["default"] = exports.InvertableList = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _assertThisInitialized2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/assertThisInitialized"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _classnames = _interopRequireDefault(require("classnames"));

var _keyBy = _interopRequireDefault(require("lodash/keyBy"));

var _values = _interopRequireDefault(require("lodash/values"));

var _take = _interopRequireDefault(require("lodash/take"));

var _has = _interopRequireDefault(require("lodash/has"));

var _Guid = require("../../core/Guid");

var _Input = _interopRequireDefault(require("../../Form/Input"));

var _MultiSelectList = require("./MultiSelectList");

var _Message = _interopRequireDefault(require("../../Messages/Message"));

// (C) 2007-2020 GoodData Corporation
// @ts-ignore
// @ts-ignore
var NoItemsFound = function NoItemsFound() {
  return _react["default"].createElement("div", {
    className: "gd-list-noResults"
  }, _react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "gs.list.noItemsFound"
  }));
};

var LoadingMessage = function LoadingMessage() {
  return _react["default"].createElement("div", null, "...");
};

var LimitHitWarning = function LimitHitWarning(_ref) {
  var limit = _ref.limit,
      bounce = _ref.bounce;
  var classes = (0, _classnames["default"])("gd-list-limitExceeded", {
    "animation-fadeIn": bounce
  });
  return _react["default"].createElement(_Message["default"], {
    type: "warning",
    className: classes
  }, _react["default"].createElement(_reactIntl.FormattedMessage, {
    id: "gs.list.limitExceeded",
    values: {
      limit: limit
    }
  }));
};

var InvertableList = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(InvertableList, _Component);

  function InvertableList(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, InvertableList);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(InvertableList).call(this, props));

    _this.onSelect = function (item) {
      var newSelection = _this.toggleItemInSelection(item);

      if (newSelection.length <= _this.props.maxSelectionSize) {
        _this.notifyUpstreamOfSelectionChange(newSelection);
      }

      if (newSelection.length >= _this.props.maxSelectionSize) {
        // Flash the limit exceeded info
        _this.setState({
          notifyLimitHit: true
        }); // remove the class that causes flashing animation


        setTimeout(function () {
          _this.setState({
            notifyLimitHit: false
          });
        }, 1000);
      }
    };

    _this.onSelectAll = function () {
      if (_this.props.searchString) {
        if (_this.props.isInverted) {
          _this.shrinkSelection();
        } else {
          _this.growSelection();
        }
      } else {
        _this.props.onSelect([], true);
      }
    };

    _this.onSelectNone = function () {
      if (_this.props.searchString) {
        if (_this.props.isInverted) {
          _this.growSelection();
        } else {
          _this.shrinkSelection();
        }
      } else {
        _this.props.onSelect([], false);
      }
    };

    _this.onSelectOnly = function (item) {
      _this.props.onSelect([item], false);
    };
    /**
     * Remove selected visible items from selection.
     */


    _this.shrinkSelection = function () {
      var _this$props = _this.props,
          items = _this$props.items,
          selectedItems = _this$props.selectedItems;

      var visibleSelection = _this.intersectItems(items, selectedItems);

      var newSelection = _this.subtractItems(selectedItems, visibleSelection);

      _this.notifyUpstreamOfSelectionChange(newSelection);
    };

    _this.intersectItems = function (items, otherItems) {
      var otherItemsMap = _this.indexByKey(otherItems);

      return items.filter(function (item) {
        var itemKey = _this.props.getItemKey(item);

        return !!otherItemsMap[itemKey];
      });
    };

    _this.subtractItems = function (items, otherItems) {
      var otherItemsMap = _this.indexByKey(otherItems);

      return items.filter(function (item) {
        var itemKey = _this.props.getItemKey(item);

        return !otherItemsMap[itemKey];
      });
    };

    _this.indexByKey = function () {
      var items = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      return (0, _keyBy["default"])(items, _this.props.getItemKey);
    };

    _this.toggleItemInSelection = function (item) {
      var selectionMap = _this.indexByKey(_this.props.selectedItems);

      var itemKey = _this.props.getItemKey(item);

      if (selectionMap[itemKey]) {
        delete selectionMap[itemKey];
      } else {
        selectionMap[itemKey] = item;
      }

      return (0, _values["default"])(selectionMap);
    };
    /**
     * Add unselected visible items to the selection until selection size limit is reached.
     */


    _this.growSelection = function () {
      var _this$props2 = _this.props,
          maxSelectionSize = _this$props2.maxSelectionSize,
          items = _this$props2.items,
          selectedItems = _this$props2.selectedItems;
      var selectionSizeLeft = maxSelectionSize - selectedItems.length;

      var selectableItems = _this.subtractItems(items, selectedItems);

      var itemsToSelect = (0, _take["default"])(selectableItems, selectionSizeLeft);
      var newSelection = [].concat((0, _toConsumableArray2["default"])(selectedItems), (0, _toConsumableArray2["default"])(itemsToSelect));

      _this.notifyUpstreamOfSelectionChange(newSelection);
    };
    /**
     * If change in selection happens to select all or unselect all items it is converted
     * to the respective empty selectionj.
     */


    _this.notifyUpstreamOfSelectionChange = function (newSelection) {
      var itemsCount = _this.props.itemsCount;
      var isInverted = _this.props.isInverted;
      var selection;
      var lastItemSelected = !isInverted && newSelection.length === itemsCount;

      if (lastItemSelected) {
        selection = [];
        isInverted = !isInverted;
      } else {
        selection = newSelection;
      }

      _this.props.onSelect(selection, isInverted);
    };

    _this.isItemChecked = function (selectionMap, item) {
      var key = _this.props.getItemKey(item);

      var itemInSelection = (0, _has["default"])(selectionMap, key); // in inverted mode selection lists unchecked items
      // in normal mode selection contains checked items

      return _this.props.isInverted ? !itemInSelection : itemInSelection;
    };

    _this.renderLimitHitWarning = function () {
      var _this$props3 = _this.props,
          maxSelectionSize = _this$props3.maxSelectionSize,
          selectedItems = _this$props3.selectedItems,
          renderLimitHit = _this$props3.renderLimitHit;
      var limitHit = selectedItems.length >= maxSelectionSize;

      if (limitHit) {
        return renderLimitHit({
          limit: maxSelectionSize,
          bounce: _this.state.notifyLimitHit
        });
      }

      return null;
    };

    _this.renderSearchField = function () {
      return _this.props.showSearchField ? _react["default"].createElement(_Input["default"], {
        autofocus: true,
        className: "gd-list-searchfield gd-flex-item-mobile",
        clearOnEsc: true,
        isSearch: true,
        isSmall: _this.props.smallSearch,
        onChange: _this.props.onSearch,
        placeholder: _this.props.searchPlaceholder,
        value: _this.props.searchString
      }) : null;
    };

    _this.renderList = function () {
      return _this.props.isLoading ? _this.renderLoading() : _react["default"].createElement("div", {
        className: "gd-flex-item-stretch-mobile gd-flex-row-container-mobile"
      }, _this.renderListOrNoItems(), _this.renderLimitHitWarning());
    };

    _this.renderListOrNoItems = function () {
      var _this$props4 = _this.props,
          items = _this$props4.items,
          searchString = _this$props4.searchString,
          filteredItemsCount = _this$props4.filteredItemsCount,
          height = _this$props4.height,
          selectedItems = _this$props4.selectedItems,
          onScrollEnd = _this$props4.onScrollEnd,
          tagName = _this$props4.tagName,
          _renderItem = _this$props4.renderItem,
          renderNoItems = _this$props4.renderNoItems;

      if (searchString && filteredItemsCount === 0) {
        return renderNoItems({
          height: height
        });
      }

      var selectionMap = _this.indexByKey(selectedItems);

      var isChecked = _this.isItemChecked.bind((0, _assertThisInitialized2["default"])(_this), selectionMap);

      return _react["default"].createElement(_MultiSelectList.MultiSelectList, {
        items: items,
        itemsCount: filteredItemsCount,
        renderItem: function renderItem(_ref2) {
          var isSelected = _ref2.isSelected,
              item = _ref2.item;
          return _renderItem({
            isSelected: isSelected,
            item: item,
            onSelect: _this.onSelect,
            onSelectOnly: _this.onSelectOnly
          });
        },
        isSelected: isChecked,
        isSearching: !!searchString.length,
        onSelectAll: _this.onSelectAll,
        onSelectNone: _this.onSelectNone,
        onScrollEnd: onScrollEnd,
        tagName: tagName
      });
    };

    _this.renderLoading = function () {
      var _this$props5 = _this.props,
          height = _this$props5.height,
          renderLoading = _this$props5.renderLoading;
      return renderLoading({
        height: height
      });
    };

    _this.state = {
      notifyLimitHit: false
    };
    return _this;
  }

  (0, _createClass2["default"])(InvertableList, [{
    key: "render",
    value: function render() {
      var _this$props6 = this.props,
          isMobile = _this$props6.isMobile,
          className = _this$props6.className;
      var classNames = (0, _classnames["default"])(className, {
        "gd-flex-item-stretch-mobile": isMobile,
        "gd-flex-row-container-mobile": isMobile
      });
      return _react["default"].createElement("div", {
        className: classNames
      }, this.renderSearchField(), this.renderList());
    }
  }]);
  return InvertableList;
}(_react.Component);

exports.InvertableList = InvertableList;
InvertableList.defaultProps = {
  getItemKey: _Guid.guidFor,
  isInverted: true,
  showSearchField: true,
  renderLimitHit: function renderLimitHit(_ref3) {
    var limit = _ref3.limit,
        bounce = _ref3.bounce;
    return _react["default"].createElement(LimitHitWarning, {
      limit: limit,
      bounce: bounce
    });
  },
  renderNoItems: function renderNoItems() {
    return _react["default"].createElement(NoItemsFound, null);
  },
  renderLoading: function renderLoading() {
    return _react["default"].createElement(LoadingMessage, null);
  }
};

var _default = (0, _reactIntl.injectIntl)(InvertableList);

exports["default"] = _default;