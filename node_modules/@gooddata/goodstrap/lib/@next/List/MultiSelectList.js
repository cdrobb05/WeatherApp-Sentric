"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.MultiSelectList = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = _interopRequireDefault(require("../../Button/Button"));

var _FlexDimensions = _interopRequireDefault(require("../../core/FlexDimensions"));

var _List = require("./List");

// (C) 2007-2020 GoodData Corporation
// eslint-disable-next-line import/no-unresolved, import/extensions
// @ts-ignore
var MultiSelectListCore = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(MultiSelectListCore, _Component);

  function MultiSelectListCore() {
    var _this;

    (0, _classCallCheck2["default"])(this, MultiSelectListCore);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(MultiSelectListCore).apply(this, arguments));

    _this.onActionCheckboxChange = function () {
      var _this$props = _this.props,
          onSelectAll = _this$props.onSelectAll,
          onSelectNone = _this$props.onSelectNone,
          isInverted = _this$props.isInverted,
          isSearching = _this$props.isSearching;

      if (_this.isAllSelected() || !isInverted && isSearching && _this.isIndefiniteSelection && !_this.isEmpty()) {
        return onSelectNone();
      }

      return onSelectAll();
    };

    _this.getSelectionString = function (selection) {
      var intl = _this.props.intl;

      if (!selection.length) {
        return "";
      }

      return selection.map(function (item) {
        if (Object.prototype.hasOwnProperty.call(item, "available") && !item.available) {
          return intl.formatMessage({
            id: "gs.list.notAvailableAbbreviation"
          });
        }

        return item.title || "(".concat(intl.formatMessage({
          id: "empty_value"
        }), ")");
      }).join(", ");
    };

    _this.isEmpty = function () {
      var _this$props2 = _this.props,
          selectedItems = _this$props2.selectedItems,
          itemsCount = _this$props2.itemsCount,
          isInverted = _this$props2.isInverted,
          isSearching = _this$props2.isSearching,
          items = _this$props2.items,
          isSelected = _this$props2.isSelected;

      if (selectedItems.length === 0) {
        return !isInverted;
      }

      if (isSearching) {
        return items.every(function (item) {
          return !isSelected(item);
        });
      }

      return selectedItems.length === 0 && !isInverted || selectedItems.length === itemsCount && isInverted;
    };

    _this.isIndefiniteSelection = function () {
      var _this$props3 = _this.props,
          selectedItems = _this$props3.selectedItems,
          isSearching = _this$props3.isSearching,
          items = _this$props3.items,
          isSelected = _this$props3.isSelected,
          filteredItemsCount = _this$props3.filteredItemsCount;

      if (selectedItems.length === 0) {
        return false;
      }

      if (isSearching) {
        var _selectedItems = items.filter(function (item) {
          return isSelected(item);
        });

        var selectedItemsCount = _selectedItems.length;
        return selectedItemsCount !== 0 && selectedItemsCount !== filteredItemsCount;
      }

      return true;
    };

    _this.isAllSelected = function () {
      var _this$props4 = _this.props,
          itemsCount = _this$props4.itemsCount,
          isInverted = _this$props4.isInverted,
          isSearching = _this$props4.isSearching,
          items = _this$props4.items,
          isSelected = _this$props4.isSelected,
          selectedItems = _this$props4.selectedItems;

      if (isSearching) {
        var selectedItemsCount = items.filter(function (item) {
          return isSelected(item);
        }).length;
        var totalItemsCount = items.filter(function (item) {
          return item !== null;
        }).length;
        return selectedItemsCount === totalItemsCount;
      }

      return isInverted ? selectedItems.length === 0 : selectedItems.length === itemsCount;
    };

    _this.renderSearchResultsLength = function () {
      var _this$props5 = _this.props,
          itemsCount = _this$props5.itemsCount,
          isSearching = _this$props5.isSearching,
          intl = _this$props5.intl;

      if (isSearching && itemsCount > 0) {
        return _react["default"].createElement("span", {
          className: "gd-list-actions-selection-size s-list-search-selection-size"
        }, intl.formatMessage({
          id: "gs.list.searchResults"
        }), " (", itemsCount, ")");
      }

      return null;
    };

    _this.renderActions = function () {
      var _this$props6 = _this.props,
          selectAllCheckbox = _this$props6.selectAllCheckbox,
          intl = _this$props6.intl;

      if (selectAllCheckbox) {
        var checkboxClasses = (0, _classnames["default"])("input-checkbox", "gd-checkbox-selection", {
          "checkbox-indefinite": _this.isIndefiniteSelection()
        });
        var labelClasses = (0, _classnames["default"])("input-checkbox-label", "s-select-all-checkbox");

        var checkbox = _react["default"].createElement("label", {
          className: labelClasses
        }, _react["default"].createElement("input", {
          readOnly: true,
          type: "checkbox",
          className: checkboxClasses,
          checked: !_this.isEmpty(),
          onChange: _this.onActionCheckboxChange
        }), _react["default"].createElement("span", {
          className: "input-label-text"
        }, intl.formatMessage({
          id: "gs.list.all"
        })));

        return _react["default"].createElement("div", {
          className: "gd-list-actions gd-list-actions-invertable"
        }, checkbox, _this.renderSearchResultsLength());
      }

      return _react["default"].createElement("div", {
        className: "gd-list-actions"
      }, _react["default"].createElement(_Button["default"], {
        className: "gd-button-link",
        tagName: "a",
        onClick: _this.props.onSelectAll,
        value: intl.formatMessage({
          id: "gs.list.selectAll"
        })
      }), _react["default"].createElement(_Button["default"], {
        className: "gd-button-link",
        tagName: "a",
        onClick: _this.props.onSelectNone,
        value: intl.formatMessage({
          id: "gs.list.clear"
        })
      }));
    };

    _this.renderStatusBar = function () {
      var _this$props7 = _this.props,
          selectAllCheckbox = _this$props7.selectAllCheckbox,
          selectedItems = _this$props7.selectedItems,
          isInverted = _this$props7.isInverted,
          tagName = _this$props7.tagName,
          intl = _this$props7.intl;

      if (!selectAllCheckbox) {
        return null;
      }

      var attributeName = _react["default"].createElement("span", {
        className: "gd-shortened-text gd-attribute-name s-dropdown-attribute-filter-name",
        title: tagName
      }, tagName);

      var selectionItemsStr = _this.getSelectionString(selectedItems);

      var isSelectionEmpty = selectedItems.length === 0;
      var invertedInfo = !isSelectionEmpty && isInverted ? _react["default"].createElement("span", null, _react["default"].createElement("b", null, intl.formatMessage({
        id: "gs.list.all"
      })), "\xA0", intl.formatMessage({
        id: "gs.list.except"
      }), "\xA0") : null;
      var selectionList = !isSelectionEmpty ? _react["default"].createElement("span", {
        className: "gd-shortened-text gd-selection-list s-dropdown-attribute-selection-list",
        title: selectionItemsStr
      }, "".concat(selectionItemsStr)) : null;
      var selectionLengthInfo = selectedItems.length > 1 ? "\xA0(".concat(selectedItems.length, ")") : null;

      var is = _react["default"].createElement("span", null, "\xA0", intl.formatMessage({
        id: "gs.list.is"
      }), "\xA0");

      var allOrNone = isSelectionEmpty && (!isInverted ? "(".concat(intl.formatMessage({
        id: "gs.filterLabel.none"
      }), ")") : _react["default"].createElement("b", null, intl.formatMessage({
        id: "gs.list.all"
      })));
      return _react["default"].createElement("div", {
        className: "gd-list-status-bar s-list-status-bar"
      }, attributeName, is, allOrNone, invertedInfo, selectionList, selectionLengthInfo);
    };

    return _this;
  }

  (0, _createClass2["default"])(MultiSelectListCore, [{
    key: "render",
    value: function render() {
      var _this$props8 = this.props,
          isMobile = _this$props8.isMobile,
          width = _this$props8.width,
          height = _this$props8.height,
          items = _this$props8.items,
          itemHeight = _this$props8.itemHeight,
          itemsCount = _this$props8.itemsCount,
          onScrollEnd = _this$props8.onScrollEnd,
          _renderItem = _this$props8.renderItem,
          selectedItems = _this$props8.selectedItems;
      return _react["default"].createElement("div", {
        className: "gd-flex-item-stretch-mobile gd-flex-row-container-mobile"
      }, this.renderActions(), _react["default"].createElement(_FlexDimensions["default"], {
        measureHeight: isMobile,
        measureWidth: isMobile || !width,
        className: "gd-flex-item-stretch-mobile"
      }, _react["default"].createElement(_List.List, {
        className: "is-multiselect",
        width: width,
        height: height,
        items: items,
        itemHeight: itemHeight,
        itemsCount: itemsCount,
        renderItem: function renderItem(_ref) {
          var item = _ref.item;
          return _renderItem({
            item: item,
            isSelected: selectedItems.some(function (_item) {
              return _item === item;
            })
          });
        },
        onScrollEnd: onScrollEnd,
        compensateBorder: !isMobile
      })), this.renderStatusBar());
    }
  }]);
  return MultiSelectListCore;
}(_react.Component);

var MultiSelectList = (0, _reactIntl.injectIntl)(MultiSelectListCore);
exports.MultiSelectList = MultiSelectList;