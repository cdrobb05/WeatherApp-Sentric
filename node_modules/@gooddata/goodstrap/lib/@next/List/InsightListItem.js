"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.InsightListItem = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _reactIntl = require("react-intl");

var _jsUtils = require("@gooddata/js-utils");

var _date = require("../../data/date");

var _ShortenedText = _interopRequireDefault(require("../../core/ShortenedText"));

var _Button = _interopRequireDefault(require("../../Button/Button"));

var _InsightListItemDate = require("./InsightListItemDate");

// (C) 2007-2020 GoodData Corporation
// @ts-ignore
// eslint-disable-next-line import/no-unresolved, import/extensions
var VISUALIZATION_TYPE_UNKNOWN = "unknown";
var WIDGET_TYPE_KPI = "kpi";
var visualizationIconWidthAndPadding = 42;
var tooltipAlignPoints = [{
  align: "cr cl"
}, {
  align: "cl cr",
  offset: {
    x: -visualizationIconWidthAndPadding,
    y: 0
  }
}];

var InsightListItem = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(InsightListItem, _Component);

  function InsightListItem() {
    var _this;

    (0, _classCallCheck2["default"])(this, InsightListItem);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(InsightListItem).apply(this, arguments));
    _this.shortenedTextRef = (0, _react.createRef)();

    _this.handleClickDelete = function (e) {
      e.stopPropagation();
      var onDelete = _this.props.onDelete;

      if (onDelete) {
        _this.props.onDelete();
      }
    };

    _this.renderLock = function () {
      if (_this.props.isLocked) {
        return _react["default"].createElement("i", {
          className: "icon-lock"
        });
      }

      return false;
    };

    _this.renderUpdatedDateTime = function (date) {
      var type = _this.props.type;

      if (!date) {
        return false;
      }

      if (type === WIDGET_TYPE_KPI) {
        return _react["default"].createElement("span", null);
      }

      return _react["default"].createElement(_InsightListItemDate.InsightListItemDate, {
        config: (0, _date.getDateTimeConfig)(date, {})
      });
    };

    _this.renderActions = function () {
      var onDelete = _this.props.onDelete;
      return onDelete && _react["default"].createElement("div", {
        className: "gd-visualizations-list-item-actions"
      }, _react["default"].createElement(_Button["default"], {
        className: "gd-button-link gd-button-icon-only gd-button-small icon-cross gd-visualizations-list-item-action-delete s-delete-item",
        onClick: _this.handleClickDelete
      }));
    };

    return _this;
  }

  (0, _createClass2["default"])(InsightListItem, [{
    key: "render",
    value: function render() {
      var _this$props = this.props,
          title = _this$props.title,
          updated = _this$props.updated,
          _this$props$type = _this$props.type,
          type = _this$props$type === void 0 ? VISUALIZATION_TYPE_UNKNOWN : _this$props$type,
          isSelected = _this$props.isSelected,
          isLoading = _this$props.isLoading,
          onClick = _this$props.onClick;
      var iconClassName = (0, _classnames["default"])("gd-vis-type", "gd-vis-type-".concat(type));
      var visualizationListItemClassname = (0, _classnames["default"])("gd-visualizations-list-item", "s-".concat(_jsUtils.string.simplifyText(title)), {
        "is-selected": isSelected
      });
      return _react["default"].createElement("div", {
        className: visualizationListItemClassname,
        onClick: onClick
      }, _react["default"].createElement("div", {
        className: iconClassName
      }), _react["default"].createElement("div", {
        className: "gd-visualizations-list-item-content"
      }, _react["default"].createElement("div", {
        className: "gd-visualizations-list-item-content-name"
      }, this.renderLock(), _react["default"].createElement(_ShortenedText["default"], {
        ref: this.shortenedTextRef,
        tooltipAlignPoints: tooltipAlignPoints
      }, isLoading ? _react["default"].createElement(_reactIntl.FormattedMessage, {
        id: "gs.visualizationsList.loading"
      }) : title)), _react["default"].createElement("div", {
        className: "gd-visualizations-list-item-content-date"
      }, this.renderUpdatedDateTime(updated))), this.renderActions());
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate(prevProps) {
      if (prevProps.width !== this.props.width && this.shortenedTextRef.current) {
        this.shortenedTextRef.current.recomputeShortening();
      }
    }
  }]);
  return InsightListItem;
}(_react.Component);

exports.InsightListItem = InsightListItem;