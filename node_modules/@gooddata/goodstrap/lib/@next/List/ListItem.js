"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.SingleSelectListItem = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _jsUtils = require("@gooddata/js-utils");

var _BubbleHoverTrigger = _interopRequireDefault(require("../../Bubble/BubbleHoverTrigger"));

var _Bubble = _interopRequireDefault(require("../../Bubble/Bubble"));

// (C) 2007-2020 GoodData Corporation
// @ts-ignore
// @ts-ignore
var BUBBLE_OFFSET_X = 16;

var SingleSelectListItem = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(SingleSelectListItem, _Component);

  function SingleSelectListItem(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, SingleSelectListItem);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(SingleSelectListItem).call(this, props));
    _this.titleRef = (0, _react.createRef)();

    _this.getClassNames = function () {
      var _this$props = _this.props,
          title = _this$props.title,
          isSelected = _this$props.isSelected;
      var generatedSeleniumClass = "s-".concat(_jsUtils.string.simplifyText(title));
      return (0, _classnames["default"])("gd-list-item", generatedSeleniumClass, {
        "is-selected": isSelected
      });
    };

    _this.renderTitle = function () {
      var title = _this.props.title;

      var titleElement = _react["default"].createElement("span", {
        ref: _this.titleRef
      }, title);

      if (_this.state.isOverflowed) {
        return _react["default"].createElement(_BubbleHoverTrigger["default"], null, titleElement, _react["default"].createElement(_Bubble["default"], {
          className: "bubble-primary",
          alignPoints: [{
            align: "cr cl"
          }],
          arrowOffsets: {
            "cr cl": [BUBBLE_OFFSET_X, 0]
          }
        }, title));
      }

      return titleElement;
    };

    _this.renderIcon = function (icon) {
      if (icon) {
        var iconClasses = (0, _classnames["default"])("gd-list-icon", icon);
        return _react["default"].createElement("span", {
          className: iconClasses
        });
      }

      return null;
    };

    _this.state = {
      isOverflowed: false
    };
    return _this;
  }

  (0, _createClass2["default"])(SingleSelectListItem, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          icon = _this$props2.icon,
          onClick = _this$props2.onClick,
          onMouseOver = _this$props2.onMouseOver,
          onMouseOut = _this$props2.onMouseOut;
      return _react["default"].createElement("div", {
        className: this.getClassNames(),
        onClick: onClick,
        onMouseOver: onMouseOver,
        onMouseOut: onMouseOut
      }, this.renderIcon(icon), this.renderTitle());
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      if (this.titleRef.current) {
        // Checks if ellipsis has been applicated on title span
        var isOverflowed = this.titleRef.current.offsetWidth < this.titleRef.current.scrollWidth;

        if (isOverflowed) {
          // eslint-disable-next-line react/no-did-mount-set-state
          this.setState({
            isOverflowed: isOverflowed
          });
        }
      }
    }
  }]);
  return SingleSelectListItem;
}(_react.Component);

exports.SingleSelectListItem = SingleSelectListItem;