"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.List = exports.DEFAULT_ITEM_HEIGHT = exports.MAX_VISIBLE_ITEMS_COUNT = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _fixedDataTable = require("fixed-data-table-2");

var _classnames = _interopRequireDefault(require("classnames"));

// (C) 2007-2020 GoodData Corporation
var preventDefault = function preventDefault(e) {
  return e.preventDefault();
};

function isTouchDevice() {
  return "ontouchstart" in document.documentElement;
}

var BORDER_HEIGHT = 1;
var MAX_VISIBLE_ITEMS_COUNT = 10;
exports.MAX_VISIBLE_ITEMS_COUNT = MAX_VISIBLE_ITEMS_COUNT;
var DEFAULT_ITEM_HEIGHT = 28;
exports.DEFAULT_ITEM_HEIGHT = DEFAULT_ITEM_HEIGHT;
var HALF_ROW = 0.5;

var List = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(List, _Component);

  function List() {
    var _this;

    (0, _classCallCheck2["default"])(this, List);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(List).apply(this, arguments));

    _this.disablePageScrolling = function () {
      document.body.addEventListener("wheel", preventDefault, {
        passive: false
      });
    };

    _this.enablePageScrolling = function () {
      document.body.removeEventListener("wheel", preventDefault);
    };

    return _this;
  }

  (0, _createClass2["default"])(List, [{
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      this.enablePageScrolling();
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props = this.props,
          _this$props$className = _this$props.className,
          className = _this$props$className === void 0 ? "" : _this$props$className,
          _this$props$width = _this$props.width,
          width = _this$props$width === void 0 ? 200 : _this$props$width,
          height = _this$props.height,
          _this$props$compensat = _this$props.compensateBorder,
          compensateBorder = _this$props$compensat === void 0 ? true : _this$props$compensat,
          _this$props$items = _this$props.items,
          items = _this$props$items === void 0 ? [] : _this$props$items,
          _this$props$itemsCoun = _this$props.itemsCount,
          itemsCount = _this$props$itemsCoun === void 0 ? items.length : _this$props$itemsCoun,
          _this$props$itemHeigh = _this$props.itemHeight,
          itemHeight = _this$props$itemHeigh === void 0 ? DEFAULT_ITEM_HEIGHT : _this$props$itemHeigh,
          _this$props$itemHeigh2 = _this$props.itemHeightGetter,
          itemHeightGetter = _this$props$itemHeigh2 === void 0 ? null : _this$props$itemHeigh2,
          _this$props$maxVisibl = _this$props.maxVisibleItemsCount,
          maxVisibleItemsCount = _this$props$maxVisibl === void 0 ? MAX_VISIBLE_ITEMS_COUNT : _this$props$maxVisibl,
          renderItem = _this$props.renderItem,
          _onScrollStart = _this$props.onScrollStart,
          _onScrollEnd = _this$props.onScrollEnd;
      var currentItemsCount = itemsCount > maxVisibleItemsCount ? maxVisibleItemsCount + HALF_ROW : itemsCount;
      var listHeight = height || currentItemsCount * itemHeight; // tslint:disable-next-line max-line-length
      // compensates for https://github.com/facebook/fixed-data-table/blob/5373535d98b08b270edd84d7ce12833a4478c6b6/src/FixedDataTableNew.react.js#L872

      var compensatedListHeight = compensateBorder ? listHeight + BORDER_HEIGHT * 2 : listHeight;
      var classNames = (0, _classnames["default"])("gd-list", className);

      var getScrollRange = function getScrollRange(scrollY) {
        // vertical scroll position returned by fixed-data-table
        // is converted to index of first visible item
        var rowIndex = Math.floor(scrollY / itemHeight);
        var visibleRange = Math.ceil(listHeight / itemHeight);
        return [rowIndex, rowIndex + visibleRange];
      };

      return _react["default"].createElement("div", {
        className: classNames,
        onMouseOver: this.disablePageScrolling,
        onMouseOut: this.enablePageScrolling,
        style: {
          width: width
        }
      }, _react["default"].createElement(_fixedDataTable.Table, {
        width: width,
        height: compensatedListHeight,
        headerHeight: 0,
        rowHeight: itemHeight,
        rowHeightGetter: itemHeightGetter,
        rowsCount: itemsCount,
        onScrollStart: function onScrollStart(_x, y) {
          if (_onScrollStart) {
            var _getScrollRange = getScrollRange(y),
                _getScrollRange2 = (0, _slicedToArray2["default"])(_getScrollRange, 2),
                startIndex = _getScrollRange2[0],
                endIndex = _getScrollRange2[1];

            _onScrollStart(startIndex, endIndex);
          }
        },
        onScrollEnd: function onScrollEnd(_x, y) {
          if (_onScrollEnd) {
            var _getScrollRange3 = getScrollRange(y),
                _getScrollRange4 = (0, _slicedToArray2["default"])(_getScrollRange3, 2),
                startIndex = _getScrollRange4[0],
                endIndex = _getScrollRange4[1];

            _onScrollEnd(startIndex, endIndex);
          }
        },
        touchScrollEnabled: isTouchDevice()
      }, _react["default"].createElement(_fixedDataTable.Column, {
        flexGrow: 1,
        width: 1,
        cell: function cell(_ref) {
          var columnKey = _ref.columnKey,
              height = _ref.height,
              width = _ref.width,
              rowIndex = _ref.rowIndex;
          var item = items[rowIndex];
          return _react["default"].createElement(_fixedDataTable.Cell, {
            width: width,
            height: height,
            rowIndex: rowIndex,
            columnKey: columnKey
          }, renderItem({
            rowIndex: rowIndex,
            item: item,
            width: width,
            height: height
          }));
        }
      })));
    }
  }]);
  return List;
}(_react.Component);

exports.List = List;