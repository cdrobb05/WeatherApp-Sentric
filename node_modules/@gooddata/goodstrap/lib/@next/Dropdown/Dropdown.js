"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.Dropdown = void 0;

var _assign = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/assign"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _react = _interopRequireWildcard(require("react"));

var _reactResponsive = _interopRequireDefault(require("react-responsive"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _MediaQueries = require("../../core/MediaQueries");

var _FullScreenOverlay = _interopRequireDefault(require("../../core/FullScreenOverlay"));

var _Overlay = _interopRequireDefault(require("../Overlay"));

// (C) 2007-2020 GoodData Corporation
// @ts-ignore
var SCROLLBAR_SELECTOR = ".fixedDataTableLayout_main .ScrollbarLayout_main";
var MOBILE_DROPDOWN_ALIGN_POINTS = [{
  align: "tl tl"
}];
var DEFAULT_MEDIA_QUERY_VALUES = {
  type: "screen",
  width: window.innerWidth,
  height: window.innerHeight
};
/**
 * Element.matches is only supported via prefix in IE11 and Edge.
 */

function matches(element, selector) {
  var matchesImpl = element.matches || element.msMatchesSelector;
  return matchesImpl.call(element, selector);
}
/**
 * Prevent the overlay from closing when scrolling and finishing
 * with a cursor position outside of the overlay.
 */


function shouldCloseOnClick(e) {
  var activeElement = document.activeElement || e.srcElement;

  if (!activeElement) {
    return false;
  }

  var hasScrolled = matches(activeElement, SCROLLBAR_SELECTOR);
  return !hasScrolled;
}

var Dropdown = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2["default"])(Dropdown, _PureComponent);

  function Dropdown(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, Dropdown);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(Dropdown).call(this, props));
    _this.dropdownOverlayRef = (0, _react.createRef)();
    _this.dropdownButtonRef = (0, _react.createRef)();

    _this.toggleDropdown = function () {
      _this.setState(function (state) {
        return (0, _assign["default"])({}, state, {
          isOpen: !state.isOpen
        });
      }, _this.onOpenStateChanged);
    };

    _this.closeDropdown = function () {
      _this.setState(function (state) {
        return (0, _assign["default"])({}, state, {
          isOpen: false
        });
      }, _this.onOpenStateChanged);
    };

    _this.openDropdown = function () {
      _this.setState(function (state) {
        return (0, _assign["default"])({}, state, {
          isOpen: true
        });
      }, _this.onOpenStateChanged);
    };

    _this.onOpenStateChanged = function () {
      var onOpenStateChanged = _this.props.onOpenStateChanged;

      if (onOpenStateChanged) {
        onOpenStateChanged(_this.state.isOpen);
      }
    };

    _this.state = {
      isOpen: !!_this.props.openOnInit,
      dropdownId: (0, _uniqueId["default"])("dropdown-")
    };
    return _this;
  }

  (0, _createClass2["default"])(Dropdown, [{
    key: "render",
    value: function render() {
      var _this2 = this;

      var _this$props = this.props,
          closeOnParentScroll = _this$props.closeOnParentScroll,
          closeOnMouseDrag = _this$props.closeOnMouseDrag,
          _this$props$closeOnOu = _this$props.closeOnOutsideClick,
          closeOnOutsideClick = _this$props$closeOnOu === void 0 ? true : _this$props$closeOnOu,
          overlayPositionType = _this$props.overlayPositionType,
          _this$props$alignPoin = _this$props.alignPoints,
          alignPoints = _this$props$alignPoin === void 0 ? [{
        align: "bl tl"
      }] : _this$props$alignPoin,
          overlayZIndex = _this$props.overlayZIndex,
          _this$props$ignoreCli = _this$props.ignoreClicksOnByClass,
          ignoreClicksOnByClass = _this$props$ignoreCli === void 0 ? [] : _this$props$ignoreCli,
          renderBody = _this$props.renderBody,
          renderButton = _this$props.renderButton;

      var _renderButton = function _renderButton(renderProps) {
        return _react["default"].createElement("div", {
          ref: _this2.dropdownButtonRef,
          className: _this2.state.dropdownId
        }, renderButton(renderProps));
      };

      var renderButtonProps = {
        isOpen: this.state.isOpen,
        openDropdown: this.openDropdown,
        closeDropdown: this.closeDropdown,
        toggleDropdown: this.toggleDropdown
      };
      return _react["default"].createElement("div", {
        className: this.props.className
      }, _renderButton((0, _assign["default"])({}, renderButtonProps, {
        isMobile: false
      })), this.state.isOpen && _react["default"].createElement(_reactResponsive["default"], {
        query: _MediaQueries.IS_MOBILE_DEVICE,
        values: DEFAULT_MEDIA_QUERY_VALUES
      }, function (isMobile) {
        if (isMobile) {
          return _react["default"].createElement(_FullScreenOverlay["default"], {
            alignTo: "body",
            alignPoints: MOBILE_DROPDOWN_ALIGN_POINTS
          }, _react["default"].createElement("div", {
            className: "gd-mobile-dropdown-overlay overlay gd-flex-row-container"
          }, _react["default"].createElement("div", {
            className: "gd-mobile-dropdown-header gd-flex-item"
          }, _renderButton((0, _assign["default"])({}, renderButtonProps, {
            isMobile: true
          }))), _react["default"].createElement("div", {
            className: "gd-mobile-dropdown-content gd-flex-item-stretch gd-flex-row-container"
          }, renderBody({
            closeDropdown: _this2.closeDropdown,
            isMobile: true
          }))));
        }

        return _react["default"].createElement(_Overlay["default"], {
          ref: _this2.dropdownOverlayRef,
          alignTo: ".".concat(_this2.state.dropdownId),
          positionType: overlayPositionType,
          alignPoints: alignPoints,
          closeOnOutsideClick: closeOnOutsideClick,
          closeOnMouseDrag: closeOnMouseDrag,
          closeOnParentScroll: closeOnParentScroll,
          shouldCloseOnClick: shouldCloseOnClick,
          ignoreClicksOnByClass: ignoreClicksOnByClass,
          onClose: _this2.closeDropdown,
          zIndex: overlayZIndex
        }, _react["default"].createElement("div", {
          className: "overlay dropdown-body"
        }, renderBody({
          closeDropdown: _this2.closeDropdown,
          isMobile: false
        })));
      }));
    }
  }]);
  return Dropdown;
}(_react.PureComponent);

exports.Dropdown = Dropdown;