"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getRecommendedDateDataset = getRecommendedDateDataset;
exports.transform2Dropdown = transform2Dropdown;
exports.preselectDateDataset = preselectDateDataset;
exports.sortDateDatasets = sortDateDatasets;
exports.unrelatedHeader = exports.relatedHeader = exports.otherHeader = exports.recommendedHeader = exports.isDateDatasetHeader = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _keys = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/object/keys"));

var _groupBy = _interopRequireDefault(require("lodash/groupBy"));

var _takeWhile = _interopRequireDefault(require("lodash/takeWhile"));

var _first = _interopRequireDefault(require("lodash/first"));

// (C) 2007-2020 GoodData Corporation
var isDateDatasetHeader = function isDateDatasetHeader(obj) {
  return obj && obj.type === "header";
};

exports.isDateDatasetHeader = isDateDatasetHeader;

function hasSameRelevance(dateDatasets) {
  var relevanceCount = (0, _keys["default"])((0, _groupBy["default"])(dateDatasets, "relevance")).length;
  return relevanceCount === 1;
}

var relevanceComparator = function relevanceComparator(a, b) {
  return b.relevance - a.relevance;
}; // descending sort


var titleComparator = function titleComparator(a, b) {
  return a.title.localeCompare(b.title);
};

function sortByTitle(dateDatasets) {
  return dateDatasets.slice().sort(titleComparator);
}

function sortByRelevanceAndTitle(dateDatasets) {
  return dateDatasets.slice().sort(function (a, b) {
    if (a.relevance === b.relevance) {
      return titleComparator(a, b);
    }

    return relevanceComparator(a, b);
  });
}

var MAX_RECOMMENDED_ITEMS = 3;
var recommendedHeader = {
  title: "gs.date.date-dataset.recommended",
  type: "header"
};
exports.recommendedHeader = recommendedHeader;
var otherHeader = {
  title: "gs.date.date-dataset.other",
  type: "header"
};
exports.otherHeader = otherHeader;
var relatedHeader = {
  title: "gs.date.date-dataset.related",
  type: "header"
};
exports.relatedHeader = relatedHeader;
var unrelatedHeader = {
  title: "gs.date.date-dataset.unrelated",
  type: "header"
};
exports.unrelatedHeader = unrelatedHeader;

function addUnrelatedDateDataset(dateDatasets, unrelatedDateDataset) {
  if (hasSameRelevance(dateDatasets)) {
    return [unrelatedHeader, unrelatedDateDataset, relatedHeader].concat((0, _toConsumableArray2["default"])(dateDatasets));
  }

  return [unrelatedHeader, unrelatedDateDataset].concat((0, _toConsumableArray2["default"])(dateDatasets));
}

function getRecommendedDateDataset(items) {
  if (hasSameRelevance(items)) {
    return null;
  }

  return (0, _first["default"])(sortByRelevanceAndTitle(items));
}

function transform2Dropdown(dateDatasets) {
  if (!dateDatasets.length) {
    return [];
  }

  var items = sortByRelevanceAndTitle(dateDatasets);

  if (!hasSameRelevance(items)) {
    var nonZeroRelevanceItemsCount = (0, _takeWhile["default"])(items, function (i) {
      return i.relevance > 0;
    }).length;
    var othersIndex = Math.min(MAX_RECOMMENDED_ITEMS, nonZeroRelevanceItemsCount);
    var recommendedItems = [recommendedHeader].concat((0, _toConsumableArray2["default"])(items.slice(0, othersIndex)));

    if (othersIndex < items.length) {
      return [].concat((0, _toConsumableArray2["default"])(recommendedItems), [otherHeader], (0, _toConsumableArray2["default"])(sortByTitle(items.slice(othersIndex))));
    }

    return recommendedItems;
  }

  return sortByTitle(items);
}

function preselectDateDataset(dateDatasets, recommendedDate) {
  var others = dateDatasets.filter(function (d) {
    return d.identifier !== recommendedDate.identifier;
  });

  if (others.length > 0) {
    var recommendedItems = [recommendedHeader, recommendedDate, otherHeader].concat((0, _toConsumableArray2["default"])(sortByTitle(others)));
    return recommendedItems;
  }

  return [recommendedDate];
}

function sortDateDatasets(dateDatasets) {
  var recommendedDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
  var unrelatedDate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
  var items = recommendedDate ? preselectDateDataset(dateDatasets, recommendedDate) : transform2Dropdown(dateDatasets);

  if (unrelatedDate) {
    items = addUnrelatedDateDataset(items, unrelatedDate);
  }

  return items;
}