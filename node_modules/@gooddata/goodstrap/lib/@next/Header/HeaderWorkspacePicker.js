"use strict";

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.HeaderWorkspacePicker = exports.CoreHeaderWorkspacePicker = void 0;

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireDefault(require("react"));

var _reactIntl = require("react-intl");

var _get = _interopRequireDefault(require("lodash/get"));

var _classnames = _interopRequireDefault(require("classnames"));

var _DropdownList = require("../Dropdown/DropdownList");

var _Dropdown = require("../Dropdown/Dropdown");

var _NoData = require("../NoData");

var _HeaderWorkspacePickerButton = require("./HeaderWorkspacePickerButton");

var _HeaderWorkspacePickerItem = require("./HeaderWorkspacePickerItem");

// (C) 2007-2020 GoodData Corporation
var renderProjectPickerFooter = function renderProjectPickerFooter(projectPickerFooter) {
  return function (closeDropdown) {
    return projectPickerFooter ? _react["default"].createElement("div", {
      className: "gd-header-project-picker-footer"
    }, _react["default"].createElement("span", {
      onClick: closeDropdown
    }, projectPickerFooter)) : false;
  };
};

var CoreHeaderWorkspacePicker = function CoreHeaderWorkspacePicker(_ref) {
  var intl = _ref.intl,
      isLoading = _ref.isLoading,
      workspaces = _ref.workspaces,
      selectedWorkspace = _ref.selectedWorkspace,
      totalWorkspacesCount = _ref.totalWorkspacesCount,
      searchString = _ref.searchString,
      showSearch = _ref.showSearch,
      onOpen = _ref.onOpen,
      onSelect = _ref.onSelect,
      onSearch = _ref.onSearch,
      onScrollEnd = _ref.onScrollEnd,
      projectPickerFooter = _ref.projectPickerFooter,
      className = _ref.className;
  var t = intl.formatMessage;
  var dropdownClassNames = (0, _classnames["default"])((0, _defineProperty2["default"])({
    "gd-header-project-wrapper": true,
    "gd-header-measure": true
  }, className, !!className));
  return _react["default"].createElement(_Dropdown.Dropdown, {
    className: dropdownClassNames,
    closeOnParentScroll: true,
    closeOnMouseDrag: true,
    onOpenStateChanged: function onOpenStateChanged(isOpen) {
      if (isOpen && onOpen) {
        onOpen();
      }
    },
    renderButton: function renderButton(_ref2) {
      var isOpen = _ref2.isOpen,
          toggleDropdown = _ref2.toggleDropdown;
      return _react["default"].createElement(_HeaderWorkspacePickerButton.HeaderWorkspacePickerButton, {
        title: selectedWorkspace && selectedWorkspace.title,
        isOpen: isOpen,
        onClick: toggleDropdown
      });
    },
    renderBody: function renderBody(_ref3) {
      var closeDropdown = _ref3.closeDropdown,
          isMobile = _ref3.isMobile;
      return _react["default"].createElement(_DropdownList.DropdownList, {
        footer: renderProjectPickerFooter(projectPickerFooter),
        closeDropdown: closeDropdown,
        className: "project-picker-dropdown",
        width: 350,
        isMobile: isMobile,
        showSearch: showSearch,
        searchString: searchString,
        items: workspaces,
        itemsCount: totalWorkspacesCount,
        isLoading: isLoading,
        onSearch: onSearch,
        searchFieldSize: "normal",
        searchPlaceholder: t({
          id: "gs.header.projectPicker.searchPlaceholder"
        }),
        renderNoData: function renderNoData(_ref4) {
          var hasNoMatchingData = _ref4.hasNoMatchingData;
          return _react["default"].createElement(_NoData.NoData, {
            className: "s-noMatchingProjects",
            noDataLabel: t({
              id: "gs.noData.noDataAvailable"
            }),
            notFoundLabel: t({
              id: "gs.header.projectPicker.noMatchingProjects"
            }),
            hasNoMatchingData: hasNoMatchingData
          });
        },
        renderItem: function renderItem(_ref5) {
          var item = _ref5.item;
          var title = (0, _get["default"])(item, "title");
          var isDemo = (0, _get["default"])(item, "isDemo");
          var isSelected = selectedWorkspace && item && selectedWorkspace.id === item.id;
          return _react["default"].createElement(_HeaderWorkspacePickerItem.HeaderWorkspacePickerItem, {
            title: title,
            isDemo: isDemo,
            isSelected: isSelected,
            isLoading: !item,
            onClick: function onClick() {
              if (item && onSelect) {
                onSelect(item);
                closeDropdown();
              }
            }
          });
        },
        onScrollEnd: onScrollEnd
      });
    }
  });
};

exports.CoreHeaderWorkspacePicker = CoreHeaderWorkspacePicker;
var HeaderWorkspacePicker = (0, _reactIntl.injectIntl)(CoreHeaderWorkspacePicker);
exports.HeaderWorkspacePicker = HeaderWorkspacePicker;