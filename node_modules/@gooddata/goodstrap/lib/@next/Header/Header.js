"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.Header = void 0;

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/slicedToArray"));

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/toConsumableArray"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _from = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/array/from"));

var _parseInt2 = _interopRequireDefault(require("@babel/runtime-corejs2/core-js/parse-int"));

var _react = _interopRequireWildcard(require("react"));

var _reactIntl = require("react-intl");

var _reactTransitionGroup = require("react-transition-group");

var _classnames = _interopRequireDefault(require("classnames"));

var _uniqueId = _interopRequireDefault(require("lodash/uniqueId"));

var _debounce = _interopRequireDefault(require("lodash/debounce"));

var _addCSS = _interopRequireDefault(require("../../core/addCSS"));

var _domUtilities = require("../../core/domUtilities");

var _Button = _interopRequireDefault(require("../../Button/Button"));

var _HeaderMenu = _interopRequireDefault(require("../../Header/HeaderMenu"));

var _HeaderAccount = _interopRequireDefault(require("../../Header/HeaderAccount"));

var _HeaderHelp = _interopRequireDefault(require("../../Header/HeaderHelp"));

var _Overlay = _interopRequireDefault(require("../Overlay"));

var _colors = require("./colors");

// (C) 2007-2020 GoodData Corporation
// @ts-ignore
// @ts-ignore
// @ts-ignore
function getOuterWidth(element) {
  var width = element.offsetWidth;

  var _getComputedStyle = getComputedStyle(element),
      marginLeft = _getComputedStyle.marginLeft,
      marginRight = _getComputedStyle.marginRight;

  return width + (0, _parseInt2["default"])(marginLeft, 10) + (0, _parseInt2["default"])(marginRight, 10);
}

function getWidthOfChildren(element) {
  var selector = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "> *";
  var SAFETY_PADDING = 10;
  return (0, _from["default"])(element.querySelectorAll(selector)).map(getOuterWidth).reduce(function (sum, childWidth) {
    return sum + childWidth;
  }, SAFETY_PADDING);
}

var HeaderCore = /*#__PURE__*/function (_Component) {
  (0, _inherits2["default"])(HeaderCore, _Component);

  function HeaderCore(props) {
    var _this;

    (0, _classCallCheck2["default"])(this, HeaderCore);
    _this = (0, _possibleConstructorReturn2["default"])(this, (0, _getPrototypeOf2["default"])(HeaderCore).call(this, props));
    _this.nodeRef = (0, _react.createRef)();
    _this.resizeHandler = (0, _debounce["default"])(function () {
      return _this.measure();
    }, 100);

    _this.getClassNames = function () {
      var _cx;

      return (0, _classnames["default"])((_cx = {
        "gd-header": true
      }, (0, _defineProperty2["default"])(_cx, _this.state.guid, true), (0, _defineProperty2["default"])(_cx, _this.props.className, !!_this.props.className), _cx));
    };

    _this.measureChildren = function () {
      var currentDOMNode = _this.nodeRef.current;
      var childrenWidth = getWidthOfChildren(currentDOMNode, ".gd-header-measure");

      _this.setState({
        childrenWidth: childrenWidth
      }, _this.measure);
    };

    _this.measure = function () {
      var currentDOMNode = _this.nodeRef.current;

      if (!currentDOMNode) {
        // ref is null because 'this.measure()' is called after 100ms 'componentWillUnmount' called,
        // which cleans the nodeRef
        return;
      }

      var currentWidth = currentDOMNode.clientWidth;
      var responsiveMode = currentWidth < _this.state.childrenWidth;

      if (_this.state.responsiveMode !== responsiveMode) {
        _this.setState({
          responsiveMode: responsiveMode,
          isOverlayMenuOpen: false,
          isHelpMenuOpen: false
        });
      }
    };

    _this.createStyles = function () {
      var guid = _this.state.guid;
      var _this$props = _this.props,
          activeColor = _this$props.activeColor,
          headerColor = _this$props.headerColor,
          headerTextColor = _this$props.headerTextColor;
      var textColor = (0, _colors.getTextColor)(headerTextColor, headerColor);
      var itemActiveColor = (0, _colors.getItemActiveColor)(activeColor, headerColor);
      var itemHoverColor = (0, _colors.getItemHoverColor)(headerColor, activeColor);
      var separatorColor = (0, _colors.getSeparatorColor)(headerColor, activeColor);
      var workspacesPickerHoverColor = (0, _colors.getWorkspacePickerHoverColor)(headerColor);
      var css = [];
      css.push(".".concat(guid, " { color: ").concat(textColor, "; background: ").concat(headerColor, "}"));
      css.push(".".concat(guid, " .gd-header-menu-section { border-color: ").concat(separatorColor, "}"));
      css.push(".".concat(guid, " .gd-header-menu-item:hover { border-color: ").concat(itemHoverColor, "}"));
      css.push(".".concat(guid, " .gd-header-menu-item.active { border-color: ").concat(itemActiveColor, "}"));
      css.push(".".concat(guid, " .gd-header-project { border-color: ").concat(separatorColor, "}"));
      css.push(".".concat(guid, " .gd-header-project:hover { background-color: ").concat(workspacesPickerHoverColor, "; color: ").concat(textColor, "}"));
      css.push(".".concat(guid, " .hamburger-icon:not(.is-open) i { border-color: ").concat(textColor, "}"));
      css.push(".".concat(guid, " .hamburger-icon:not(.is-open):after { border-color: ").concat(textColor, "}"));
      css.push(".".concat(guid, " .hamburger-icon:not(.is-open):before { border-color: ").concat(textColor, "}"));
      _this.stylesheet = (0, _addCSS["default"])("header-css-".concat(guid), css.join("\n"), true);
    };

    _this.setOverlayMenu = function (isOverlayMenuOpen) {
      _this.setState({
        isOverlayMenuOpen: isOverlayMenuOpen,
        isHelpMenuOpen: false
      });
    };

    _this.setHelpMenu = function (isHelpMenuOpen) {
      _this.setState({
        isHelpMenuOpen: isHelpMenuOpen
      });
    };

    _this.toggleHelpMenu = function () {
      return _this.setHelpMenu(!_this.state.isHelpMenuOpen);
    };

    _this.handleMenuItemClick = function (item, event) {
      if (_this.state.isHelpMenuOpen) {
        _this.setOverlayMenu(false);
      }

      _this.props.onMenuItemClick(item, event);
    };

    _this.addHelpItemGroup = function (itemGroups) {
      return !_this.props.documentationUrl ? itemGroups : [].concat((0, _toConsumableArray2["default"])(itemGroups), [[_this.getHelpMenuLink()]]);
    };

    _this.getHelpMenu = function () {
      return [[_this.getHelpMenuLink("icon-header-help-back")].concat((0, _toConsumableArray2["default"])(_this.props.helpMenuItems))];
    };

    _this.getHelpMenuLink = function () {
      var icon = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "icon-header-help";
      return {
        key: "gs.header.help",
        className: "s-menu-help ".concat(icon),
        href: _this.state.responsiveMode && _this.props.helpMenuItems ? undefined : _this.props.documentationUrl,
        onClick: _this.state.responsiveMode && _this.props.helpMenuItems ? _this.toggleHelpMenu : undefined
      };
    };

    _this.renderNav = function () {
      return _this.state.responsiveMode ? _this.renderMobileNav() : _this.renderStandardNav();
    };

    _this.renderMobileNav = function () {
      var iconClasses = (0, _classnames["default"])({
        "hamburger-icon": true,
        "is-open": _this.state.isOverlayMenuOpen
      });
      return [_react["default"].createElement("div", {
        className: "hamburger-wrapper",
        key: "hamburger-wrapper"
      }, _react["default"].createElement("div", {
        className: iconClasses,
        key: "hamburger-icon",
        onClick: function onClick() {
          _this.setOverlayMenu(!_this.state.isOverlayMenuOpen);
        }
      }, _react["default"].createElement("i", null))), _this.renderOverlayMenu()];
    };

    _this.renderOverlayMenu = function () {
      return _react["default"].createElement(_Overlay["default"], {
        key: "header-overlay-menu",
        alignPoints: [{
          align: "tr tr"
        }],
        closeOnOutsideClick: _this.state.isOverlayMenuOpen,
        isModal: _this.state.isOverlayMenuOpen,
        positionType: "fixed",
        onClose: function onClose() {
          _this.setOverlayMenu(false);
        }
      }, _react["default"].createElement(_reactTransitionGroup.CSSTransitionGroup, {
        transitionName: "gd-header",
        transitionEnterTimeout: 300,
        transitionLeaveTimeout: 300,
        component: "div"
      }, _this.renderVerticalMenu()));
    };

    _this.renderVerticalMenu = function () {
      if (!_this.state.isOverlayMenuOpen) {
        return false;
      }

      var menuItemsGroups = !_this.state.isHelpMenuOpen ? _this.addHelpItemGroup(_this.props.menuItemsGroups) : _this.getHelpMenu();
      return _react["default"].createElement("div", {
        key: "overlay-menu",
        className: "gd-header-menu-vertical-wrapper"
      }, _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-header"
      }, "Menu"), _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-content"
      }, _react["default"].createElement(_HeaderMenu["default"], {
        onMenuItemClick: _this.handleMenuItemClick,
        sections: menuItemsGroups,
        className: "gd-header-menu-vertical"
      })), _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-footer"
      }, _react["default"].createElement("div", {
        className: "gd-header-menu-vertical-bottom-item"
      }, _react["default"].createElement("span", {
        className: "gd-header-username icon-user"
      }, _this.props.userName)), _react["default"].createElement("div", null, _this.renderLogoutButton())));
    };

    _this.renderLogoutButton = function () {
      var t = _this.props.intl.formatMessage;

      var _this$props$accountMe = _this.props.accountMenuItems.filter(function (item) {
        return item.key === "gs.header.logout";
      }),
          _this$props$accountMe2 = (0, _slicedToArray2["default"])(_this$props$accountMe, 1),
          logoutMenuItem = _this$props$accountMe2[0];

      return logoutMenuItem ? _react["default"].createElement(_Button["default"], {
        value: t({
          id: "gs.header.logout"
        }),
        className: "logout-button",
        onClick: function onClick(e) {
          _this.props.onMenuItemClick(logoutMenuItem, e);
        }
      }) : false;
    };

    _this.renderStandardNav = function () {
      return _react["default"].createElement("div", {
        className: "gd-header-stretch gd-header-menu-wrapper"
      }, _react["default"].createElement(_HeaderMenu["default"], {
        onMenuItemClick: _this.props.onMenuItemClick,
        sections: _this.props.menuItemsGroups,
        className: "gd-header-menu-horizontal"
      }), !!_this.props.helpMenuItems.length && _react["default"].createElement(_HeaderHelp["default"], {
        onMenuItemClick: _this.props.onMenuItemClick,
        className: "gd-header-measure",
        items: _this.props.helpMenuItems
      }), _react["default"].createElement(_HeaderAccount["default"], {
        userName: _this.props.userName,
        onMenuItemClick: _this.props.onMenuItemClick,
        className: "gd-header-measure",
        items: _this.props.accountMenuItems
      }));
    };

    _this.state = {
      childrenWidth: 0,
      guid: (0, _uniqueId["default"])("header-"),
      isOverlayMenuOpen: false,
      responsiveMode: false,
      isHelpMenuOpen: false
    };
    return _this;
  }

  (0, _createClass2["default"])(HeaderCore, [{
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          logoUrl = _this$props2.logoUrl,
          logoTitle = _this$props2.logoTitle,
          workspacePicker = _this$props2.workspacePicker;
      this.createStyles();
      var logoLinkClassName = (0, _classnames["default"])({
        "gd-header-logo": true,
        "gd-header-measure": true,
        "gd-header-shrink": this.state.responsiveMode
      });
      return _react["default"].createElement("div", {
        className: this.getClassNames(),
        ref: this.nodeRef
      }, _react["default"].createElement("a", {
        href: this.props.logoHref,
        onClick: this.props.onLogoClick,
        className: logoLinkClassName
      }, _react["default"].createElement("img", {
        src: logoUrl,
        title: logoTitle,
        onLoad: this.measureChildren,
        onError: this.measureChildren,
        alt: ""
      })), workspacePicker, this.renderNav());
    }
  }, {
    key: "componentDidMount",
    value: function componentDidMount() {
      window.addEventListener("resize", this.resizeHandler);
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      window.removeEventListener("resize", this.resizeHandler);
      (0, _domUtilities.removeFromDom)(this.stylesheet);
    }
  }]);
  return HeaderCore;
}(_react.Component);

HeaderCore.defaultProps = {
  logoHref: "/",
  accountMenuItems: [],
  helpMenuItems: [],
  menuItemsGroups: []
};
var Header = (0, _reactIntl.injectIntl)(HeaderCore);
exports.Header = Header;