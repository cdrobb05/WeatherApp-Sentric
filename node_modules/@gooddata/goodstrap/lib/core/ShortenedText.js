"use strict";

var _interopRequireWildcard = require("@babel/runtime-corejs2/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime-corejs2/helpers/interopRequireDefault");

var _Object$defineProperty = require("@babel/runtime-corejs2/core-js/object/define-property");

_Object$defineProperty(exports, "__esModule", {
  value: true
});

exports.getShortenedTitle = getShortenedTitle;
exports["default"] = exports.tooltipAlignPointsPropTypes = void 0;

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/createClass"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/possibleConstructorReturn"));

var _getPrototypeOf3 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/getPrototypeOf"));

var _inherits2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/inherits"));

var _defineProperty2 = _interopRequireDefault(require("@babel/runtime-corejs2/helpers/defineProperty"));

var _react = _interopRequireWildcard(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _classnames = _interopRequireDefault(require("classnames"));

var _BubbleHoverTrigger = _interopRequireDefault(require("../Bubble/BubbleHoverTrigger"));

var _Bubble = _interopRequireDefault(require("../Bubble/Bubble"));

// (C) 2007-2020 GoodData Corporation
// ShortenText adds ellipsis (â€¦) in the middle of the string.
// SIDE_SCALE_RATIO is a constant which tells the percentage of
// of the string characters to be taken from both sides to produce
// final shortened string
var SIDE_SCALE_RATIO = 0.42;

var tooltipAlignPointsPropTypes = _propTypes["default"].arrayOf(_propTypes["default"].shape({
  align: _propTypes["default"].string,
  offset: _propTypes["default"].shape({
    x: _propTypes["default"].number,
    y: _propTypes["default"].number
  })
}));

exports.tooltipAlignPointsPropTypes = tooltipAlignPointsPropTypes;

function getElementWidth(element) {
  return Math.ceil(element.getBoundingClientRect().width);
}

function getShortenedTitle(title, element) {
  var elementWidth = getElementWidth(element);
  var scrollWidth = element.scrollWidth;

  if (elementWidth >= scrollWidth) {
    return title;
  }

  var titleLength = title.length;
  var numChars = titleLength * (elementWidth / scrollWidth);
  var numCharsSideStrip = Math.floor(numChars * SIDE_SCALE_RATIO);
  var pre = title.substr(0, numCharsSideStrip);
  var post = title.substr(titleLength - numCharsSideStrip, titleLength);
  return "".concat(pre, "\u2026").concat(post);
}

var ShortenedText = /*#__PURE__*/function (_PureComponent) {
  (0, _inherits2["default"])(ShortenedText, _PureComponent);

  function ShortenedText(props) {
    var _getPrototypeOf2;

    var _this;

    (0, _classCallCheck2["default"])(this, ShortenedText);

    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    _this = (0, _possibleConstructorReturn2["default"])(this, (_getPrototypeOf2 = (0, _getPrototypeOf3["default"])(ShortenedText)).call.apply(_getPrototypeOf2, [this, props].concat(args)));
    _this.state = {
      title: props.children,
      customTitle: false
    };
    _this.textRef = _react["default"].createRef();
    return _this;
  }

  (0, _createClass2["default"])(ShortenedText, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      this.checkTitle();
    }
  }, {
    key: "componentWillReceiveProps",
    value: function componentWillReceiveProps(nextProps) {
      if (this.props.children !== nextProps.children) {
        this.setState({
          title: nextProps.children,
          customTitle: false
        });
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      if (this.state.customTitle) {
        return;
      }

      this.checkTitle();
    }
  }, {
    key: "classNames",
    value: function classNames() {
      return (0, _classnames["default"])(this.props.className, {
        shortened: true,
        "is-shortened": this.state.customTitle,
        "is-whole": !this.state.customTitle
      });
    }
  }, {
    key: "checkTitle",
    value: function checkTitle() {
      var element = this.props.getElement(this);
      var title = this.props.children;
      var elementWidth = getElementWidth(element);

      if (elementWidth > 0 && elementWidth < element.scrollWidth) {
        this.setState({
          title: getShortenedTitle(title, element),
          customTitle: true
        });
      }
    }
  }, {
    key: "recomputeShortening",
    value: function recomputeShortening() {
      // causes repaint & checkTitle to be called
      this.setState({
        title: this.props.children,
        customTitle: false
      });
    }
  }, {
    key: "renderTextWithBubble",
    value: function renderTextWithBubble() {
      return _react["default"].createElement(_BubbleHoverTrigger["default"], {
        showDelay: 0,
        hideDelay: 0,
        eventsOnBubble: this.props.tooltipVisibleOnMouseOver
      }, _react["default"].createElement(_Bubble["default"], {
        alignPoints: this.props.tooltipAlignPoints
      }, this.state.customTitle ? this.props.children : ""), this.renderText());
    }
  }, {
    key: "renderText",
    value: function renderText() {
      var TagName = this.props.tagName;
      return _react["default"].createElement(TagName, {
        ref: this.textRef,
        className: this.classNames()
      }, this.state.title);
    }
  }, {
    key: "render",
    value: function render() {
      if (this.state.customTitle && this.props.displayTooltip) {
        return this.renderTextWithBubble();
      }

      return this.renderText();
    }
  }]);
  return ShortenedText;
}(_react.PureComponent);

exports["default"] = ShortenedText;
(0, _defineProperty2["default"])(ShortenedText, "propTypes", {
  children: _propTypes["default"].node,
  className: _propTypes["default"].string,
  tagName: _propTypes["default"].string,
  tooltipAlignPoints: tooltipAlignPointsPropTypes,
  tooltipVisibleOnMouseOver: _propTypes["default"].bool,
  getElement: _propTypes["default"].func,
  displayTooltip: _propTypes["default"].bool
});
(0, _defineProperty2["default"])(ShortenedText, "defaultProps", {
  children: false,
  className: "",
  tagName: "span",
  tooltipAlignPoints: [{
    align: "cr cl"
  }],
  tooltipVisibleOnMouseOver: false,
  getElement: function getElement(context) {
    // Necessary for testing width in JSDOM env.
    return context.textRef.current;
  },
  displayTooltip: true
});