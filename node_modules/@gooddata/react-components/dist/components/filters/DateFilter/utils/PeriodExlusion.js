"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2019 GoodData Corporation
var typings_1 = require("@gooddata/typings");
/**
 * Returns the date filter option with excludeCurrentPeriod applied if applicable.
 */
exports.applyExcludeCurrentPeriod = function (dateFilterOption, excludeCurrentPeriod) {
    if (!dateFilterOption || !excludeCurrentPeriod) {
        return dateFilterOption;
    }
    if (typings_1.ExtendedDateFilters.isAllTimeDateFilter(dateFilterOption) ||
        typings_1.ExtendedDateFilters.isAbsoluteDateFilterForm(dateFilterOption) ||
        typings_1.ExtendedDateFilters.isAbsoluteDateFilterPreset(dateFilterOption) ||
        typings_1.ExtendedDateFilters.isRelativeDateFilterForm(dateFilterOption)) {
        return dateFilterOption;
    }
    else if (typings_1.ExtendedDateFilters.isRelativeDateFilterPreset(dateFilterOption)) {
        var from = dateFilterOption.from, to = dateFilterOption.to;
        var shouldExcludeCurrent = to === 0 && from < to;
        return __assign({}, dateFilterOption, { from: shouldExcludeCurrent ? dateFilterOption.from - 1 : dateFilterOption.from, to: shouldExcludeCurrent ? -1 : to });
    }
    else {
        throw new Error("Unknown date filter value type");
    }
};
exports.canExcludeCurrentPeriod = function (dateFilterOption) {
    if (!dateFilterOption.visible) {
        return false;
    }
    if (typings_1.ExtendedDateFilters.isRelativeDateFilterPreset(dateFilterOption)) {
        return dateFilterOption.to === 0 && dateFilterOption.from < dateFilterOption.to;
    }
    return false;
};
//# sourceMappingURL=PeriodExlusion.js.map