"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2019 GoodData Corporation
var React = require("react");
var classnames_1 = require("classnames");
var moment_1 = require("react-day-picker/moment");
var react_intl_1 = require("react-intl");
var DateConversions_1 = require("../utils/DateConversions");
var DateRangePickerInputField_1 = require("./DateRangePickerInputField");
var utils_1 = require("./utils");
var DateRangePickerError_1 = require("./DateRangePickerError");
var FormattingUtils_1 = require("../utils/FormattingUtils");
var DateRangePickerInputFieldBody_1 = require("./DateRangePickerInputFieldBody");
var DateRangePickerComponent = /** @class */ (function (_super) {
    __extends(DateRangePickerComponent, _super);
    function DateRangePickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.fromInputRef = React.createRef();
        _this.toInputRef = React.createRef();
        _this.focusField = function (inputRef) {
            if (inputRef.current) {
                // Focus needs to happen on the next tick otherwise the day picker is not updated
                setTimeout(function () {
                    inputRef.current.getInput().focus();
                }, 0);
            }
        };
        _this.blurField = function (inputRef) {
            if (inputRef.current) {
                inputRef.current.getInput().blur();
            }
        };
        _this.updateRange = function (from, to) {
            _this.props.onRangeChange({ from: from, to: to });
        };
        _this.handleFromDayClick = function () {
            _this.focusField(_this.toInputRef);
        };
        _this.handleToDayClick = function (to) {
            var rangeBoundsCrossed = utils_1.areRangeBoundsCrossed(_this.props.range.from, to);
            if (to && !rangeBoundsCrossed) {
                _this.blurField(_this.toInputRef);
            }
            else if (rangeBoundsCrossed) {
                _this.focusField(_this.fromInputRef);
            }
        };
        _this.getSanitizedInputValue = function (inputRef, date) {
            var inputValue = inputRef.current && inputRef.current.getInput().value;
            return !date && !inputValue ? null : date;
        };
        _this.handleFromChange = function (from) {
            var useFrom = from && _this.props.range.to && utils_1.areRangeBoundsCrossed(from, _this.props.range.to);
            var to = useFrom ? from : _this.props.range.to;
            var sanitizedFrom = _this.getSanitizedInputValue(_this.fromInputRef, from);
            _this.updateRange(sanitizedFrom, to);
        };
        _this.handleToChange = function (to) {
            var useTo = to && _this.props.range.from && utils_1.areRangeBoundsCrossed(_this.props.range.from, to);
            var from = useTo ? to : _this.props.range.from;
            var sanitizedTo = _this.getSanitizedInputValue(_this.toInputRef, to);
            _this.updateRange(from, sanitizedTo);
        };
        return _this;
    }
    DateRangePickerComponent.prototype.render = function () {
        var _this = this;
        var _a = this.props, dateFormat = _a.dateFormat, _b = _a.range, from = _b.from, to = _b.to, dayPickerProps = _a.dayPickerProps, intl = _a.intl, isMobile = _a.isMobile, _c = _a.errors, _d = _c === void 0 ? { from: undefined, to: undefined } : _c, errorFrom = _d.from, errorTo = _d.to;
        var defaultDayPickerProps = {
            showOutsideDays: true,
            modifiers: { start: from, end: to },
            selectedDays: [from, { from: from, to: to }],
            locale: FormattingUtils_1.sanitizeLocaleForMoment(intl.locale),
            localeUtils: moment_1.default,
        };
        var dayPickerPropsWithDefaults = utils_1.mergeDayPickerProps(defaultDayPickerProps, dayPickerProps);
        var FromField = isMobile ? (React.createElement(DateRangePickerInputFieldBody_1.DateRangePickerInputFieldBody, { type: "date", className: classnames_1.default("s-date-range-picker-from", "gd-date-range-picker-input", "gd-date-range-picker-input-native", errorFrom && "gd-date-range-picker-input-error"), placeholder: intl.formatMessage({ id: "filters.from" }), 
            // tslint:disable-next-line:jsx-no-lambda
            onChange: function (event) { return _this.handleFromChange(DateConversions_1.convertPlatformDateStringToDate(event.target.value)); }, value: DateConversions_1.convertDateToPlatformDateString(from) })) : (React.createElement(DateRangePickerInputField_1.DateRangePickerInputField, { className: classnames_1.default("s-date-range-picker-from", errorFrom && "gd-date-range-picker-input-error"), classNameCalendar: "s-date-range-calendar-from", ref: this.fromInputRef, onDayChange: this.handleFromChange, value: from || "", format: dateFormat, placeholder: intl.formatMessage({ id: "filters.from" }), dayPickerProps: __assign({}, dayPickerPropsWithDefaults, { onDayClick: this.handleFromDayClick }) }));
        var ToField = isMobile ? (React.createElement(DateRangePickerInputFieldBody_1.DateRangePickerInputFieldBody, { type: "date", className: classnames_1.default("s-date-range-picker-to", "gd-date-range-picker-input", "gd-date-range-picker-input-native", errorTo && "gd-date-range-picker-input-error"), placeholder: intl.formatMessage({ id: "filters.to" }), 
            // tslint:disable-next-line:jsx-no-lambda
            onChange: function (event) { return _this.handleToChange(DateConversions_1.convertPlatformDateStringToDate(event.target.value)); }, value: DateConversions_1.convertDateToPlatformDateString(to) })) : (React.createElement(DateRangePickerInputField_1.DateRangePickerInputField, { className: classnames_1.default("s-date-range-picker-to", errorTo && "gd-date-range-picker-input-error"), classNameCalendar: "s-date-range-calendar-to", ref: this.toInputRef, onDayChange: this.handleToChange, value: to || "", format: dateFormat, placeholder: intl.formatMessage({ id: "filters.to" }), dayPickerProps: __assign({}, dayPickerPropsWithDefaults, { onDayClick: this.handleToDayClick }) }));
        return (React.createElement(React.Fragment, null,
            React.createElement("div", { className: "gd-date-range-picker s-date-range-picker" },
                FromField,
                React.createElement("span", { className: "gd-date-range-picker-dash" }, "\u2014"),
                ToField),
            (errorFrom || errorTo) && (React.createElement(DateRangePickerError_1.DateRangePickerError, { errorId: 
                // This means that when both inputs are invalid, error is shown only for "from"
                errorFrom || errorTo }))));
    };
    return DateRangePickerComponent;
}(React.Component));
exports.DateRangePickerComponent = DateRangePickerComponent;
exports.DateRangePicker = react_intl_1.injectIntl(DateRangePickerComponent);
//# sourceMappingURL=DateRangePicker.js.map