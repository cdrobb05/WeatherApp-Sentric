"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var React = require("react");
var isEmpty = require("lodash/isEmpty");
var classnames_1 = require("classnames");
var react_intl_1 = require("react-intl");
var typings_1 = require("@gooddata/typings");
var ListItem_1 = require("../ListItem/ListItem");
var ExcludeCurrentPeriodToggle_1 = require("../ExcludeCurrentPeriodToggle/ExcludeCurrentPeriodToggle");
var VisibleScrollbar_1 = require("../VisibleScrollbar/VisibleScrollbar");
var OptionUtils_1 = require("../utils/OptionUtils");
var AllTimeFilterItem_1 = require("./AllTimeFilterItem");
var DateFilterFormWrapper_1 = require("../DateFilterFormWrapper/DateFilterFormWrapper");
var AbsoluteDateFilterForm_1 = require("../AbsoluteDateFilterForm/AbsoluteDateFilterForm");
var ListItemTooltip_1 = require("../ListItemTooltip/ListItemTooltip");
var RelativeDateFilterForm_1 = require("../RelativeDateFilterForm/RelativeDateFilterForm");
var RelativePresetFilterItems_1 = require("./RelativePresetFilterItems");
var EditModeMessage_1 = require("./EditModeMessage");
var DateFilterHeader_1 = require("./DateFilterHeader");
var DateFilterBodyButton_1 = require("./DateFilterBodyButton");
var AbsolutePresetFilterItems_1 = require("./AbsolutePresetFilterItems");
var ACTIONS_BUTTONS_HEIGHT = 53;
var EXCLUDE_OPEN_PERIOD_HEIGHT = 30; // height of 'Exclude open period' checkbox component
var MARGIN_BOTTOM = 8;
var MOBILE_WIDTH = 414; // iPhone 11 Pro Max
exports.isFilterOptionSelected = function (filterOption, selectedOption) { return filterOption.localIdentifier === selectedOption.localIdentifier; };
var ITEM_CLASS_MOBILE = "gd-date-filter-item-mobile";
var DateFilterBody = /** @class */ (function (_super) {
    __extends(DateFilterBody, _super);
    function DateFilterBody() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            route: null,
        };
        _this.changeRoute = function (route) {
            if (route === void 0) { route = null; }
            _this.setState({ route: route });
        };
        _this.renderAllTime = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, isMobile = _a.isMobile, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange;
            return filterOptions.allTime ? (React.createElement(AllTimeFilterItem_1.AllTimeFilterItem, { filterOption: filterOptions.allTime, selectedFilterOption: selectedFilterOption, onSelectedFilterOptionChange: onSelectedFilterOptionChange, className: isMobile && ITEM_CLASS_MOBILE })) : null;
        };
        _this.renderAbsoluteForm = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, isMobile = _a.isMobile, errors = _a.errors;
            if (!filterOptions.absoluteForm) {
                return null;
            }
            var route = _this.state.route;
            var isSelected = filterOptions.absoluteForm.localIdentifier === selectedFilterOption.localIdentifier;
            var isOnRoute = route === "absoluteForm";
            return (React.createElement(React.Fragment, null,
                (!isMobile || !isOnRoute) && (React.createElement(ListItem_1.ListItem, { isSelected: isSelected, 
                    // tslint:disable-next-line:jsx-no-lambda
                    onClick: function () {
                        _this.changeRoute("absoluteForm");
                        if (!typings_1.ExtendedDateFilters.isAbsoluteDateFilterForm(selectedFilterOption)) {
                            onSelectedFilterOptionChange(filterOptions.absoluteForm);
                        }
                    }, className: classnames_1.default("s-absolute-form", "s-do-not-close-dropdown-on-click", isMobile && ITEM_CLASS_MOBILE) },
                    React.createElement(react_intl_1.FormattedMessage, { id: "filters.staticPeriod" }))),
                isSelected && (!isMobile || isOnRoute) && (React.createElement(DateFilterFormWrapper_1.DateFilterFormWrapper, { isMobile: isMobile },
                    React.createElement(AbsoluteDateFilterForm_1.AbsoluteDateFilterForm, { errors: (errors && errors.absoluteForm) || undefined, onSelectedFilterOptionChange: onSelectedFilterOptionChange, selectedFilterOption: selectedFilterOption, isMobile: isMobile })))));
        };
        _this.renderRelativeForm = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, availableGranularities = _a.availableGranularities, isMobile = _a.isMobile;
            if (!filterOptions.relativeForm) {
                return null;
            }
            var route = _this.state.route;
            var isSelected = filterOptions.relativeForm.localIdentifier === selectedFilterOption.localIdentifier;
            var isOnRoute = route === "relativeForm";
            return (React.createElement(React.Fragment, null,
                (!isMobile || !isOnRoute) && (React.createElement(ListItem_1.ListItem, { isSelected: isSelected, 
                    // tslint:disable-next-line:jsx-no-lambda
                    onClick: function () {
                        _this.changeRoute("relativeForm");
                        if (!typings_1.ExtendedDateFilters.isRelativeDateFilterForm(selectedFilterOption)) {
                            onSelectedFilterOptionChange(filterOptions.relativeForm);
                        }
                    }, className: classnames_1.default("s-relative-form", "s-do-not-close-dropdown-on-click", isMobile && ITEM_CLASS_MOBILE) },
                    React.createElement(react_intl_1.FormattedMessage, { id: "filters.floatingRange" }),
                    !isMobile && (React.createElement(ListItemTooltip_1.ListItemTooltip, null,
                        React.createElement(react_intl_1.FormattedMessage, { id: "filters.floatingRange.tooltip" }))))),
                isSelected && (!isMobile || isOnRoute) && (React.createElement(DateFilterFormWrapper_1.DateFilterFormWrapper, { isMobile: isMobile },
                    React.createElement(RelativeDateFilterForm_1.RelativeDateFilterForm
                    // tslint:disable-next-line:jsx-no-lambda
                    , { 
                        // tslint:disable-next-line:jsx-no-lambda
                        onSelectedFilterOptionChange: function (option) {
                            onSelectedFilterOptionChange(option);
                        }, selectedFilterOption: selectedFilterOption, availableGranularities: availableGranularities, isMobile: isMobile })))));
        };
        _this.renderAbsolutePreset = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, isMobile = _a.isMobile;
            return filterOptions.absolutePreset && filterOptions.absolutePreset.length > 0 ? (React.createElement(AbsolutePresetFilterItems_1.AbsolutePresetFilterItems, { filterOptions: filterOptions.absolutePreset, selectedFilterOption: selectedFilterOption, onSelectedFilterOptionChange: onSelectedFilterOptionChange, className: isMobile && ITEM_CLASS_MOBILE })) : null;
        };
        _this.renderRelativePreset = function () {
            var _a = _this.props, filterOptions = _a.filterOptions, selectedFilterOption = _a.selectedFilterOption, onSelectedFilterOptionChange = _a.onSelectedFilterOptionChange, isMobile = _a.isMobile;
            return filterOptions.relativePreset ? (React.createElement(RelativePresetFilterItems_1.RelativePresetFilterItems, { filterOption: filterOptions.relativePreset, selectedFilterOption: selectedFilterOption, onSelectedFilterOptionChange: onSelectedFilterOptionChange, className: isMobile && ITEM_CLASS_MOBILE })) : null;
        };
        _this.renderExcludeCurrent = function () {
            var _a = _this.props, selectedFilterOption = _a.selectedFilterOption, onExcludeCurrentPeriodChange = _a.onExcludeCurrentPeriodChange, excludeCurrentPeriod = _a.excludeCurrentPeriod, isExcludeCurrentPeriodEnabled = _a.isExcludeCurrentPeriodEnabled;
            return (React.createElement(ExcludeCurrentPeriodToggle_1.ExcludeCurrentPeriodToggle, { value: excludeCurrentPeriod, onChange: onExcludeCurrentPeriodChange, disabled: !isExcludeCurrentPeriodEnabled, granularity: OptionUtils_1.getDateFilterOptionGranularity(selectedFilterOption) }));
        };
        _this.calculateHeight = function (showExcludeCurrent) {
            // Mobile in Horizontal Layout
            if (window.innerHeight <= MOBILE_WIDTH) {
                var excludeOpenPeriodHeight = showExcludeCurrent ? EXCLUDE_OPEN_PERIOD_HEIGHT : 0;
                return window.innerHeight - excludeOpenPeriodHeight - ACTIONS_BUTTONS_HEIGHT - MARGIN_BOTTOM;
            }
            return undefined;
        };
        return _this;
    }
    DateFilterBody.prototype.componentDidMount = function () {
        // Dropdown component does not expose isOpened prop but it mounts
        // this component every time it is opened and un-mounts when closed
        if (this.props.isMobile) {
            if (typings_1.ExtendedDateFilters.isAbsoluteDateFilterForm(this.props.selectedFilterOption)) {
                this.changeRoute("absoluteForm");
            }
            else if (typings_1.ExtendedDateFilters.isRelativeDateFilterForm(this.props.selectedFilterOption)) {
                this.changeRoute("relativeForm");
            }
        }
    };
    DateFilterBody.prototype.render = function () {
        var _a = this.props, isExcludeCurrentPeriodEnabled = _a.isExcludeCurrentPeriodEnabled, isMobile = _a.isMobile, isEditMode = _a.isEditMode, onApplyClick = _a.onApplyClick, onCancelClick = _a.onCancelClick, closeDropdown = _a.closeDropdown, selectedFilterOption = _a.selectedFilterOption, dateFilterButton = _a.dateFilterButton, errors = _a.errors;
        var route = this.state.route;
        var showExcludeCurrent = !isMobile || isExcludeCurrentPeriodEnabled;
        var bodyHeight = this.calculateHeight(showExcludeCurrent);
        var wrapperStyle = {};
        var scrollerStyle = {};
        if (bodyHeight) {
            // display: flex causes the scroller is cut off when scrolling
            wrapperStyle = { display: "block", height: bodyHeight + "px" };
            scrollerStyle = { minHeight: bodyHeight + "px" };
        }
        return (React.createElement("div", { className: "gd-extended-date-filter-container" },
            React.createElement("div", { className: classnames_1.default("gd-extended-date-filter-body", "s-extended-date-filters-body", isMobile && "gd-extended-date-filter-body-mobile") },
                route === null && isMobile && (React.createElement("div", { 
                    // tslint:disable-next-line:jsx-no-lambda
                    onClick: function () {
                        onCancelClick();
                        closeDropdown();
                    } }, dateFilterButton)),
                React.createElement("div", { className: classnames_1.default("gd-extended-date-filter-body-wrapper", {
                        "gd-extended-date-filter-body-wrapper-wide": typings_1.ExtendedDateFilters.isRelativeDateFilterForm(selectedFilterOption),
                    }), style: wrapperStyle },
                    isEditMode && !isMobile && React.createElement(EditModeMessage_1.EditModeMessage, null),
                    isMobile ? (this.renderMobileContent()) : (React.createElement(VisibleScrollbar_1.VisibleScrollbar, { className: "gd-extended-date-filter-body-scrollable", style: scrollerStyle }, this.renderDefaultContent()))),
                showExcludeCurrent ? this.renderExcludeCurrent() : null,
                React.createElement("div", { className: classnames_1.default("gd-extended-date-filter-actions") },
                    React.createElement("div", { className: "gd-extended-date-filter-actions-buttons" },
                        React.createElement(DateFilterBodyButton_1.DateFilterBodyButton, { messageId: "cancel", className: "gd-button-secondary s-date-filter-cancel", 
                            // tslint:disable-next-line:jsx-no-lambda
                            onClick: function () {
                                onCancelClick();
                                closeDropdown();
                            } }),
                        React.createElement(DateFilterBodyButton_1.DateFilterBodyButton, { messageId: "apply", className: "gd-button-action s-date-filter-apply", disabled: !isEmpty(errors), 
                            // tslint:disable-next-line:jsx-no-lambda
                            onClick: function () {
                                onApplyClick();
                                closeDropdown();
                            } }))))));
    };
    DateFilterBody.prototype.renderMobileContent = function () {
        var route = this.state.route;
        if (route === "absoluteForm") {
            return (React.createElement(React.Fragment, null,
                React.createElement(DateFilterHeader_1.DateFilterHeader, { changeRoute: this.changeRoute },
                    React.createElement(react_intl_1.FormattedMessage, { id: "filters.staticPeriod" })),
                this.renderAbsoluteForm()));
        }
        if (route === "relativeForm") {
            return (React.createElement(React.Fragment, null,
                React.createElement(DateFilterHeader_1.DateFilterHeader, { changeRoute: this.changeRoute },
                    React.createElement(react_intl_1.FormattedMessage, { id: "filters.floatingRange" })),
                this.renderRelativeForm()));
        }
        return this.renderDefaultContent();
    };
    DateFilterBody.prototype.renderDefaultContent = function () {
        return (React.createElement(React.Fragment, null,
            this.renderAllTime(),
            this.renderAbsoluteForm(),
            this.renderRelativeForm(),
            this.renderAbsolutePreset(),
            this.renderRelativePreset()));
    };
    return DateFilterBody;
}(React.Component));
exports.DateFilterBody = DateFilterBody;
//# sourceMappingURL=DateFilterBody.js.map