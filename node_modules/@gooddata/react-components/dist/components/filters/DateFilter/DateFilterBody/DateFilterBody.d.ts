import * as React from "react";
import { ExtendedDateFilters } from "@gooddata/typings";
import { IExtendedDateFilterErrors } from "../../../../interfaces/ExtendedDateFilters";
export interface IDateFilterBodyProps {
    filterOptions: ExtendedDateFilters.IDateFilterOptionsByType;
    selectedFilterOption: ExtendedDateFilters.DateFilterOption;
    onSelectedFilterOptionChange: (option: ExtendedDateFilters.DateFilterOption) => void;
    excludeCurrentPeriod: boolean;
    isExcludeCurrentPeriodEnabled: boolean;
    onExcludeCurrentPeriodChange: (isExcluded: boolean) => void;
    availableGranularities: ExtendedDateFilters.DateFilterGranularity[];
    isEditMode: boolean;
    isMobile: boolean;
    onApplyClick: () => void;
    onCancelClick: () => void;
    closeDropdown: () => void;
    errors?: IExtendedDateFilterErrors;
    dateFilterButton: JSX.Element;
}
export interface IDateFilterBodyState {
    route: "absoluteForm" | "relativeForm" | null;
}
export declare const isFilterOptionSelected: (filterOption: ExtendedDateFilters.IDateFilterOption, selectedOption: ExtendedDateFilters.IDateFilterOption) => boolean;
export declare class DateFilterBody extends React.Component<IDateFilterBodyProps, IDateFilterBodyState> {
    state: IDateFilterBodyState;
    changeRoute: (route?: "absoluteForm" | "relativeForm") => void;
    componentDidMount(): void;
    render(): React.ReactNode;
    private renderAllTime;
    private renderAbsoluteForm;
    private renderRelativeForm;
    private renderAbsolutePreset;
    private renderRelativePreset;
    private renderExcludeCurrent;
    private renderMobileContent;
    private renderDefaultContent;
    private calculateHeight;
}
