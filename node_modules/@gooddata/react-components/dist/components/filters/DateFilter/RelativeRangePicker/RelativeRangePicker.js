"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var React = require("react");
var classnames_1 = require("classnames");
var DynamicSelect_1 = require("../DynamicSelect/DynamicSelect");
var utils_1 = require("../DynamicSelect/utils");
var react_intl_1 = require("react-intl");
var VirtualizedSelectMenu_1 = require("../Select/VirtualizedSelectMenu");
var RelativeRangePickerComponent = /** @class */ (function (_super) {
    __extends(RelativeRangePickerComponent, _super);
    function RelativeRangePickerComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toFieldRef = React.createRef();
        _this.focusToField = function () {
            var isTouchDevice = "ontouchstart" in window || navigator.msMaxTouchPoints;
            if (_this.toFieldRef.current) {
                /**
                 * Prevents hover style from persisting after switching to another field on
                 * touchscreen devices.
                 */
                isTouchDevice
                    ? setTimeout(function () {
                        _this.toFieldRef.current.focus();
                    }, 0)
                    : _this.toFieldRef.current.focus();
            }
        };
        _this.handleFromChange = function (from) {
            _this.props.onSelectedFilterOptionChange(__assign({}, _this.props.selectedFilterOption, { from: from }));
            if (from !== undefined) {
                _this.focusToField();
            }
        };
        _this.handleToChange = function (to) {
            _this.props.onSelectedFilterOptionChange(__assign({}, _this.props.selectedFilterOption, { to: to }));
        };
        return _this;
    }
    RelativeRangePickerComponent.prototype.render = function () {
        var _a = this, handleFromChange = _a.handleFromChange, handleToChange = _a.handleToChange;
        var _b = this.props, selectedFilterOption = _b.selectedFilterOption, intl = _b.intl, isMobile = _b.isMobile;
        var mobileVisibleItemsRange = 5;
        var commonProps = {
            visibleItemsRange: isMobile ? mobileVisibleItemsRange : VirtualizedSelectMenu_1.defaultVisibleItemsRange,
            optionClassName: "s-relative-date-filter-option s-do-not-close-dropdown-on-click",
            getItems: function (value) {
                var items = utils_1.getRelativeDateFilterItems(value, selectedFilterOption.granularity, intl);
                // separators are not needed in mobile as all the items have borders
                return isMobile ? items.filter(function (item) { return item.type !== "separator"; }) : items;
            },
        };
        return (React.createElement("div", { className: "gd-relative-range-picker s-relative-range-picker" },
            React.createElement(DynamicSelect_1.DynamicSelect, __assign({ value: selectedFilterOption.from, onChange: handleFromChange, placeholder: intl.formatMessage({ id: "filters.from" }), className: classnames_1.default("gd-relative-range-picker-picker", "s-relative-range-picker-from", isMobile && "gd-relative-range-picker-picker-mobile") }, commonProps)),
            React.createElement("span", { className: "gd-relative-range-picker-dash" }, "\u2014"),
            React.createElement(DynamicSelect_1.DynamicSelect, __assign({ value: selectedFilterOption.to, onChange: handleToChange, placeholder: intl.formatMessage({ id: "filters.to" }), className: classnames_1.default("gd-relative-range-picker-picker", "s-relative-range-picker-to", isMobile && "gd-relative-range-picker-picker-mobile") }, commonProps, { ref: this.toFieldRef }))));
    };
    return RelativeRangePickerComponent;
}(React.Component));
exports.RelativeRangePicker = react_intl_1.injectIntl(RelativeRangePickerComponent);
//# sourceMappingURL=RelativeRangePicker.js.map