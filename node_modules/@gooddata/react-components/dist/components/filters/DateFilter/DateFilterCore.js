"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2019 GoodData Corporation
var React = require("react");
var Dropdown_1 = require("@gooddata/goodstrap/lib/Dropdown/Dropdown");
var react_responsive_1 = require("react-responsive");
var MediaQueries = require("../../../constants/MediaQueries");
var DateFilterButtonLocalized_1 = require("./DateFilterButtonLocalized/DateFilterButtonLocalized");
var DateFilterBody_1 = require("./DateFilterBody/DateFilterBody");
var PeriodExlusion_1 = require("./utils/PeriodExlusion");
var IntlWrapper_1 = require("../../core/base/IntlWrapper");
var DropdownBody = function (props) {
    return props.children({
        isMobile: props.isMobile,
        closeDropdown: props.closeDropdown,
    });
};
exports.DateFilterCore = function (_a) {
    var originalSelectedFilterOption = _a.originalSelectedFilterOption, originalExcludeCurrentPeriod = _a.originalExcludeCurrentPeriod, onDropdownOpenChanged = _a.onDropdownOpenChanged, customFilterName = _a.customFilterName, disabled = _a.disabled, locale = _a.locale, dropdownBodyProps = __rest(_a, ["originalSelectedFilterOption", "originalExcludeCurrentPeriod", "onDropdownOpenChanged", "customFilterName", "disabled", "locale"]);
    return (React.createElement(IntlWrapper_1.IntlWrapper, { locale: locale || "en-US" },
        React.createElement(react_responsive_1.default, { query: MediaQueries.IS_MOBILE_DEVICE }, function (isMobile) {
            var dateFilterButton = (React.createElement(DateFilterButtonLocalized_1.DateFilterButtonLocalized, { isMobile: isMobile, dateFilterOption: PeriodExlusion_1.applyExcludeCurrentPeriod(originalSelectedFilterOption, originalExcludeCurrentPeriod), customFilterName: customFilterName }));
            return (React.createElement(Dropdown_1.default, { closeOnParentScroll: true, closeOnMouseDrag: true, closeOnOutsideClick: true, enableEventPropagation: true, alignPoints: [
                    { align: "bl tl" },
                    { align: "tr tl" },
                    { align: "tr tl", offset: { x: 0, y: -100 } },
                    { align: "tr tl", offset: { x: 0, y: -50 } },
                ], onOpenStateChanged: onDropdownOpenChanged, disabled: disabled, 
                // Dropdown component passes "isOpen" prop automatically to the component in "button" prop
                // In Mobile case this is also rendered in the open dropdown
                button: dateFilterButton, ignoreClicksOn: [
                    ".s-do-not-close-dropdown-on-click",
                    ".DayPicker-Day",
                ], body: 
                // Dropdown component uses React.Children.map and adds special props to this component
                // https://stackoverflow.com/questions/32370994/how-to-pass-props-to-this-props-children
                React.createElement(DropdownBody, null, function (_a) {
                    var closeDropdown = _a.closeDropdown;
                    return (React.createElement(DateFilterBody_1.DateFilterBody, __assign({}, dropdownBodyProps, { isMobile: isMobile, closeDropdown: closeDropdown, dateFilterButton: dateFilterButton })));
                }) }));
        })));
};
//# sourceMappingURL=DateFilterCore.js.map