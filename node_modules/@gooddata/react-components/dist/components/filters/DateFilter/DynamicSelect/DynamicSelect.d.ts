import * as React from "react";
import * as PropTypes from "prop-types";
import { ISelectItemOption, ISelectItem } from "../Select/types";
export declare type DynamicSelectItem = ISelectItem<number>;
export declare type DynamicSelectOption = ISelectItemOption<number>;
export interface IDynamicSelectProps {
    getItems: (inputValue: string) => DynamicSelectItem[];
    onChange?: (item: number) => void;
    initialIsOpen?: boolean;
    placeholder?: string;
    value?: number;
    className?: string;
    style?: React.CSSProperties;
    optionClassName?: string;
    visibleItemsRange?: number;
}
export interface IDynamicSelectState {
    inputValue: string;
}
export declare class DynamicSelect extends React.Component<IDynamicSelectProps, IDynamicSelectState> {
    constructor(props: IDynamicSelectProps);
    inputRef: React.RefObject<HTMLDivElement>;
    static defaultProps: Partial<IDynamicSelectProps>;
    static propTypes: {
        getItems: PropTypes.Validator<any>;
        onChange: PropTypes.Requireable<any>;
        initialIsOpen: PropTypes.Requireable<any>;
        placeholder: PropTypes.Requireable<any>;
        value: PropTypes.Requireable<any>;
        className: PropTypes.Requireable<any>;
        style: PropTypes.Requireable<any>;
        optionClassName: PropTypes.Requireable<any>;
    };
    onChange: (option: ISelectItemOption<number>) => void;
    componentDidUpdate: (lastProps: IDynamicSelectProps) => void;
    focus: () => void;
    onInputValueChanged: (inputValue: string) => void;
    render(): JSX.Element;
}
