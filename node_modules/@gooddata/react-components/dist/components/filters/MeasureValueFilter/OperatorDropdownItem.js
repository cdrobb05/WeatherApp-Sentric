"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var React = require("react");
var react_intl_1 = require("react-intl");
var classnames_1 = require("classnames");
var noop = require("lodash/noop");
var capitalize = require("lodash/capitalize");
var js_utils_1 = require("@gooddata/js-utils");
var BubbleHoverTrigger_1 = require("@gooddata/goodstrap/lib/Bubble/BubbleHoverTrigger");
var Bubble_1 = require("@gooddata/goodstrap/lib/Bubble/Bubble");
var measureValueFilterOperator_1 = require("../../../helpers/measureValueFilterOperator");
var OperatorDropdownItem = /** @class */ (function (_super) {
    __extends(OperatorDropdownItem, _super);
    function OperatorDropdownItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleOnClick = function (e) {
            var _a = _this.props, operator = _a.operator, onClick = _a.onClick;
            onClick(operator);
            e.preventDefault();
        };
        return _this;
    }
    OperatorDropdownItem.prototype.render = function () {
        var _a = this.props, intl = _a.intl, operator = _a.operator, selectedOperator = _a.selectedOperator, bubbleText = _a.bubbleText;
        var className = classnames_1.default("gd-list-item", "gd-list-item-shortened", "s-mvf-operator-" + js_utils_1.string.simplifyText(operator), {
            "is-selected": selectedOperator === operator,
        });
        var title = intl.formatMessage({ id: measureValueFilterOperator_1.getOperatorTranslationKey(operator) });
        return (React.createElement("div", { className: className, onClick: this.handleOnClick },
            React.createElement("div", { className: "icon-" + measureValueFilterOperator_1.getOperatorIcon(operator), title: title }),
            React.createElement("span", { title: title }, capitalize(title)),
            bubbleText && this.renderBubble(bubbleText)));
    };
    OperatorDropdownItem.prototype.renderBubble = function (message) {
        return (React.createElement("div", { className: "tooltip-bubble" },
            React.createElement(BubbleHoverTrigger_1.default, { tagName: "div", showDelay: 400, hideDelay: 200 },
                React.createElement("div", { className: "inlineBubbleHelp" }),
                React.createElement(Bubble_1.default, { className: "bubble-primary", alignPoints: [{ align: "tc bl" }] }, message))));
    };
    OperatorDropdownItem.defaultProps = {
        onClick: noop,
        bubbleText: null,
    };
    return OperatorDropdownItem;
}(React.PureComponent));
exports.OperatorDropdownItem = OperatorDropdownItem;
exports.default = react_intl_1.injectIntl(OperatorDropdownItem);
//# sourceMappingURL=OperatorDropdownItem.js.map