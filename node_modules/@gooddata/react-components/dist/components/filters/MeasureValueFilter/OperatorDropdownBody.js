"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var React = require("react");
var react_intl_1 = require("react-intl");
var Overlay_1 = require("@gooddata/goodstrap/lib/core/Overlay");
var MenuList_1 = require("@gooddata/goodstrap/lib/List/MenuList");
var OperatorDropdownItem_1 = require("./OperatorDropdownItem");
var Operator = require("../../../constants/measureValueFilterOperators");
var OperatorDropdownBody = /** @class */ (function (_super) {
    __extends(OperatorDropdownBody, _super);
    function OperatorDropdownBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OperatorDropdownBody.prototype.render = function () {
        var _a = this.props, onSelect = _a.onSelect, onClose = _a.onClose, selectedOperator = _a.selectedOperator, alignTo = _a.alignTo, intl = _a.intl;
        return (React.createElement(Overlay_1.default, { closeOnOutsideClick: true, alignTo: alignTo, alignPoints: [{ align: "bl tl" }], onClose: onClose },
            React.createElement("div", { className: "gd-dropdown overlay" },
                React.createElement("div", { className: "gd-mvf-operator-dropdown-body s-mvf-operator-dropdown-body" },
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.ALL, selectedOperator: selectedOperator, onClick: onSelect }),
                    React.createElement(MenuList_1.Separator, null),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.GREATER_THAN, selectedOperator: selectedOperator, onClick: onSelect }),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.GREATER_THAN_OR_EQUAL_TO, selectedOperator: selectedOperator, onClick: onSelect }),
                    React.createElement(MenuList_1.Separator, null),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.LESS_THAN, selectedOperator: selectedOperator, onClick: onSelect }),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.LESS_THAN_OR_EQUAL_TO, selectedOperator: selectedOperator, onClick: onSelect }),
                    React.createElement(MenuList_1.Separator, null),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.BETWEEN, selectedOperator: selectedOperator, onClick: onSelect, bubbleText: intl.formatMessage({ id: "mvf.operator.between.tooltip.bubble" }) }),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.NOT_BETWEEN, selectedOperator: selectedOperator, onClick: onSelect, bubbleText: intl.formatMessage({ id: "mvf.operator.notBetween.tooltip.bubble" }) }),
                    React.createElement(MenuList_1.Separator, null),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.EQUAL_TO, selectedOperator: selectedOperator, onClick: onSelect }),
                    React.createElement(OperatorDropdownItem_1.default, { operator: Operator.NOT_EQUAL_TO, selectedOperator: selectedOperator, onClick: onSelect })))));
    };
    return OperatorDropdownBody;
}(React.PureComponent));
exports.OperatorDropdownBody = OperatorDropdownBody;
exports.default = react_intl_1.injectIntl(OperatorDropdownBody);
//# sourceMappingURL=OperatorDropdownBody.js.map