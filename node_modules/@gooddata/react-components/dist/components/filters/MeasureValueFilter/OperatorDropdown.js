"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var React = require("react");
var react_intl_1 = require("react-intl");
var classnames_1 = require("classnames");
var capitalize = require("lodash/capitalize");
var js_utils_1 = require("@gooddata/js-utils");
var Button_1 = require("@gooddata/goodstrap/lib/Button/Button");
var OperatorDropdownBody_1 = require("./OperatorDropdownBody");
var measureValueFilterOperator_1 = require("../../../helpers/measureValueFilterOperator");
var OperatorDropdown = /** @class */ (function (_super) {
    __extends(OperatorDropdown, _super);
    function OperatorDropdown() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = {
            opened: false,
        };
        _this.render = function () { return (React.createElement(React.Fragment, null,
            _this.renderDropdownButton(),
            _this.state.opened ? (React.createElement(OperatorDropdownBody_1.default, { alignTo: ".gd-mvf-operator-dropdown-button", onSelect: _this.handleOperatorSelected, selectedOperator: _this.props.operator, onClose: _this.closeOperatorDropdown })) : null)); };
        _this.handleOperatorSelected = function (operator) {
            _this.closeOperatorDropdown();
            _this.props.onSelect(operator);
        };
        _this.closeOperatorDropdown = function () { return _this.setState({ opened: false }); };
        _this.handleOperatorDropdownButtonClick = function () {
            return _this.setState(function (state) { return (__assign({}, state, { opened: !state.opened })); });
        };
        return _this;
    }
    OperatorDropdown.prototype.renderDropdownButton = function () {
        var _a = this.props, intl = _a.intl, operator = _a.operator;
        var opened = this.state.opened;
        var title = capitalize(intl.formatMessage({ id: measureValueFilterOperator_1.getOperatorTranslationKey(operator) }));
        var buttonClasses = classnames_1.default("gd-mvf-operator-dropdown-button", "s-mvf-operator-dropdown-button", "s-mvf-operator-dropdown-button-" + js_utils_1.string.simplifyText(operator), "gd-button-primary", "gd-button-small", {
            "button-dropdown": true,
            "is-dropdown-open": opened,
            "is-active": opened,
        });
        return (React.createElement(Button_1.default, { title: title, className: buttonClasses, value: title, onClick: this.handleOperatorDropdownButtonClick, iconLeft: "icon-" + measureValueFilterOperator_1.getOperatorIcon(operator), iconRight: opened ? "icon-navigateup" : "icon-navigatedown" }));
    };
    return OperatorDropdown;
}(React.PureComponent));
exports.OperatorDropdown = OperatorDropdown;
exports.default = react_intl_1.injectIntl(OperatorDropdown);
//# sourceMappingURL=OperatorDropdown.js.map