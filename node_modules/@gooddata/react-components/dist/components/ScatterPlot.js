"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2018 GoodData Corporation
var React = require("react");
var omit = require("lodash/omit");
var ScatterPlot_1 = require("./afm/ScatterPlot");
var conversion_1 = require("../helpers/conversion");
var dimensions_1 = require("../helpers/dimensions");
var resultSpec_1 = require("../helpers/resultSpec");
var bucketNames_1 = require("../constants/bucketNames");
var generateScatterDimensionsFromBuckets = function (buckets) {
    return dimensions_1.generateDefaultDimensionsForPointsCharts(conversion_1.convertBucketsToAFM(buckets));
};
/**
 * [ScatterPlot](http://sdk.gooddata.com/gooddata-ui/docs/scatter_plot_component.html)
 * is a component with bucket props xAxisMeasure, yAxisMeasure, attribute, filters
 */
function ScatterPlot(props) {
    var buckets = [
        {
            localIdentifier: bucketNames_1.MEASURES,
            items: props.xAxisMeasure ? [props.xAxisMeasure] : [],
        },
        {
            localIdentifier: bucketNames_1.SECONDARY_MEASURES,
            items: props.yAxisMeasure ? [props.yAxisMeasure] : [],
        },
        {
            localIdentifier: bucketNames_1.ATTRIBUTE,
            items: props.attribute ? [props.attribute] : [],
        },
    ];
    var newProps = omit(props, ["xAxisMeasure", "yAxisMeasure", "attribute", "filters", "sortBy"]);
    newProps.config = __assign({}, newProps.config, { mdObject: conversion_1.convertBucketsToMdObject(buckets, props.filters, "local:scatter") });
    return (React.createElement(ScatterPlot_1.ScatterPlot, __assign({}, newProps, { projectId: props.projectId, afm: conversion_1.convertBucketsToAFM(buckets, props.filters), resultSpec: resultSpec_1.getResultSpec(buckets, props.sortBy, generateScatterDimensionsFromBuckets) })));
}
exports.ScatterPlot = ScatterPlot;
//# sourceMappingURL=ScatterPlot.js.map