"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2019 GoodData Corporation
var React = require("react");
var omit = require("lodash/omit");
var ColumnChart_1 = require("./afm/ColumnChart");
var conversion_1 = require("../helpers/conversion");
var resultSpec_1 = require("../helpers/resultSpec");
var bucketNames_1 = require("../constants/bucketNames");
var common_1 = require("../helpers/optionalStacking/common");
/**
 * [ColumnChart](http://sdk.gooddata.com/gooddata-ui/docs/column_chart_component.html)
 * is a component with bucket props measures, viewBy, stackBy, filters
 */
function ColumnChart(props) {
    var measures = common_1.sanitizeComputeRatioOnMeasures(props.measures);
    var viewBy = common_1.getViewByTwoAttributes(props.viewBy); // could be one or two attributes
    var stackBy = props.stackBy ? [props.stackBy] : [];
    var buckets = [
        {
            localIdentifier: bucketNames_1.MEASURES,
            items: measures,
        },
        {
            localIdentifier: bucketNames_1.ATTRIBUTE,
            items: viewBy,
        },
        {
            localIdentifier: bucketNames_1.STACK,
            items: stackBy,
        },
    ];
    var newProps = omit(props, ["measures", "viewBy", "stackBy", "filters", "sortBy"]);
    var sanitizedConfig = common_1.sanitizeConfig(measures, newProps.config);
    return (React.createElement(ColumnChart_1.ColumnChart, __assign({}, newProps, { config: sanitizedConfig, projectId: props.projectId, afm: conversion_1.convertBucketsToAFM(buckets, props.filters), resultSpec: resultSpec_1.getStackingResultSpec(buckets, props.sortBy) })));
}
exports.ColumnChart = ColumnChart;
//# sourceMappingURL=ColumnChart.js.map