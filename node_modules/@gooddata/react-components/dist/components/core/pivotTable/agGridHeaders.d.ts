import { Execution } from "@gooddata/typings";
import { IMappingHeader } from "../../../interfaces/MappingHeader";
import { IColumnDefOptions, IGridHeader } from "./agGridTypes";
export declare const identifyHeader: (header: Execution.IResultHeaderItem) => string;
export declare const identifyResponseHeader: (header: Execution.IHeader) => string;
export declare const headerToGrid: (header: Execution.IResultHeaderItem, fieldPrefix?: string) => {
    headerName: any;
    field: string;
};
export declare const shouldMergeHeaders: (resultHeaderDimension: Execution.IResultHeaderItem[][], headerIndex: number, headerItemIndex: number) => boolean;
export declare const mergeHeaderEndIndex: (resultHeaderDimension: Execution.IResultHeaderItem[][], headerIndex: number, headerItemStartIndex: number) => number;
export declare const getColumnHeaders: (resultHeaderDimension: Execution.IResultHeaderItem[][], responseHeaders: Execution.IHeader[], columnDefOptions?: IColumnDefOptions, headerIndex?: number, headerItemStartIndex?: number, headerValueEnd?: number, fieldPrefix?: string, parentDrillItems?: IMappingHeader[]) => IGridHeader[];
export declare const getRowHeaders: (rowDimensionHeaders: Execution.IAttributeHeader[], columnDefOptions: IColumnDefOptions, makeRowGroups: boolean) => IGridHeader[];
export declare const getFields: (dataHeaders: Execution.IResultHeaderItem[][]) => string[];
export declare const assortDimensionHeaders: (dimensions: Execution.IResultDimension[]) => {
    attributeHeaders: Execution.IAttributeHeader[];
    measureHeaderItems: Execution.IMeasureHeaderItem[];
};
export declare const getMinimalRowData: (data: (string | number)[][], rowHeaderItems: Execution.IResultHeaderItem[][]) => (string | number)[][];
