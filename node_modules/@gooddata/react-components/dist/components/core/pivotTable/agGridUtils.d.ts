import { ICellRendererParams, ColDef, Column } from "ag-grid-community";
import { AFM, Execution } from "@gooddata/typings";
import { IGridHeader } from "./agGridTypes";
export declare const sanitizeField: (field: string) => string;
export declare const getIdsFromUri: (uri: string, sanitize?: boolean) => string[];
export declare const getParsedFields: (colId: string) => string[][];
export declare const colIdIsSimpleAttribute: (colId: string) => boolean;
export declare const getRowNodeId: (item: any) => string;
export declare const getGridIndex: (position: number, gridDistance: number) => number;
export declare const cellRenderer: (params: ICellRendererParams) => string;
export declare const getTreeLeaves: (tree: any, getChildren?: (node: any) => any) => any[];
export declare const indexOfTreeNode: (node: any, tree: any, matchNode?: (nodeA: any, nodeB: any) => boolean, getChildren?: (node: any) => any, indexes?: number[]) => number[];
export declare function isMeasureColumnReadyToRender(params: any, execution: Execution.IExecutionResponses): boolean;
export declare function getMeasureFormat(gridHeader: IGridHeader, execution: Execution.IExecutionResponses): string;
export declare function getSubtotalStyles(dimension: AFM.IDimension): string[];
export declare function generateAgGridComponentKey(afm: AFM.IAfm, rendererId: number): string;
export declare function getLastFieldType(fields: string[][]): string;
export declare function getLastFieldId(fields: string[][]): string;
export declare function getAttributeLocators(fields: string[][], attributeHeaders: Execution.IAttributeHeader[]): {
    attributeLocatorItem: {
        attributeIdentifier: string;
        element: string;
    };
}[];
export declare const getColumnIdentifierFromDef: (colDef: ColDef | IGridHeader) => string;
export declare const getColumnIdentifier: (item: Column | ColDef | IGridHeader) => string;
export declare function isColumn(item: Column | ColDef): item is Column;
export declare const isMeasureColumn: (item: Column | ColDef) => boolean;
export declare const sanitizeFingerprint: (fingerprint: string) => string;
export declare const isColumnDisplayed: (displayedColumns: Column[], column: Column) => boolean;
export declare const getMappingHeaderMeasureItemLocalIdentifier: (item: Column | ColDef) => string;
