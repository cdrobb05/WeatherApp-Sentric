"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2020 GoodData Corporation
var React = require("react");
var classnames_1 = require("classnames");
var js_utils_1 = require("@gooddata/js-utils");
var FormattedPreview_1 = require("../customFormatDialog/shared/FormattedPreview");
var PresetsDropdownItem = /** @class */ (function (_super) {
    __extends(PresetsDropdownItem, _super);
    function PresetsDropdownItem() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleOnClick = function (e) {
            var _a = _this.props, preset = _a.preset, onClick = _a.onClick;
            onClick(preset);
            e.preventDefault();
        };
        return _this;
    }
    PresetsDropdownItem.prototype.render = function () {
        var _a = this.props, preset = _a.preset, separators = _a.separators, isSelected = _a.isSelected;
        var localIdentifier = preset.localIdentifier, name = preset.name, previewNumber = preset.previewNumber, format = preset.format;
        var className = classnames_1.default("gd-list-item", "gd-format-preset", "s-format-preset-" + localIdentifier, "s-format-preset-name-" + js_utils_1.string.simplifyText(name), {
            "is-selected": isSelected,
        });
        return (React.createElement("div", { className: className, onClick: this.handleOnClick },
            React.createElement("span", { title: name, className: "gd-format-preset-name gd-list-item-shortened" }, name),
            previewNumber !== null && format !== null && (React.createElement(FormattedPreview_1.FormattedPreview, { previewNumber: previewNumber, format: format, separators: separators, colors: false, className: "gd-format-preset-preview" }))));
    };
    PresetsDropdownItem.defaultProps = {
        isSelected: false,
    };
    return PresetsDropdownItem;
}(React.PureComponent));
exports.PresetsDropdownItem = PresetsDropdownItem;
//# sourceMappingURL=PresetsDropdownItem.js.map