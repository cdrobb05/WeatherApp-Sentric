"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019 GoodData Corporation
var React = require("react");
var isFunction = require("lodash/isFunction");
var isString = require("lodash/isString");
var toPairs = require("lodash/toPairs");
// @ts-ignore The typings are not compatible with current react typings and upgrade is not feasible now
var hoistNonReactStatics = require("hoist-non-react-statics");
var objectToModelNotation_1 = require("../helpers/model/objectToModelNotation");
var getDisplayName = function (WrappedComponent) {
    return WrappedComponent.displayName || WrappedComponent.name || "Component";
};
exports.withJsxExport = function (Component) {
    var _a;
    var result = (_a = /** @class */ (function (_super) {
            __extends(class_1, _super);
            function class_1() {
                var _this = _super !== null && _super.apply(this, arguments) || this;
                _this.toJsx = function () {
                    var stringifiedProps = toPairs(_this.props)
                        // we ignore functions as there is no bullet-proof to serialize them
                        .filter(function (_a) {
                        var _ = _a[0], value = _a[1];
                        return !isFunction(value);
                    })
                        .map(function (_a) {
                        var key = _a[0], value = _a[1];
                        return isString(value) ? key + "=\"" + value + "\"" : key + "={" + objectToModelNotation_1.getModelNotationFor(value) + "}";
                    });
                    var paddedPropDeclarations = stringifiedProps.join("\n").replace(/^/gm, "    ");
                    return "<" + getDisplayName(Component) + "\n" + paddedPropDeclarations + "\n/>";
                };
                return _this;
            }
            class_1.prototype.render = function () {
                return React.createElement(Component, __assign({}, this.props));
            };
            return class_1;
        }(React.Component)),
        _a.displayName = "WithJsxExport(" + getDisplayName(Component) + ")",
        _a);
    hoistNonReactStatics(result, Component);
    return result;
};
//# sourceMappingURL=withJsxExport.js.map