"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var flatMap = require("lodash/flatMap");
var visualizationTypes_1 = require("../../../../../constants/visualizationTypes");
var helpers_1 = require("../helpers");
var dataLabelsHelpers_1 = require("../dataLabelsHelpers");
var color_1 = require("../../../utils/color");
var common_1 = require("../../../utils/common");
var setWhiteColor = function (point) {
    point.dataLabel.element.childNodes[0].style.fill = "#fff";
    point.dataLabel.element.childNodes[0].style["text-shadow"] = "rgb(0, 0, 0) 0px 0px 1px";
};
var setBlackColor = function (point) {
    point.dataLabel.element.childNodes[0].style.fill = "#000";
    point.dataLabel.element.childNodes[0].style["text-shadow"] = "none";
};
var changeDataLabelsColor = function (condition, point) {
    return condition ? setWhiteColor(point) : setBlackColor(point);
};
function getVisiblePointsWithLabel(chart) {
    return flatMap(helpers_1.getVisibleSeries(chart), function (series) { return series.points; }).filter(function (point) { return point.dataLabel && point.graphic; });
}
function setBarDataLabelsColor(chart) {
    var points = getVisiblePointsWithLabel(chart);
    return points.forEach(function (point) {
        var labelDimensions = dataLabelsHelpers_1.getDataLabelAttributes(point);
        var barDimensions = helpers_1.getShapeAttributes(point);
        var barRight = barDimensions.x + barDimensions.width;
        var barLeft = barDimensions.x;
        var labelLeft = labelDimensions.x;
        if (point.negative) {
            if (labelLeft > barLeft) {
                // labelRight is overlapping bar even it is outside of it
                setWhiteColor(point);
            }
            else {
                setBlackColor(point);
            }
        }
        else {
            if (labelLeft < barRight) {
                setWhiteColor(point);
            }
            else {
                setBlackColor(point);
            }
        }
    });
}
function setColumnDataLabelsColor(chart) {
    var points = getVisiblePointsWithLabel(chart);
    return points
        .filter(function (point) { return point.shapeArgs; }) // skip if shapeArgs missing (such as line points in line/column combo chart)
        .forEach(function (point) {
        var labelDimensions = dataLabelsHelpers_1.getDataLabelAttributes(point);
        var columnDimensions = helpers_1.getShapeAttributes(point);
        var columnTop = columnDimensions.y + columnDimensions.height;
        var columnDown = columnDimensions.y;
        var labelDown = labelDimensions.y;
        if (point.negative) {
            changeDataLabelsColor(labelDown < columnDown, point);
        }
        else if (!helpers_1.isStacked(chart)) {
            changeDataLabelsColor(labelDown > columnTop, point);
        }
        else {
            changeDataLabelsColor(labelDown < columnTop, point);
        }
    });
}
function isWhiteNotContrastEnough(color) {
    // to keep first 17 colors from our default palette with white labels
    var HIGHCHARTS_CONTRAST_THRESHOLD = 530;
    var _a = color_1.parseRGBColorCode(color), R = _a.R, G = _a.G, B = _a.B;
    var lightnessHCH = R + G + B;
    return lightnessHCH > HIGHCHARTS_CONTRAST_THRESHOLD;
}
exports.isWhiteNotContrastEnough = isWhiteNotContrastEnough;
function setContrastLabelsColor(chart) {
    var points = getVisiblePointsWithLabel(chart);
    return points.forEach(function (point) {
        if (isWhiteNotContrastEnough(point.color)) {
            setBlackColor(point);
        }
        else {
            setWhiteColor(point);
        }
    });
}
function extendDataLabelColors(Highcharts) {
    Highcharts.Chart.prototype.callbacks.push(function (chart) {
        var type = helpers_1.getChartType(chart);
        var changeLabelColor = function () {
            if (type === visualizationTypes_1.VisualizationTypes.BAR) {
                setTimeout(function () {
                    setBarDataLabelsColor(chart);
                }, 500);
            }
            else if (common_1.isOneOfTypes(type, [visualizationTypes_1.VisualizationTypes.COLUMN, visualizationTypes_1.VisualizationTypes.PIE])) {
                setTimeout(function () {
                    setColumnDataLabelsColor(chart);
                }, 500);
            }
            else if (common_1.isOneOfTypes(type, [visualizationTypes_1.VisualizationTypes.HEATMAP, visualizationTypes_1.VisualizationTypes.TREEMAP])) {
                setContrastLabelsColor(chart);
            }
        };
        changeLabelColor();
        Highcharts.addEvent(chart, "redraw", changeLabelColor);
    });
}
exports.extendDataLabelColors = extendDataLabelColors;
//# sourceMappingURL=dataLabelsColors.js.map