"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2007-2020 GoodData Corporation
var isEmpty = require("lodash/isEmpty");
var common_1 = require("../../../utils/common");
function groupCategoriesWrapper(Highcharts) {
    var wrap = Highcharts.wrap;
    function hideGridInXAxis() {
        if (this.labelsGrid) {
            // hide the grid (or border) that covers X axis
            this.labelsGrid.hide();
        }
    }
    wrap(Highcharts.Axis.prototype, "render", function (proceed) {
        // default behaviour
        proceed.apply(this, Array.prototype.slice.call(arguments, 1));
        hideGridInXAxis.call(this);
    });
    wrap(Highcharts.Tick.prototype, "getPosition", function (proceed, horiz, tickPos, tickmarkOffset, old) {
        var _a = this, _b = _a.axis, categories = _b.categories, isXAxis = _b.isXAxis, height = _b.height, type = _b.chart.options.chart.type, parent = _a.parent;
        var hasParent = !isEmpty(parent);
        var hasOneICategory = categories.length === 1;
        var shouldAlignMiddle = common_1.isInvertedChartType(type) && isXAxis && hasParent && this.isNewLabel && hasOneICategory;
        // for xAxis of bar chart, must update vertical align in the middle
        // of datalabel for parent category when filtering one value
        if (shouldAlignMiddle) {
            parent.labelOffsets.y = height / 2;
        }
        var pos = proceed.call(this, horiz, tickPos, tickmarkOffset, old);
        proceed.apply(this, pos);
        return pos;
    });
}
exports.groupCategoriesWrapper = groupCategoriesWrapper;
//# sourceMappingURL=group-categories-wrapper.js.map