import { AFM, Execution } from "@gooddata/typings";
import { IColor, IColorItem } from "@gooddata/gooddata-js";
import { IColorPalette, IColorPaletteItem, IColorMapping } from "../../../interfaces/Config";
import { IHeaderPredicate } from "../../../interfaces/HeaderPredicate";
import { IMappingHeader } from "../../../interfaces/MappingHeader";
export declare const WHITE = "rgb(255, 255, 255)";
export declare const BLACK = "rgb(0, 0, 0)";
export declare const GRAY = "rgb(201, 213, 223)";
export declare const AXIS_LINE_COLOR = "#d5d5d5";
export declare const TRANSPARENT = "transparent";
export declare const DEFAULT_COLORS: string[];
export declare const DEFAULT_COLOR_PALETTE: {
    guid: string;
    fill: {
        r: number;
        g: number;
        b: number;
    };
}[];
export declare const HEATMAP_BLUE_COLOR_PALETTE: string[];
export declare const DEFAULT_HEATMAP_BLUE_COLOR: IColor;
export declare const DEFAULT_BULLET_GRAY_COLOR: IColor;
export declare function parseRGBColorCode(color: string): {
    R: number;
    G: number;
    B: number;
};
/**
 * Source:
 *     http://stackoverflow.com/questions/5560248/programmatically-lighten-or-darken-a-hex-color-or-rgb-and-blend-colors
 */
export declare function getLighterColor(color: string, percent: number): string;
export declare function getLighterColorFromRGB(color: IColor, percent: number): {
    r: number;
    g: number;
    b: number;
};
export declare function normalizeColorToRGB(color: string): string;
export declare function getColorPaletteFromColors(colors: string[]): IColorPalette;
export declare function getRgbString(color: IColorPaletteItem): string;
export declare function getValidColorPalette(colors?: string[], colorPalette?: IColorPalette): {
    guid: string;
    fill: {
        r: number;
        g: number;
        b: number;
    };
}[];
export declare function isCustomPalette(palette: IColorPalette): boolean;
export declare function getColorFromMapping(mappingHeader: IMappingHeader, colorMapping: IColorMapping[], executionResponse: Execution.IExecutionResponse, afm: AFM.IAfm): IColorItem;
export declare function getColorByGuid(colorPalette: IColorPalette, guid: string, index: number): IColor;
export declare function getRgbStringFromRGB(color: IColor): string;
export declare function getColorMappingPredicate(idOrUri: string): IHeaderPredicate;
export declare function getColorPalette(baseColor: string | IColor, opacity?: number): string[];
export declare function rgbToRgba(color: string, opacity?: number): string;
declare const _default: {
    getColorByGuid: typeof getColorByGuid;
    getColorMappingPredicate: typeof getColorMappingPredicate;
};
export default _default;
