"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var get = require("lodash/get");
var isEqual = require("lodash/isEqual");
var bucketNames_1 = require("../../constants/bucketNames");
function getGeoAttributeHeaderItems(executionResult, geoData) {
    var color = geoData.color, size = geoData.size;
    var hasColorMeasure = color !== undefined;
    var hasSizeMeasure = size !== undefined;
    var attrHeaderItemIndex = hasColorMeasure || hasSizeMeasure ? 1 : 0;
    var attributeHeaderItems = executionResult.headerItems[attrHeaderItemIndex];
    return attributeHeaderItems;
}
exports.getGeoAttributeHeaderItems = getGeoAttributeHeaderItems;
function isDataOfReasonableSize(executionResult, geoData, limit) {
    var location = geoData.location;
    var attributeHeaderItems = getGeoAttributeHeaderItems(executionResult, geoData);
    var locationData = location !== undefined ? attributeHeaderItems[location.index] : [];
    return locationData.length <= limit;
}
exports.isDataOfReasonableSize = isDataOfReasonableSize;
function isLocationMissing(buckets) {
    var locationBucket = buckets.find(function (bucket) { return bucket.localIdentifier === bucketNames_1.LOCATION; });
    return !locationBucket || !locationBucket.items.length;
}
exports.isLocationMissing = isLocationMissing;
function calculateAverage(values) {
    if (values === void 0) { values = []; }
    if (!values.length) {
        return 0;
    }
    return values.reduce(function (a, b) { return a + b; }, 0) / values.length;
}
exports.calculateAverage = calculateAverage;
function getFormatFromExecutionResponse(result, indexMeasure) {
    return get(result, "dimensions[0].headers[0].measureGroupHeader.items[" + indexMeasure + "].measureHeaderItem.format");
}
exports.getFormatFromExecutionResponse = getFormatFromExecutionResponse;
// show clusters when there is location attribute only
function isClusteringAllowed(geoData, groupNearbyPoints) {
    if (groupNearbyPoints === void 0) { groupNearbyPoints = true; }
    var color = geoData.color, location = geoData.location, segment = geoData.segment, size = geoData.size;
    return groupNearbyPoints && location && !(color || segment || size);
}
exports.isClusteringAllowed = isClusteringAllowed;
function isGeoConfig(config) {
    return config.mapboxToken !== undefined;
}
exports.isGeoConfig = isGeoConfig;
function isChartConfig(config) {
    return !isGeoConfig(config);
}
exports.isChartConfig = isChartConfig;
function isPointsConfigChanged(prevPointsConfig, pointsConfig) {
    return !isEqual(prevPointsConfig, pointsConfig);
}
exports.isPointsConfigChanged = isPointsConfigChanged;
function isFluidLegendEnabled(responsive, showFluidLegend) {
    return responsive && showFluidLegend;
}
exports.isFluidLegendEnabled = isFluidLegendEnabled;
function isColorAssignmentItemChanged(prevColorAssigment, colorAssigment) {
    return !isEqual(prevColorAssigment, colorAssigment);
}
exports.isColorAssignmentItemChanged = isColorAssignmentItemChanged;
function isTooltipTextValueString(tooltipText) {
    return typeof tooltipText === "string";
}
exports.isTooltipTextValueString = isTooltipTextValueString;
//# sourceMappingURL=common.js.map