import { Execution } from "@gooddata/typings";
import { IUnwrappedAttributeHeaderWithItems } from "../components/visualizations/typings/chart";
import { IMappingHeader } from "../interfaces/MappingHeader";
export declare function findInDimensionHeaders(dimensions: Execution.IResultDimension[], headerCallback: (headerType: string, header: any, dimensionIndex: number, headerIndex: number, headerCount: number) => any): any;
export declare function findMeasureGroupInDimensions(dimensions: Execution.IResultDimension[]): Execution.IMeasureGroupHeader["measureGroupHeader"];
export declare function findAttributeInDimension(dimension: Execution.IResultDimension, attributeHeaderItemsDimension: Execution.IResultHeaderItem[][], indexInDimension?: number): IUnwrappedAttributeHeaderWithItems;
export declare function findMeasureHeaderByLocalIdentifier(executionResponse: Execution.IExecutionResponse, localIdentifier: string): IMappingHeader;
export declare function getNthAttributeHeader(attributeHeaders: Execution.IAttributeHeader[], headerIndex: number): Execution.IAttributeHeader["attributeHeader"];
export declare function getNthAttributeLocalIdentifier(rowAttributeHeaders: Execution.IAttributeHeader[], headerIndex: number): string;
export declare function getNthAttributeName(rowAttributeHeaders: Execution.IAttributeHeader[], headerIndex: number): string;
export declare function getNthDimensionHeaders(executionResponse: Execution.IExecutionResponse, headerIndex: number): Execution.IHeader[];
export declare function getHeaderItemName(headerItem: Execution.IResultHeaderItem): string;
export declare function getAttributeHeadersInDimension(dimensions: Execution.IResultDimension[]): Array<Execution.IAttributeHeader["attributeHeader"]>;
export declare function getMeasureGroupHeaderItemsInDimension(dimensions: Execution.IResultDimension[]): Execution.IMeasureHeaderItem[];
export declare function isTwoDimensionsData(data: Execution.DataValue[][] | Execution.DataValue[]): data is Execution.DataValue[][];
