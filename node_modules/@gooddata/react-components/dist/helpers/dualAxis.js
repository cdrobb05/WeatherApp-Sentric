"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)
            t[p[i]] = s[p[i]];
    return t;
};
Object.defineProperty(exports, "__esModule", { value: true });
var get = require("lodash/get");
var mdObjBucketHelper_1 = require("./mdObjBucketHelper");
var common_1 = require("../components/visualizations/utils/common");
function setMeasuresToSecondaryAxis(config) {
    if (config === void 0) { config = {}; }
    var isDualAxis = get(config, "dualAxis", true);
    var type = get(config, "type");
    var secondaryYAxis = config.secondary_yaxis, remainConfig = __rest(config, ["secondary_yaxis"]);
    var buckets = get(config, "mdObject.buckets");
    var secondaryIdentifierMeasures = mdObjBucketHelper_1.getSecondaryMeasuresLocalIdentifiers(buckets);
    if (!common_1.isComboChart(type)) {
        return config;
    }
    if (!isDualAxis) {
        return remainConfig;
    }
    return __assign({}, remainConfig, { secondary_yaxis: __assign({}, secondaryYAxis, { measures: secondaryIdentifierMeasures }) });
}
exports.setMeasuresToSecondaryAxis = setMeasuresToSecondaryAxis;
//# sourceMappingURL=dualAxis.js.map