import { AFM, VisualizationObject } from "@gooddata/typings";
import { VisType } from "../constants/visualizationTypes";
export declare function getDimensionTotals(bucket: VisualizationObject.IBucket): AFM.ITotalItem[];
export declare function getPivotTableDimensions(buckets: VisualizationObject.IBucket[]): AFM.IDimension[];
export declare function getTableDimensions(buckets: VisualizationObject.IBucket[]): AFM.IDimension[];
export declare function getHeadlinesDimensions(): AFM.IDimension[];
export declare function getXirrDimensions(mdObject: VisualizationObject.IVisualizationObjectContent): AFM.IDimension[];
export declare function getGeoChartDimensions(buckets: VisualizationObject.IBucket[]): AFM.IDimension[];
export declare function getHeatmapDimensionsFromMdObj(mdObject: VisualizationObject.IVisualizationObjectContent): AFM.IDimension[];
export declare function getHeatmapDimensionsFromBuckets(buckets: VisualizationObject.IBucket[]): AFM.IDimension[];
/**
 * generateDimensions
 * is a function that generates dimensions based on buckets and visualization objects.
 * WARNING: It duplicates logic from pluggable visualizations.
 *          Remove once react components support pluggable visualizations.
 * @param mdObject:VisualizationObject.IVisualizationObjectContent - metadata object with buckets
 * @param type:VisType - visualization type string
 * @internal
 */
export declare function generateDimensions(mdObject: VisualizationObject.IVisualizationObjectContent, type: VisType): AFM.IDimension[];
export declare function generateStackedDimensions(buckets: VisualizationObject.IBucket[]): AFM.IDimension[];
export declare function generateDefaultDimensions(afm: AFM.IAfm): AFM.IDimension[];
export declare function isStackedChart(buckets: VisualizationObject.IBucket[], stackedBuckedName?: string): boolean;
export declare function generateDefaultDimensionsForPointsCharts(afm: AFM.IAfm): AFM.IDimension[];
export declare const generateDefaultDimensionsForRoundChart: (afm: AFM.IAfm) => AFM.IDimension[];
export declare function getTreemapDimensionsFromMdObj(mdObject: VisualizationObject.IVisualizationObjectContent): AFM.IDimension[];
export declare function getTreemapDimensionsFromBuckets(buckets: VisualizationObject.IBucket[]): AFM.IDimension[];
export declare function getTreemapDimensionsFromAFM(afm: AFM.IAfm): AFM.IDimension[];
export declare function getGeneralDimensionsFromAFM(afm: AFM.IAfm): AFM.IDimension[];
