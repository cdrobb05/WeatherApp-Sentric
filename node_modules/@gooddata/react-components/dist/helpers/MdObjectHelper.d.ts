import { VisualizationObject, AFM } from "@gooddata/typings";
import { IMeasureTitleProps, IArithmeticMeasureTitleProps } from "../interfaces/MeasureTitle";
import IMeasure = VisualizationObject.IMeasure;
import IArithmeticMeasureDefinition = VisualizationObject.IArithmeticMeasureDefinition;
import { IPivotTableBucketProps } from "../components/PivotTable";
import { IAxisConfig } from "../interfaces/Config";
import { IGeoConfig, IGeoPushpinChartProps } from "../interfaces/GeoChart";
declare function getTotals(mdObject: VisualizationObject.IVisualizationObject): VisualizationObject.IVisualizationTotal[];
declare function getVisualizationClassUri(mdObject: VisualizationObject.IVisualizationObject): string;
/**
 * Build properties object used by the {ArithmeticMeasureTitleFactory} to not be dependent on the
 * {VisualizationObject.IMeasure}. It contains all the necessary properties related to the measure title.
 * @param measures - The measures that will be converted.
 * @return The array of {IMeasureTitleProps} objects.
 *
 * @internal
 */
declare function buildMeasureTitleProps(measures: IMeasure[]): IMeasureTitleProps[];
/**
 * Build properties object used by the {ArithmeticMeasureTitleFactory} to not be dependent on the
 * {VisualizationObject.IArithmeticMeasureDefinition}. It contains all the necessary properties from the arithmetic
 * measure.
 * @param measureDefinition - The definition of the arithmetic measure that will be converted.
 * @return {IArithmeticMeasureTitleProps}
 *
 * @internal
 */
declare function buildArithmeticMeasureTitleProps(measureDefinition: IArithmeticMeasureDefinition): IArithmeticMeasureTitleProps;
export declare const mdObjectToGeoPushpinBucketProps: (config: IGeoConfig, mdObject: VisualizationObject.IVisualizationObject, filtersFromProps: AFM.ExtendedFilter[]) => Partial<IGeoPushpinChartProps>;
export declare const mdObjectToPivotBucketProps: (mdObject: VisualizationObject.IVisualizationObject, filtersFromProps: AFM.ExtendedFilter[]) => IPivotTableBucketProps;
export declare function getMeasuresFromMdObject(mdObject: VisualizationObject.IVisualizationObjectContent): VisualizationObject.BucketItem[];
export declare function areAllMeasuresOnSingleAxis(mdObject: VisualizationObject.IVisualizationObjectContent, secondaryYAxis: IAxisConfig): boolean;
declare const _default: {
    getTotals: typeof getTotals;
    getVisualizationClassUri: typeof getVisualizationClassUri;
    buildMeasureTitleProps: typeof buildMeasureTitleProps;
    buildArithmeticMeasureTitleProps: typeof buildArithmeticMeasureTitleProps;
    mdObjectToGeoPushpinBucketProps: (config: IGeoConfig, mdObject: VisualizationObject.IVisualizationObject, filtersFromProps: AFM.ExtendedFilter[]) => Partial<IGeoPushpinChartProps>;
    mdObjectToPivotBucketProps: (mdObject: VisualizationObject.IVisualizationObject, filtersFromProps: AFM.ExtendedFilter[]) => IPivotTableBucketProps;
};
export default _default;
