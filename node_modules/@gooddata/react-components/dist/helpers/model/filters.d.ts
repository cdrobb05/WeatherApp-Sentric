import { VisualizationInput } from "@gooddata/typings";
export declare function positiveAttributeFilter(qualifier: string, inValues: string[], textFilter?: boolean): VisualizationInput.IPositiveAttributeFilter;
export declare function negativeAttributeFilter(qualifier: string, notInValues: string[], textFilter?: boolean): VisualizationInput.INegativeAttributeFilter;
export declare function absoluteDateFilter(dataSet: string, from?: string, to?: string): VisualizationInput.IAbsoluteDateFilter;
export declare function relativeDateFilter(dataSet: string, granularity: string, from?: number, to?: number): VisualizationInput.IRelativeDateFilter;
export declare class AttributeFilterBuilder {
    private readonly qualifier;
    constructor(qualifier: string);
    /**
     * Creates a new positive attribute value filter for the specified display form. Only attribute elements
     * matching the specified values will be included in the results.
     *
     * @param values textual values of the attribute elements
     */
    in(...values: string[]): VisualizationInput.IPositiveAttributeFilter;
    /**
     * Creates a new negative attribute value filter for the specified display form. Attribute elements matching
     * the specified values will be excluded from the results.
     *
     * @param values textual values of the attribute elements
     */
    notIn(...values: string[]): VisualizationInput.INegativeAttributeFilter;
    /**
     * Creates a new positive attribute URI filter for the specified display form. Attribute elements with the
     * specified URIs will be included in the results.
     *
     * @param uris URIs of attribute elements
     */
    inUris(...uris: string[]): VisualizationInput.IPositiveAttributeFilter;
    /**
     * Creates a new negative attribute URI filter for the specified display form. Attribute elements matching
     * the specified URIs will be excluded from the results.
     *
     * @param uris URIs of attribute elements
     */
    notInUris(...uris: string[]): VisualizationInput.INegativeAttributeFilter;
}
/**
 * Starts building a new attribute filter for the display for with the provided qualifier.
 *
 * @param qualifier URI or identifier of display form to filter on
 */
export declare function attributeFilter(qualifier: string): AttributeFilterBuilder;
