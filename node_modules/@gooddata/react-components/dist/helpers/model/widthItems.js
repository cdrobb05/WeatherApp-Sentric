"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var agGridColumnSizing_1 = require("../../components/core/pivotTable/agGridColumnSizing");
var AttributeColumnWidthItemBuilder = /** @class */ (function () {
    function AttributeColumnWidthItemBuilder(attributeIdentifier, width, allowGrowToFit) {
        if (allowGrowToFit === void 0) { allowGrowToFit = false; }
        this.attributeColumnWidthItem = {
            attributeIdentifier: attributeIdentifier,
            width: __assign({ value: width }, agGridColumnSizing_1.getAllowGrowToFitProp(allowGrowToFit)),
        };
    }
    return AttributeColumnWidthItemBuilder;
}());
exports.AttributeColumnWidthItemBuilder = AttributeColumnWidthItemBuilder;
var MeasureColumnWidthItemBuilder = /** @class */ (function () {
    function MeasureColumnWidthItemBuilder(measureIdentifier, width, allowGrowToFit) {
        if (allowGrowToFit === void 0) { allowGrowToFit = false; }
        var _this = this;
        this.attributeLocators = function () {
            var attributeLocators = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                attributeLocators[_i] = arguments[_i];
            }
            var _a;
            (_a = _this.measureColumnWidthItem.locators).splice.apply(_a, [-2,
                0].concat(attributeLocators.map(function (attributeLocatorItem) { return ({
                attributeLocatorItem: attributeLocatorItem,
            }); })));
            return _this;
        };
        if (width !== "auto") {
            this.measureColumnWidthItem = {
                width: __assign({ value: width }, agGridColumnSizing_1.getAllowGrowToFitProp(allowGrowToFit)),
                locators: [
                    {
                        measureLocatorItem: {
                            measureIdentifier: measureIdentifier,
                        },
                    },
                ],
            };
        }
        else {
            this.measureColumnWidthItem = {
                width: {
                    value: "auto",
                },
                locators: [
                    {
                        measureLocatorItem: {
                            measureIdentifier: measureIdentifier,
                        },
                    },
                ],
            };
        }
    }
    return MeasureColumnWidthItemBuilder;
}());
exports.MeasureColumnWidthItemBuilder = MeasureColumnWidthItemBuilder;
var AllMeasureColumnWidthItemBuilder = /** @class */ (function () {
    function AllMeasureColumnWidthItemBuilder(width) {
        this.measureColumnWidthItem = {
            width: {
                value: width,
            },
        };
    }
    return AllMeasureColumnWidthItemBuilder;
}());
exports.AllMeasureColumnWidthItemBuilder = AllMeasureColumnWidthItemBuilder;
var WeakMeasureColumnWidthItemBuilder = /** @class */ (function () {
    function WeakMeasureColumnWidthItemBuilder(measureIdentifier, width, allowGrowToFit) {
        if (allowGrowToFit === void 0) { allowGrowToFit = false; }
        this.measureColumnWidthItem = {
            width: {
                value: width,
                allowGrowToFit: allowGrowToFit,
            },
            locator: {
                measureLocatorItem: {
                    measureIdentifier: measureIdentifier,
                },
            },
        };
    }
    return WeakMeasureColumnWidthItemBuilder;
}());
exports.WeakMeasureColumnWidthItemBuilder = WeakMeasureColumnWidthItemBuilder;
exports.attributeColumnWidthItem = function (attributeIdentifier, width) {
    return new AttributeColumnWidthItemBuilder(attributeIdentifier, width);
};
exports.measureColumnWidthItem = function (measureIdentifier, width, allowGrowToFit) {
    if (allowGrowToFit === void 0) { allowGrowToFit = false; }
    return new MeasureColumnWidthItemBuilder(measureIdentifier, width, allowGrowToFit);
};
exports.allMeasureColumnWidthItem = function (width) { return new AllMeasureColumnWidthItemBuilder(width); };
exports.weakMeasureColumnWidthItemBuilder = function (measureIdentifier, width, allowGrowToFit) {
    if (allowGrowToFit === void 0) { allowGrowToFit = false; }
    return new WeakMeasureColumnWidthItemBuilder(measureIdentifier, width, allowGrowToFit);
};
//# sourceMappingURL=widthItems.js.map