"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var isEmpty = require("lodash/isEmpty");
var Operator = require("../constants/measureValueFilterOperators");
exports.isComparisonOperator = function (operator) {
    return operator === Operator.GREATER_THAN ||
        operator === Operator.GREATER_THAN_OR_EQUAL_TO ||
        operator === Operator.LESS_THAN ||
        operator === Operator.LESS_THAN_OR_EQUAL_TO ||
        operator === Operator.EQUAL_TO ||
        operator === Operator.NOT_EQUAL_TO;
};
exports.isRangeOperator = function (operator) {
    return operator === Operator.BETWEEN || operator === Operator.NOT_BETWEEN;
};
exports.isComparisonCondition = function (condition) {
    return !isEmpty(condition) && condition.comparison !== undefined;
};
exports.isRangeCondition = function (condition) {
    return !isEmpty(condition) && condition.range !== undefined;
};
exports.getMeasureValueFilterCondition = function (operator, value, treatNullValuesAsZero) {
    var treatNullValuesAsProperty = treatNullValuesAsZero ? { treatNullValuesAs: 0 } : {};
    if (exports.isComparisonOperator(operator)) {
        return {
            comparison: __assign({ operator: operator, value: value.value || 0 }, treatNullValuesAsProperty),
        };
    }
    else if (exports.isRangeOperator(operator)) {
        return {
            range: __assign({ operator: operator, from: value.from || 0, to: value.to || 0 }, treatNullValuesAsProperty),
        };
    }
    return null;
};
//# sourceMappingURL=MeasureValueFilter.js.map