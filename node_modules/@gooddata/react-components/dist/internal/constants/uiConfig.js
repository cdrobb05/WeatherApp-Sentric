"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var _a;
var bucket_1 = require("./bucket");
var OverTimeComparison_1 = require("../../interfaces/OverTimeComparison");
var visualizationTypes_1 = require("../../constants/visualizationTypes");
var bucketNames_1 = require("../../constants/bucketNames");
exports.MAX_METRICS_COUNT = 20;
exports.DEFAULT_PIE_METRICS_COUNT = 1;
exports.DEFAULT_TREEMAP_MEASURES_COUNT = 1;
exports.MAX_FILTERS_COUNT = 20;
exports.MAX_CATEGORIES_COUNT = 1;
exports.MAX_TABLE_CATEGORIES_COUNT = 20;
exports.MAX_STACKS_COUNT = 1;
exports.MAX_VIEW_COUNT = 2;
exports.DEFAULT_HEADLINE_METRICS_COUNT = 1;
exports.DEFAULT_XIRR_METRICS_COUNT = 1;
exports.DEFAULT_XIRR_ATTRIBUTES_COUNT = 1;
exports.DEFAULT_GEO_ATTRIBUTES_COUNT = 1;
exports.DEFAULT_PUSHPIN_METRICS_COUNT = 1;
exports.UICONFIG = "uiConfig";
exports.RECOMMENDATIONS = "recommendations";
exports.SUPPORTED_COMPARISON_TYPES = "supportedOverTimeComparisonTypes";
exports.OPEN_AS_REPORT = "openAsReport";
exports.SUPPORTED = "supported";
exports.UICONFIG_AXIS = "uiConfig.axis";
exports.measuresBase = {
    accepts: [bucket_1.METRIC, bucket_1.FACT, bucket_1.ATTRIBUTE],
    allowsDuplicateItems: true,
    enabled: true,
    allowsReordering: true,
    allowsSwapping: true,
    itemsLimit: exports.MAX_METRICS_COUNT,
    isShowInPercentEnabled: false,
    isShowInPercentVisible: true,
};
exports.viewBase = {
    accepts: [bucket_1.ATTRIBUTE, bucket_1.DATE],
    itemsLimit: exports.MAX_CATEGORIES_COUNT,
    allowsSwapping: true,
    allowsReordering: false,
    enabled: true,
    isShowInPercentEnabled: false,
};
var stackBase = {
    accepts: [bucket_1.ATTRIBUTE],
    itemsLimit: exports.MAX_STACKS_COUNT,
    allowsSwapping: true,
    allowsReordering: false,
    enabled: true,
    isShowInPercentEnabled: false,
};
exports.defaultFilters = {
    filters: {
        accepts: [bucket_1.ATTRIBUTE, bucket_1.DATE],
        itemsLimit: exports.MAX_FILTERS_COUNT,
        allowsReordering: false,
        enabled: true,
        isShowInPercentEnabled: false,
    },
};
exports.disabledExportConfig = {
    exportConfig: { supported: false },
};
exports.enabledExportConfig = {
    exportConfig: { supported: true },
};
exports.disabledNoMetricConfig = {
    noMetricAccepted: { supported: false },
};
exports.enabledNoMetricConfig = {
    noMetricAccepted: { supported: true },
};
exports.disabledOpenAsReportConfig = {
    openAsReport: { supported: false },
};
exports.enabledOpenAsReportConfig = {
    openAsReport: { supported: true },
};
exports.defaultRootUiConfigProperties = __assign({ recommendations: {}, supportedOverTimeComparisonTypes: [] }, exports.disabledNoMetricConfig, exports.disabledOpenAsReportConfig, exports.enabledExportConfig);
exports.DEFAULT_SCATTERPLOT_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), secondary_measures: __assign({}, exports.measuresBase, { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), attribute: __assign({}, exports.viewBase, { allowsReordering: false, allowsSwapping: false, canAddItems: true, itemsLimit: exports.MAX_STACKS_COUNT }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties);
exports.DEFAULT_BUBBLE_CHART_CONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), secondary_measures: __assign({}, exports.measuresBase, { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), tertiary_measures: __assign({}, exports.measuresBase, { isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), view: __assign({}, exports.viewBase, { allowsReordering: false, allowsSwapping: false, canAddItems: true, itemsLimit: 1 }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties);
exports.DEFAULT_BASE_CHART_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase), stack: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig);
exports.DEFAULT_BAR_CHART_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { isShowOnSecondaryAxisVisible: true }), view: __assign({}, exports.viewBase), stack: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
exports.COLUMN_BAR_CHART_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { isShowOnSecondaryAxisVisible: true }), view: __assign({}, exports.viewBase, { allowsReordering: true, itemsLimit: exports.MAX_VIEW_COUNT }), stack: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ], optionalStacking: {
        supported: true,
        stackMeasures: false,
    } });
exports.DEFAULT_LINE_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { isShowOnSecondaryAxisVisible: true }), trend: __assign({}, exports.viewBase), segment: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
exports.DEFAULT_AREA_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase, { allowsReordering: true, itemsLimit: exports.MAX_VIEW_COUNT }), stack: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig, { optionalStacking: {
        supported: true,
        stackMeasures: true,
    } });
exports.DEFAULT_PIE_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { itemsLimit: exports.DEFAULT_PIE_METRICS_COUNT, allowsReordering: false }), view: __assign({}, exports.viewBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig);
exports.PIE_UICONFIG_WITH_MULTIPLE_METRICS = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase, { itemsLimit: 0 }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig);
exports.PIE_UICONFIG_WITH_ONE_METRIC = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledOpenAsReportConfig);
exports.DEFAULT_TREEMAP_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase), segment: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties);
exports.TREEMAP_UICONFIG_WITH_MULTIPLE_MEASURES = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase, { itemsLimit: 0 }), segment: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties);
exports.TREEMAP_UICONFIG_WITH_ONE_MEASURE = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { itemsLimit: exports.DEFAULT_TREEMAP_MEASURES_COUNT, allowsReordering: false, canAddItems: false, isShowInPercentEnabled: true }), view: __assign({}, exports.viewBase), segment: __assign({}, stackBase) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties);
exports.DEFAULT_PIVOT_TABLE_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), attribute: __assign({}, exports.viewBase, { allowsSwapping: true, allowsReordering: true, itemsLimit: exports.MAX_TABLE_CATEGORIES_COUNT }), columns: __assign({}, exports.viewBase, { allowsSwapping: true, allowsReordering: true, itemsLimit: exports.MAX_TABLE_CATEGORIES_COUNT }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.disabledOpenAsReportConfig, exports.enabledNoMetricConfig, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
exports.DEFAULT_TABLE_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase), attribute: __assign({}, exports.viewBase, { allowsSwapping: false, allowsReordering: true, itemsLimit: exports.MAX_TABLE_CATEGORIES_COUNT }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.enabledNoMetricConfig, exports.enabledOpenAsReportConfig, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
exports.DEFAULT_HEADLINE_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { itemsLimit: exports.DEFAULT_HEADLINE_METRICS_COUNT, isShowInPercentVisible: false, allowsReordering: false }), secondary_measures: __assign({}, exports.measuresBase, { itemsLimit: exports.DEFAULT_HEADLINE_METRICS_COUNT, isShowInPercentVisible: false, allowsReordering: false }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.disabledExportConfig, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
exports.DEFAULT_HEATMAP_UICONFIG = __assign({ buckets: __assign({ measures: {
            accepts: [bucket_1.METRIC, bucket_1.FACT, bucket_1.ATTRIBUTE],
            enabled: true,
            allowsReordering: false,
            allowsSwapping: true,
            itemsLimit: 1,
            isShowInPercentEnabled: false,
            isShowInPercentVisible: false,
            icon: "",
            canAddItems: true,
            allowsDuplicateItems: true,
        }, view: {
            accepts: [bucket_1.ATTRIBUTE, bucket_1.DATE],
            itemsLimit: 1,
            allowsSwapping: true,
            allowsReordering: false,
            enabled: true,
            isShowInPercentEnabled: false,
            icon: "",
            canAddItems: true,
        }, stack: {
            accepts: [bucket_1.ATTRIBUTE, bucket_1.DATE],
            itemsLimit: 1,
            allowsSwapping: true,
            allowsReordering: false,
            enabled: true,
            isShowInPercentEnabled: false,
            icon: "",
            canAddItems: true,
        } }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties);
exports.COMBO_CHART_UICONFIG_DEPRECATED = {
    buckets: __assign({ measures: __assign({}, exports.measuresBase), secondary_measures: __assign({}, exports.measuresBase), view: __assign({}, exports.viewBase, { itemsLimit: 1 }) }, exports.defaultFilters),
    recommendations: {},
    supportedOverTimeComparisonTypes: [],
};
exports.COMBO_CHART_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { canAddItems: true, allowSelectChartType: true, allowOptionalStacking: true }), secondary_measures: __assign({}, exports.measuresBase, { canAddItems: true, allowSelectChartType: true, allowShowOnSecondaryAxis: true }), view: __assign({}, exports.viewBase, { canAddItems: true, itemsLimit: 1 }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ], supportedChartTypes: [visualizationTypes_1.VisualizationTypes.COLUMN, visualizationTypes_1.VisualizationTypes.LINE, visualizationTypes_1.VisualizationTypes.AREA], optionalStacking: {
        supported: true,
        disabled: false,
        stackMeasures: false,
    } });
exports.DEFAULT_XIRR_UICONFIG = __assign({ buckets: __assign({ measures: __assign({}, exports.measuresBase, { accepts: [bucket_1.METRIC, bucket_1.FACT], itemsLimit: exports.DEFAULT_XIRR_METRICS_COUNT, isShowInPercentVisible: false }), attribute: __assign({}, exports.viewBase, { accepts: [bucket_1.DATE], itemsLimit: exports.DEFAULT_XIRR_ATTRIBUTES_COUNT }) }, exports.defaultFilters) }, exports.defaultRootUiConfigProperties, exports.disabledExportConfig);
var geoMeasuresBase = __assign({}, exports.measuresBase, { allowsReordering: false, itemsLimit: exports.DEFAULT_PUSHPIN_METRICS_COUNT, isShowInPercentVisible: false, canAddItems: true });
var geoAttributesBase = __assign({}, exports.viewBase, { accepts: [bucket_1.ATTRIBUTE], canAddItems: true, itemsLimit: exports.DEFAULT_GEO_ATTRIBUTES_COUNT });
exports.GEO_PUSHPIN_CHART_UICONFIG = __assign({ buckets: __assign({ location: __assign({}, geoAttributesBase, { accepts: [bucket_1.ATTRIBUTE, bucket_1.GEO_ATTRIBUTE] }), size: __assign({}, geoMeasuresBase), color: __assign({}, geoMeasuresBase), segment: __assign({}, geoAttributesBase) }, exports.defaultFilters), supportedLocationIcon: { supported: true } }, exports.defaultRootUiConfigProperties, exports.enabledNoMetricConfig);
exports.DEFAULT_BULLET_CHART_CONFIG = __assign({ buckets: __assign((_a = {}, _a[bucketNames_1.MEASURES] = __assign({}, exports.measuresBase, { isShowOnSecondaryAxisVisible: false, isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), _a[bucketNames_1.SECONDARY_MEASURES] = __assign({}, exports.measuresBase, { isShowOnSecondaryAxisVisible: false, isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), _a[bucketNames_1.TERTIARY_MEASURES] = __assign({}, exports.measuresBase, { isShowOnSecondaryAxisVisible: false, isShowInPercentVisible: false, allowsReordering: false, canAddItems: true, itemsLimit: 1 }), _a[bucketNames_1.VIEW] = __assign({}, exports.viewBase, { allowsReordering: true, allowsSwapping: true, canAddItems: true, itemsLimit: 2 }), _a), exports.defaultFilters) }, exports.defaultRootUiConfigProperties, { supportedOverTimeComparisonTypes: [
        OverTimeComparison_1.OverTimeComparisonTypes.SAME_PERIOD_PREVIOUS_YEAR,
        OverTimeComparison_1.OverTimeComparisonTypes.PREVIOUS_PERIOD,
    ] });
//# sourceMappingURL=uiConfig.js.map