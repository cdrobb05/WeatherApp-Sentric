"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var React = require("react");
var react_dom_1 = require("react-dom");
var cloneDeep = require("lodash/cloneDeep");
var set = require("lodash/set");
var tail = require("lodash/tail");
var includes = require("lodash/includes");
var BucketNames = require("../../../../constants/bucketNames");
var bucketConfig_1 = require("../../../utils/bucketConfig");
var PluggableBaseChart_1 = require("../baseChart/PluggableBaseChart");
var uiConfig_1 = require("../../../constants/uiConfig");
var supportedProperties_1 = require("../../../constants/supportedProperties");
var bucketHelper_1 = require("../../../utils/bucketHelper");
var heatmapUiConfigHelper_1 = require("../../../utils/uiConfigHelpers/heatmapUiConfigHelper");
var sort_1 = require("../../../utils/sort");
var HeatMapConfigurationPanel_1 = require("../../configurationPanels/HeatMapConfigurationPanel");
var bucket_1 = require("../../../constants/bucket");
var propertiesHelper_1 = require("../../../utils/propertiesHelper");
var visualizationTypes_1 = require("../../../../constants/visualizationTypes");
var PluggableHeatmap = /** @class */ (function (_super) {
    __extends(PluggableHeatmap, _super);
    function PluggableHeatmap(props) {
        var _this = _super.call(this, props) || this;
        _this.type = visualizationTypes_1.VisualizationTypes.HEATMAP;
        _this.supportedPropertiesList = supportedProperties_1.HEATMAP_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggableHeatmap.prototype.getExtendedReferencePoint = function (referencePoint) {
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign({}, clonedReferencePoint, { uiConfig: cloneDeep(uiConfig_1.DEFAULT_HEATMAP_UICONFIG) });
        newReferencePoint = bucketHelper_1.removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = bucketHelper_1.removeAllDerivedMeasures(newReferencePoint);
        var buckets = bucketHelper_1.limitNumberOfMeasuresInBuckets(clonedReferencePoint.buckets, 1);
        var allAttributes = bucketHelper_1.getAllAttributeItemsWithPreference(buckets, [
            BucketNames.VIEW,
            BucketNames.TREND,
            BucketNames.LOCATION,
            BucketNames.STACK,
            BucketNames.SEGMENT,
        ]);
        var stackItems = bucketHelper_1.getPreferredBucketItems(buckets, [BucketNames.STACK, BucketNames.SEGMENT], [bucket_1.ATTRIBUTE, bucket_1.DATE]);
        var measures = bucketHelper_1.getMeasureItems(buckets);
        var rowItems = allAttributes.filter(function (attribute) {
            return !includes(stackItems, attribute);
        });
        var columnItems = allAttributes.length > 1 ? tail(allAttributes) : stackItems;
        set(newReferencePoint, bucket_1.BUCKETS, [
            {
                localIdentifier: BucketNames.MEASURES,
                items: measures,
            },
            {
                localIdentifier: BucketNames.VIEW,
                items: rowItems.slice(0, 1),
            },
            {
                localIdentifier: BucketNames.STACK,
                items: columnItems.slice(0, 1),
            },
        ]);
        newReferencePoint = heatmapUiConfigHelper_1.setHeatmapUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = bucketConfig_1.configurePercent(newReferencePoint, true);
        newReferencePoint = bucketConfig_1.configureOverTimeComparison(newReferencePoint, !!this.featureFlags.enableWeekFilters);
        newReferencePoint = propertiesHelper_1.getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = sort_1.removeSort(newReferencePoint);
        return Promise.resolve(bucketHelper_1.sanitizeFilters(newReferencePoint));
    };
    PluggableHeatmap.prototype.renderConfigurationPanel = function () {
        if (document.querySelector(this.configPanelElement)) {
            react_dom_1.render(React.createElement(HeatMapConfigurationPanel_1.default, { locale: this.locale, references: this.references, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, mdObject: this.mdObject, colors: this.colors, pushData: this.handlePushData, type: this.type, isError: this.isError, isLoading: this.isLoading, featureFlags: this.featureFlags }), document.querySelector(this.configPanelElement));
        }
    };
    return PluggableHeatmap;
}(PluggableBaseChart_1.PluggableBaseChart));
exports.PluggableHeatmap = PluggableHeatmap;
//# sourceMappingURL=PluggableHeatmap.js.map