import { IntlShape } from "react-intl";
import { AFM, VisualizationObject } from "@gooddata/typings";
import { IReferencePoint, IExtendedReferencePoint, IVisCallbacks, IVisConstruct, IVisProps, ILocale, IFeatureFlags, IUiConfig, IVisualizationPropertiesWrapper, IReferences, IBucket, IBucketItem, IGdcConfig, IVisualizationPropertiesControls, IVisualizationProperties } from "../../../interfaces/Visualization";
import { IColorConfiguration } from "../../../interfaces/Colors";
import { AbstractPluggableVisualization } from "../AbstractPluggableVisualization";
import { AxisType } from "../../../interfaces/AxisType";
import { ChartType } from "../../../../constants/visualizationTypes";
import { IChartConfig } from "../../../../interfaces/Config";
export declare const MAX_WIDTH_FOR_COLLAPSED_LEGEND = 440;
export declare const MAX_WIDTH_FOR_COLLAPSED_AUTO_LEGEND = 610;
export declare const getMaxWidthForCollapsedLegend: (legendPosition: string) => 440 | 610;
export declare class PluggableBaseChart extends AbstractPluggableVisualization {
    protected projectId: string;
    protected callbacks: IVisCallbacks;
    protected type: ChartType;
    protected intl: IntlShape;
    protected featureFlags: IFeatureFlags;
    protected isError: boolean;
    protected isLoading: boolean;
    protected options: IVisProps;
    protected visualizationProperties: IVisualizationProperties;
    protected defaultControlsProperties: IVisualizationPropertiesControls;
    protected customControlsProperties: IVisualizationPropertiesControls;
    protected propertiesMeta: any;
    protected mdObject: VisualizationObject.IVisualizationObjectContent;
    protected supportedPropertiesList: string[];
    protected configPanelElement: string;
    protected colors: IColorConfiguration;
    protected references: IReferences;
    protected ignoreUndoRedo: boolean;
    protected axis: string;
    protected secondaryAxis: AxisType;
    protected locale: ILocale;
    protected environment: string;
    private element;
    constructor(props: IVisConstruct);
    unmount(): void;
    update(options: IVisProps, visualizationProperties: IVisualizationPropertiesWrapper, mdObject: VisualizationObject.IVisualizationObjectContent, references: IReferences): void;
    getUiConfig(): IUiConfig;
    getExtendedReferencePoint(referencePoint: IReferencePoint): Promise<IExtendedReferencePoint>;
    isOpenAsReportSupported(): boolean;
    setCustomControlsProperties(customControlsProperties: IVisualizationPropertiesControls): void;
    protected configureBuckets(extendedReferencePoint: IExtendedReferencePoint): void;
    protected getSupportedPropertiesList(): string[];
    protected getStackItems(buckets: IBucket[]): IBucketItem[];
    protected renderVisualization(options: IVisProps, visualizationProperties: IVisualizationProperties, mdObject: VisualizationObject.IVisualizationObjectContent): void;
    protected initializeProperties(visualizationProperties: IVisualizationPropertiesWrapper): void;
    protected renderConfigurationPanel(): void;
    protected getDimensions(mdObject: VisualizationObject.IVisualizationObjectContent): AFM.IDimension[];
    protected colorMappingChanged(data: any): void;
    protected handleConfirmedColorMapping(data: any): void;
    protected handlePushData: (data: any) => void;
    protected buildVisualizationConfig(mdObject: VisualizationObject.IVisualizationObjectContent, config: IGdcConfig, supportedControls: IVisualizationPropertiesControls): IChartConfig;
    private getOpenAsReportConfig;
    private onError;
    private getSupportedControls;
    private onExportReady;
    private onLoadingChanged;
    private getLegendPosition;
}
