"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var react_dom_1 = require("react-dom");
var React = require("react");
var cloneDeep = require("lodash/cloneDeep");
var get = require("lodash/get");
var set = require("lodash/set");
var BucketNames = require("../../../../constants/bucketNames");
var bucketConfig_1 = require("../../../utils/bucketConfig");
var PluggableBaseChart_1 = require("../baseChart/PluggableBaseChart");
var PieChartConfigurationPanel_1 = require("../../configurationPanels/PieChartConfigurationPanel");
var bucket_1 = require("../../../constants/bucket");
var supportedProperties_1 = require("../../../constants/supportedProperties");
var uiConfig_1 = require("../../../constants/uiConfig");
var bucketHelper_1 = require("../../../utils/bucketHelper");
var pieChartUiConfigHelper_1 = require("../../../utils/uiConfigHelpers/pieChartUiConfigHelper");
var sort_1 = require("../../../utils/sort");
var propertiesHelper_1 = require("../../../utils/propertiesHelper");
var visualizationTypes_1 = require("../../../../constants/visualizationTypes");
var properties_1 = require("../../../constants/properties");
var alignments_1 = require("../../../../constants/alignments");
var PluggablePieChart = /** @class */ (function (_super) {
    __extends(PluggablePieChart, _super);
    function PluggablePieChart(props) {
        var _this = _super.call(this, props) || this;
        _this.type = visualizationTypes_1.VisualizationTypes.PIE;
        _this.supportedPropertiesList = supportedProperties_1.PIECHART_SUPPORTED_PROPERTIES;
        _this.initializeProperties(props.visualizationProperties);
        return _this;
    }
    PluggablePieChart.prototype.getExtendedReferencePoint = function (referencePoint) {
        var clonedReferencePoint = cloneDeep(referencePoint);
        var newReferencePoint = __assign({}, clonedReferencePoint, { uiConfig: cloneDeep(uiConfig_1.DEFAULT_PIE_UICONFIG) });
        newReferencePoint = bucketHelper_1.removeAllArithmeticMeasuresFromDerived(newReferencePoint);
        newReferencePoint = bucketHelper_1.removeAllDerivedMeasures(newReferencePoint);
        var buckets = get(clonedReferencePoint, bucket_1.BUCKETS, []);
        var attributes = bucketHelper_1.getAttributeItems(buckets);
        if (attributes.length) {
            var limitedBuckets = bucketHelper_1.limitNumberOfMeasuresInBuckets(buckets, 1);
            var limitedMeasures = bucketHelper_1.getMeasureItems(limitedBuckets);
            set(newReferencePoint, bucket_1.BUCKETS, [
                {
                    localIdentifier: BucketNames.MEASURES,
                    items: limitedMeasures,
                },
                {
                    localIdentifier: BucketNames.VIEW,
                    items: attributes.slice(0, 1),
                },
            ]);
        }
        else {
            var measures = bucketHelper_1.getMeasureItems(buckets);
            if (measures.length > 1) {
                set(newReferencePoint, uiConfig_1.UICONFIG, cloneDeep(uiConfig_1.PIE_UICONFIG_WITH_MULTIPLE_METRICS));
            }
            else {
                set(newReferencePoint, uiConfig_1.UICONFIG, cloneDeep(uiConfig_1.PIE_UICONFIG_WITH_ONE_METRIC));
            }
            set(newReferencePoint, bucket_1.BUCKETS, [
                {
                    localIdentifier: BucketNames.MEASURES,
                    items: measures,
                },
                {
                    localIdentifier: BucketNames.VIEW,
                    items: [],
                },
            ]);
        }
        newReferencePoint = pieChartUiConfigHelper_1.setPieChartUiConfig(newReferencePoint, this.intl, this.type);
        newReferencePoint = bucketConfig_1.configurePercent(newReferencePoint, false);
        newReferencePoint = bucketConfig_1.configureOverTimeComparison(newReferencePoint, !!this.featureFlags.enableWeekFilters);
        newReferencePoint = propertiesHelper_1.getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = sort_1.removeSort(newReferencePoint);
        return Promise.resolve(bucketHelper_1.sanitizeFilters(newReferencePoint));
    };
    PluggablePieChart.prototype.renderConfigurationPanel = function () {
        if (document.querySelector(this.configPanelElement)) {
            react_dom_1.render(React.createElement(PieChartConfigurationPanel_1.default, { locale: this.locale, properties: this.visualizationProperties, propertiesMeta: this.propertiesMeta, mdObject: this.mdObject, pushData: this.handlePushData, colors: this.colors, type: this.type, isError: this.isError, isLoading: this.isLoading, featureFlags: this.featureFlags, references: this.references }), document.querySelector(this.configPanelElement));
        }
    };
    PluggablePieChart.prototype.buildVisualizationConfig = function (mdObject, config, supportedControls) {
        var baseVisualizationConfig = _super.prototype.buildVisualizationConfig.call(this, mdObject, config, supportedControls);
        if (this.environment === properties_1.DASHBOARDS_ENVIRONMENT) {
            return __assign({}, baseVisualizationConfig, { chart: {
                    verticalAlign: alignments_1.TOP,
                } });
        }
        return baseVisualizationConfig;
    };
    return PluggablePieChart;
}(PluggableBaseChart_1.PluggableBaseChart));
exports.PluggablePieChart = PluggablePieChart;
//# sourceMappingURL=PluggablePieChart.js.map