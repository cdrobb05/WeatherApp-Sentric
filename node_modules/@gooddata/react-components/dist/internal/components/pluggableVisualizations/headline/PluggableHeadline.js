"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var React = require("react");
var react_dom_1 = require("react-dom");
var cloneDeep = require("lodash/cloneDeep");
var BucketNames = require("../../../../constants/bucketNames");
var bucket_1 = require("../../../constants/bucket");
var bucketConfig_1 = require("../../../utils/bucketConfig");
var bucketHelper_1 = require("../../../utils/bucketHelper");
var sort_1 = require("../../../utils/sort");
var headlineUiConfigHelper_1 = require("../../../utils/uiConfigHelpers/headlineUiConfigHelper");
var headlineBucketHelper_1 = require("./headlineBucketHelper");
var bucketRules_1 = require("../../../utils/bucketRules");
var propertiesHelper_1 = require("../../../utils/propertiesHelper");
var Headline_1 = require("../../../../components/core/Headline");
var visualizationTypes_1 = require("../../../../constants/visualizationTypes");
var dimensions_1 = require("../../../../helpers/dimensions");
var featureFlags_1 = require("../../../../helpers/featureFlags");
var PluggableBaseHeadline_1 = require("../baseHeadline/PluggableBaseHeadline");
var PluggableHeadline = /** @class */ (function (_super) {
    __extends(PluggableHeadline, _super);
    function PluggableHeadline() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    PluggableHeadline.prototype.getExtendedReferencePoint = function (referencePoint) {
        var referencePointCloned = cloneDeep(referencePoint);
        var newReferencePoint = __assign({}, referencePointCloned, { uiConfig: headlineUiConfigHelper_1.getDefaultHeadlineUiConfig() });
        if (!bucketRules_1.hasGlobalDateFilter(referencePoint.filters)) {
            newReferencePoint = bucketHelper_1.removeAllArithmeticMeasuresFromDerived(newReferencePoint);
            newReferencePoint = bucketHelper_1.removeAllDerivedMeasures(newReferencePoint);
        }
        var mappedReferencePoint = headlineBucketHelper_1.tryToMapForeignBuckets(newReferencePoint);
        if (mappedReferencePoint) {
            newReferencePoint = mappedReferencePoint;
        }
        else {
            var limitedBuckets = bucketHelper_1.limitNumberOfMeasuresInBuckets(newReferencePoint.buckets, 2, true);
            var allMeasures = bucketHelper_1.getAllItemsByType(limitedBuckets, [bucket_1.METRIC]);
            var primaryMeasure = allMeasures.length > 0 ? allMeasures[0] : null;
            var secondaryMeasure = headlineBucketHelper_1.findComplementaryOverTimeComparisonMeasure(primaryMeasure, allMeasures) ||
                headlineBucketHelper_1.findSecondMasterMeasure(allMeasures);
            newReferencePoint = headlineBucketHelper_1.setHeadlineRefPointBuckets(newReferencePoint, primaryMeasure, secondaryMeasure);
        }
        bucketConfig_1.configurePercent(newReferencePoint, true);
        bucketConfig_1.configureOverTimeComparison(newReferencePoint, !!this.featureFlags.enableWeekFilters);
        newReferencePoint.uiConfig = headlineUiConfigHelper_1.getHeadlineUiConfig(newReferencePoint, this.intl);
        newReferencePoint = propertiesHelper_1.getReferencePointWithSupportedProperties(newReferencePoint, this.supportedPropertiesList);
        newReferencePoint = sort_1.removeSort(newReferencePoint);
        return Promise.resolve(bucketHelper_1.sanitizeFilters(newReferencePoint));
    };
    PluggableHeadline.prototype.renderVisualization = function (options, mdObject) {
        var dataSource = options.dataSource;
        if (dataSource) {
            var resultSpec = options.resultSpec, locale = options.locale, custom = options.custom, config = options.config;
            var drillableItems = custom.drillableItems;
            var _a = this.callbacks, afterRender = _a.afterRender, onError = _a.onError, onLoadingChanged = _a.onLoadingChanged, pushData = _a.pushData, onDrill = _a.onDrill, onFiredDrillEvent = _a.onFiredDrillEvent;
            var resultSpecWithDimensions = __assign({}, resultSpec, { dimensions: this.getDimensions(mdObject) });
            react_dom_1.render(React.createElement(Headline_1.Headline, { projectId: this.projectId, drillableItems: drillableItems, onDrill: onDrill, onFiredDrillEvent: onFiredDrillEvent, locale: locale, config: featureFlags_1.setConfigFromFeatureFlags(config, this.featureFlags), dataSource: dataSource, resultSpec: resultSpecWithDimensions, afterRender: afterRender, onLoadingChanged: onLoadingChanged, pushData: pushData, onError: onError, LoadingComponent: null, ErrorComponent: null }), document.querySelector(this.element));
        }
    };
    PluggableHeadline.prototype.getDimensions = function (mdObject) {
        return dimensions_1.generateDimensions(mdObject, visualizationTypes_1.VisualizationTypes.HEADLINE);
    };
    PluggableHeadline.prototype.mergeDerivedBucketItems = function (referencePoint, bucket, newDerivedBucketItems) {
        return bucket.items.reduce(function (resultItems, bucketItem) {
            var newDerivedBucketItem = bucketHelper_1.findDerivedBucketItem(bucketItem, newDerivedBucketItems);
            var shouldAddItem = newDerivedBucketItem &&
                !bucketHelper_1.isDerivedBucketItem(bucketItem) &&
                !bucketHelper_1.hasDerivedBucketItems(bucketItem, referencePoint.buckets);
            var shouldAddAfterMasterItem = bucket.localIdentifier === BucketNames.MEASURES;
            if (shouldAddItem && !shouldAddAfterMasterItem) {
                resultItems.push(newDerivedBucketItem);
            }
            resultItems.push(bucketItem);
            if (shouldAddItem && shouldAddAfterMasterItem) {
                resultItems.push(newDerivedBucketItem);
            }
            return resultItems;
        }, []);
    };
    return PluggableHeadline;
}(PluggableBaseHeadline_1.PluggableBaseHeadline));
exports.PluggableHeadline = PluggableHeadline;
//# sourceMappingURL=PluggableHeadline.js.map