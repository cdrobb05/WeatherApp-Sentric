"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019 GoodData Corporation
var React = require("react");
var classNames = require("classnames");
var ColorPaletteItem_1 = require("./ColorPaletteItem");
var MAX_SMALL_PALETTE_SIZE = 20;
var ColorPalette = /** @class */ (function (_super) {
    __extends(ColorPalette, _super);
    function ColorPalette() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onColorSelected = function (color) {
            _this.props.onColorSelected(color);
        };
        return _this;
    }
    ColorPalette.prototype.render = function () {
        return React.createElement("div", { className: this.getClassNames() }, this.renderItems());
    };
    ColorPalette.prototype.getClassNames = function () {
        var isColorPaletteLarge = this.isColorPaletteLarge();
        return classNames({
            "gd-color-drop-down-list-large": isColorPaletteLarge,
            "gd-color-drop-down-list": !isColorPaletteLarge,
        }, "s-color-drop-down-list");
    };
    ColorPalette.prototype.renderItems = function () {
        var _this = this;
        return this.props.colorPalette.map(function (item) {
            return (React.createElement(ColorPaletteItem_1.default, { selected: _this.isItemSelected(item.guid), key: item.guid, paletteItem: item, onColorSelected: _this.onColorSelected }));
        });
    };
    ColorPalette.prototype.isColorPaletteLarge = function () {
        return this.props.colorPalette.length > MAX_SMALL_PALETTE_SIZE;
    };
    ColorPalette.prototype.isItemSelected = function (guid) {
        return this.props.selectedColorGuid === guid;
    };
    return ColorPalette;
}(React.PureComponent));
exports.default = ColorPalette;
//# sourceMappingURL=ColorPalette.js.map