"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019-2020 GoodData Corporation
var React = require("react");
var set = require("lodash/set");
var get = require("lodash/get");
var cloneDeep = require("lodash/cloneDeep");
var react_intl_1 = require("react-intl");
var Button_1 = require("@gooddata/goodstrap/lib/Button/Button");
var classNames = require("classnames");
var ConfigSection_1 = require("../../configurationControls/ConfigSection");
var ColoredItemsList_1 = require("./coloredItemsList/ColoredItemsList");
var translations_1 = require("../../../utils/translations");
var colors_1 = require("../../../utils/colors");
exports.COLOR_MAPPING_CHANGED = "COLOR_MAPPING_CHANGED";
var ColorsSection = /** @class */ (function (_super) {
    __extends(ColorsSection, _super);
    function ColorsSection() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onSelect = function (selectedColorItem, color) {
            var _a = _this.props, properties = _a.properties, pushData = _a.pushData;
            var mappingHeader = selectedColorItem.mappingHeader;
            var result = colors_1.getProperties(properties, mappingHeader, color);
            var message = {
                messageId: exports.COLOR_MAPPING_CHANGED,
                properties: result,
            };
            pushData(message);
        };
        _this.onResetColors = function () {
            var _a = _this.props, properties = _a.properties, pushData = _a.pushData;
            if (_this.isDefaultColorMapping()) {
                return;
            }
            var propertiesWithoutColorMapping = set(cloneDeep(properties), "controls.colorMapping", undefined);
            var message = {
                messageId: exports.COLOR_MAPPING_CHANGED,
                properties: propertiesWithoutColorMapping,
                references: {},
            };
            pushData(message);
        };
        return _this;
    }
    ColorsSection.prototype.render = function () {
        var _a = this.props, pushData = _a.pushData, propertiesMeta = _a.propertiesMeta;
        return (React.createElement(ConfigSection_1.default, { title: "properties.colors", pushData: pushData, propertiesMeta: propertiesMeta, id: "colors_section", className: "adi-color-configuration" }, this.renderSectionContents()));
    };
    ColorsSection.prototype.isColoredListVisible = function () {
        var _a = this.props, colors = _a.colors, hasMeasures = _a.hasMeasures, controlsDisabled = _a.controlsDisabled, isLoading = _a.isLoading;
        return isLoading || (!controlsDisabled && (colors && colors.colorPalette && hasMeasures));
    };
    ColorsSection.prototype.renderResetButton = function () {
        var controlsDisabled = this.props.controlsDisabled;
        var isDisabled = controlsDisabled || this.isDefaultColorMapping();
        var classes = classNames("gd-color-reset-colors-section", {
            disabled: isDisabled,
        });
        return (React.createElement("div", { className: classes },
            React.createElement(Button_1.default, { value: translations_1.getTranslation("properties.colors.reset-colors", this.props.intl), className: "gd-button-link s-reset-colors-button", onClick: this.onResetColors, disabled: isDisabled })));
    };
    ColorsSection.prototype.renderColoredList = function () {
        var _a = this.props, colors = _a.colors, showCustomPicker = _a.showCustomPicker, controlsDisabled = _a.controlsDisabled, isLoading = _a.isLoading;
        var inputItems = colors_1.getColoredInputItems(colors);
        var colorPalette = colors && colors.colorPalette ? colors.colorPalette : [];
        return (React.createElement("div", null,
            React.createElement(ColoredItemsList_1.default, { colorPalette: colorPalette, inputItems: inputItems, onSelect: this.onSelect, showCustomPicker: showCustomPicker, disabled: controlsDisabled, isLoading: isLoading }),
            this.renderResetButton()));
    };
    ColorsSection.prototype.isDefaultColorMapping = function () {
        var properties = this.props.properties;
        var colorMapping = get(properties, "controls.colorMapping", []);
        return !colorMapping || colorMapping.length === 0;
    };
    ColorsSection.prototype.renderUnsupportedColoredList = function () {
        return (React.createElement("div", { className: "gd-color-unsupported" }, translations_1.getTranslation("properties.colors.unsupported", this.props.intl)));
    };
    ColorsSection.prototype.renderSectionContents = function () {
        return this.isColoredListVisible() ? this.renderColoredList() : this.renderUnsupportedColoredList();
    };
    return ColorsSection;
}(React.Component));
exports.default = react_intl_1.injectIntl(ColorsSection);
//# sourceMappingURL=ColorsSection.js.map