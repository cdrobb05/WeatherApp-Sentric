"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
// (C) 2019 GoodData Corporation
var React = require("react");
var CustomEvent = require("custom-event");
var react_intl_1 = require("react-intl");
var Dropdown_1 = require("@gooddata/goodstrap/lib/Dropdown/Dropdown");
var ColoredItem_1 = require("./ColoredItem");
var colors_1 = require("../../../../utils/colors");
var VISIBLE_ITEMS_COUNT = 5;
var SEARCHFIELD_VISIBILITY_THRESHOLD = 7;
var DROPDOWN_BODY_WIDTH = 218;
var ColoredItemsList = /** @class */ (function (_super) {
    __extends(ColoredItemsList, _super);
    function ColoredItemsList(props) {
        var _this = _super.call(this, props) || this;
        _this.onScroll = function () {
            if (_this.listRef && _this.listRef.current) {
                var node = _this.listRef.current;
                node.dispatchEvent(new CustomEvent("goodstrap.scrolled", { bubbles: true }));
            }
        };
        _this.onSearch = function (searchString) {
            _this.setState({ searchString: searchString });
            _this.closeOpenDropdownOnSearch();
        };
        _this.isSearchFieldVisible = function () {
            return _this.props.inputItems.length > SEARCHFIELD_VISIBILITY_THRESHOLD && !_this.props.isLoading;
        };
        _this.onSelect = function (selectedColorItem, color) {
            _this.props.onSelect(selectedColorItem, color);
        };
        _this.state = {
            searchString: "",
        };
        _this.listRef = React.createRef();
        return _this;
    }
    ColoredItemsList.prototype.render = function () {
        var searchString = this.isSearchFieldVisible() ? this.state.searchString : "";
        var items = colors_1.getSearchedItems(this.props.inputItems, searchString);
        return (React.createElement("div", { ref: this.listRef },
            React.createElement(Dropdown_1.DropdownBody, { width: DROPDOWN_BODY_WIDTH, isSearchFieldVisible: this.isSearchFieldVisible(), searchString: searchString, onSearch: this.onSearch, onScrollStart: this.onScroll, items: items, rowItem: React.createElement(ColoredItem_1.default, { colorPalette: this.props.colorPalette, onSelect: this.onSelect, showCustomPicker: this.props.showCustomPicker, disabled: this.props.disabled }), className: "gd-colored-items-list", maxVisibleItemsCount: VISIBLE_ITEMS_COUNT, disabled: this.props.disabled, isLoading: this.props.isLoading })));
    };
    ColoredItemsList.prototype.closeOpenDropdownOnSearch = function () {
        // we have to close all dropdown ONE-3526
        // (IE has bug onClick on ClearIcon in Input doesn't fire click event and dropdown will not close)
        // so we can close it by onScroll event
        this.onScroll();
    };
    ColoredItemsList.defaultProps = {
        disabled: false,
        isLoading: false,
    };
    return ColoredItemsList;
}(React.PureComponent));
exports.default = react_intl_1.injectIntl(ColoredItemsList);
//# sourceMappingURL=ColoredItemsList.js.map